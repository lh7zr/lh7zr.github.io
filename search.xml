<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>React(四) 组件生命周期</title>
      <link href="/2022/09/19/React(%E5%9B%9B)%20%E7%BB%84%E4%BB%B6%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
      <url>/2022/09/19/React(%E5%9B%9B)%20%E7%BB%84%E4%BB%B6%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
      
        <content type="html"><![CDATA[<h2 id="组件的生命周期概述"><a href="#组件的生命周期概述" class="headerlink" title="组件的生命周期概述"></a>组件的生命周期概述</h2><ul><li>组件的生命周期有助于理解组件的运行方式，完成更复杂的组件功能，分析组件错误原因等</li><li><font color="red">组件的生命周期：</font> 组件从被创建到挂载到页面中运行，再到组件不用时卸载的过程</li><li>生命周期的每个阶段总是伴随着一些方法调用，这些方法就是生命周期的<font color="red">钩子函数。</font></li><li>钩子函数的作用，为开发人员在不同阶段操作组件提供了时机</li><li><font color="red"> 只用类组件才有生命周期 </font><h2 id="生命周期的三个阶段"><a href="#生命周期的三个阶段" class="headerlink" title="生命周期的三个阶段"></a>生命周期的三个阶段</h2></li></ul><ol><li>创建时（挂载阶段 ）</li></ol><ul><li>执行时机：组件创建时（页面加载时）</li><li>执行顺序：<pre><code>  constructor() -&gt;   render()  -&gt;   componentDidMount</code></pre></li><li><img src="https://linmuhan.gitee.io/images/creategz01.png" alt="创建时候生命周期"></li></ul>]]></content>
      
      
      <categories>
          
          <category> REACT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> REACT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React(三)-组件进阶</title>
      <link href="/2022/09/04/React-%E7%BB%84%E4%BB%B6%E8%BF%9B%E9%98%B6/"/>
      <url>/2022/09/04/React-%E7%BB%84%E4%BB%B6%E8%BF%9B%E9%98%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li>本篇博客主要讲解的React组件之间的关系，哈哈哈<h2 id="组件的props"><a href="#组件的props" class="headerlink" title="组件的props"></a>组件的props</h2></li><li>组件是封闭的，要接收外部数据通过props实现</li><li><strong>props作用：接收传递给组件的数据</strong></li><li>传递数据，给组件标签添加属性</li><li>接收数据：<strong>函数组件通过参数props 接收数据</strong>，<strong>类组件通过this.props接收数据</strong></li><li>函数组件接收参数 props.参数名，代码如下：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> ReactDOM <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-dom&#x27;</span><br><span class="hljs-comment">/*接收数据*/</span><br><span class="hljs-keyword">const</span> Hello= <span class="hljs-function">(<span class="hljs-params">props</span>)=&gt;</span>&#123;<br>    <span class="hljs-comment">//props是一个对象</span><br>    <span class="hljs-keyword">return</span> (<br>        <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span> props: &#123;props.name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    )<br>&#125;<br><span class="hljs-comment">//传递数据</span><br>ReactDOM.render(<br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Hello</span>  <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;kiku&quot;</span>/&gt;</span></span>,<br>    <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;root&#x27;</span>))<br></code></pre></td></tr></table></figure></li><li>类组件proos 接收参数 this.props.参数名   代码示例如下<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> ReactDOM <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-dom&#x27;</span><br><span class="hljs-comment">/*接收数据*/</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Hello</span>  <span class="hljs-keyword">extends</span>  <span class="hljs-title">React</span>.<span class="hljs-title">Component</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">return</span>(<br>            <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>props:&#123;this.props.name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>        )<br>    &#125;<br>&#125;<br><span class="hljs-comment">//传递数据</span><br>ReactDOM.render(<br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Hello</span>  <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;kiku&quot;</span>/&gt;</span></span>,<br>    <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;root&#x27;</span>))<br></code></pre></td></tr></table></figure><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3></li><li>可以给组件传递任意类型的数据</li><li> <strong>props 是只读的对象</strong>，只能读取属性的值无法修改对象</li><li>注意：使用类组件时，如果写了构造函数，应该将props 传递给 super() 否则无法在构造函数中，获取props!!!!<h2 id="组件通讯的三种方式"><a href="#组件通讯的三种方式" class="headerlink" title="组件通讯的三种方式"></a>组件通讯的三种方式</h2></li><li>父组件 -&gt; 子组件 ，子组件 -&gt; 父组件 ，兄弟组件<h3 id="父组件传递数据给子组件"><a href="#父组件传递数据给子组件" class="headerlink" title="父组件传递数据给子组件"></a>父组件传递数据给子组件</h3></li><li>父组件提供要传递的state值</li><li>给子组件添加属性，值为state中的数据</li><li>子组件<strong>通过props 接收</strong>父组件传递的数据<h3 id="子组件传递给父组件"><a href="#子组件传递给父组件" class="headerlink" title="子组件传递给父组件"></a>子组件传递给父组件</h3></li><li>思路： 利用回调函数，父组件提供回调，子组件调用，将要传递的数据作为回调函数的参数</li><li>子组件通过 props 调用回调函数</li><li>将子组件的数据作为参数传递给回调函数<h3 id="兄弟组件"><a href="#兄弟组件" class="headerlink" title="兄弟组件"></a>兄弟组件</h3></li><li><strong>将共享状态提升到最近公共的父组件中，由公共父组件管理这个状态</strong></li><li>思想：状态提升</li><li><strong>公共父组件职责</strong>：<strong>1.提供共享状态，2.提供操作共享状态的方法</strong></li><li>要通讯的子组件只需通过props接收状态或操作状态方法<h3 id="Context-跨组件传递数据"><a href="#Context-跨组件传递数据" class="headerlink" title="Context (跨组件传递数据)"></a>Context (跨组件传递数据)</h3></li></ul><ul><li>调用 React.createContext() 创建Provider(提供数据) 和 Consumer 消费数据两个组件<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> &#123;Provider,Consumer&#125; =React.createContext()<br></code></pre></td></tr></table></figure><h3 id="props深入"><a href="#props深入" class="headerlink" title="props深入"></a>props深入</h3><h4 id="children-属性"><a href="#children-属性" class="headerlink" title="children 属性"></a>children 属性</h4></li><li>children属性，表示组件标签的子节点，当组件标签有子节点时，props就会有该属性</li><li>children属性与普通的props 一样，值可以是任意值（文本，React元素,组件，甚至是函数）</li><li>children为:文本节点,代码示例如下<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> ReactDOM <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-dom&#x27;</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * children属性</span><br><span class="hljs-comment"> * */</span><br><span class="hljs-keyword">const</span> App = <span class="hljs-function">(<span class="hljs-params">props</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(props)<br>  <span class="hljs-keyword">return</span>(<br>      <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">          <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>组件标签的子节点：<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="xml">          &#123;props.children&#125; &#123;/* 组件标签中有子节点时，才有这个属性*/&#125;</span><br><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  )<br>&#125;<br>ReactDOM.render(<br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">App</span>&gt;</span></span><br><span class="xml">        我是子节点</span><br><span class="xml">        &#123;/*<span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>我是一个子节点，我是一个p标签<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>*/&#125;</span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">App</span>&gt;</span></span>,<br>    <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;root&#x27;</span>))<br></code></pre></td></tr></table></figure><h4 id="props-校验"><a href="#props-校验" class="headerlink" title="props 校验"></a>props 校验</h4></li><li>props校验： 允许在创建组件的时候，就指定proos的类型、格式等</li><li>作用： 捕获使用组件时因为props导致的错误，给出明确的错误提示，增加组件的健壮性</li><li>使用方法：<br> 1.安装prop-types (npm install prop-types)<br> 2.导入 prop-types包<br> 3.使用 <font color=red><strong>组件名.propTypes ={}</strong></font> 来给组件的props添加校验规则<br> 4.校验规则通过 PropTypes 对象来指定</li><li>代码示例如下：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> ReactDOM <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-dom&#x27;</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * props 校验</span><br><span class="hljs-comment"> * */</span><br><span class="hljs-comment">// 导入prop-types 包</span><br><span class="hljs-keyword">import</span> PropTypes <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;prop-types&#x27;</span><br><span class="hljs-keyword">const</span> App = <span class="hljs-function">(<span class="hljs-params">props</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span>  arr = props.colors<br>    <span class="hljs-keyword">const</span> lts = arr.map(<span class="hljs-function">(<span class="hljs-params">item,index</span>)=&gt;</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;index&#125;</span>&gt;</span>&#123;item&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span>)<br>    <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span>&#123;lts&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 添加props 校验</span><br><span class="hljs-comment"> * **/</span><br>App.propTypes =&#123;<br>   <span class="hljs-attr">colors</span>:PropTypes.array,<span class="hljs-comment">//约束colors为数组类型,如果类型不对，则爆出明确错误，便于分析错误原因</span><br>&#125;<br>ReactDOM.render(<br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">App</span> <span class="hljs-attr">colors</span>=<span class="hljs-string">&#123;[</span>&#x27;<span class="hljs-attr">red</span>&#x27;,&#x27;<span class="hljs-attr">green</span>&#x27;,&#x27;<span class="hljs-attr">yellow</span>&#x27;]&#125;/&gt;</span></span>,<br>    <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;root&#x27;</span>))<br></code></pre></td></tr></table></figure></li><li>更多规则欢迎大家访问<a href="https://zh-hans.reactjs.org/docs/typechecking-with-proptypes.html" target="_blank">约束规则</a></li></ul><h4 id="props默认值"><a href="#props默认值" class="headerlink" title="props默认值"></a>props默认值</h4><ul><li>作用: 给props 设置默认值，在未传入props时生效</li><li>场景： 分页组件，-每页显示条数<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> ReactDOM <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-dom&#x27;</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * props 默认值</span><br><span class="hljs-comment"> * */</span><br> <span class="hljs-keyword">const</span> App = <span class="hljs-function"><span class="hljs-params">props</span> =&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(props)<br>     <span class="hljs-keyword">return</span>(<br>         <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">             此处展示props的默认值：&#123;props.pageSize&#125;</span><br><span class="xml">         <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>     )<br> &#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 添加props 默认值</span><br><span class="hljs-comment"> * **/</span><br>App.defaultProps =&#123;<br>    <span class="hljs-attr">pageSize</span>:<span class="hljs-number">10</span><br>&#125;<br>ReactDOM.render(<br>    <span class="hljs-comment">//不传入pageSize 属性</span><br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">App</span>/&gt;</span></span>,<br>    <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;root&#x27;</span>))<br></code></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> REACT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> REACT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react 基础学习（二）之表单处理</title>
      <link href="/2022/09/04/React-%E8%A1%A8%E5%8D%95%E5%A4%84%E7%90%86/"/>
      <url>/2022/09/04/React-%E8%A1%A8%E5%8D%95%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li>本篇博客主要讲述了react 的表单处理，能够看到此博客的你，希望对你有所帮助<h2 id="表单处理"><a href="#表单处理" class="headerlink" title="表单处理"></a>表单处理</h2></li><li>React 将state中的值与表单元素value 绑定在一起，由state的值来控制表单元素的值<h3 id="受控组件"><a href="#受控组件" class="headerlink" title="受控组件"></a>受控组件</h3></li><li>文本框，富文本框，下拉框 操作value属性</li><li>复选框操作checked 属性</li><li>代码示例如下：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//导入react</span><br><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> ReactDOM <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-dom&#x27;</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 受控组件：其值受到react控制的表单元素</span><br><span class="hljs-comment"> * 操作文本框的值</span><br><span class="hljs-comment"> * **/</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Hello</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-built_in">super</span>()<br>        <span class="hljs-built_in">this</span>.state = &#123;<br>            <span class="hljs-attr">txt</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>            <span class="hljs-attr">content</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>            <span class="hljs-attr">city</span>:<span class="hljs-string">&#x27;kiku&#x27;</span>,<br>            <span class="hljs-attr">isCheck</span>:<span class="hljs-literal">false</span><br><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/*处理input框变化*/</span><br>    handleChange = <span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> &#123;<br>        <span class="hljs-built_in">this</span>.setState(&#123;<br>            <span class="hljs-attr">txt</span>: e.target.value,<br><br>        &#125;)<br>    &#125;<br>    <span class="hljs-comment">/*处理富文本框变化*/</span><br>    handleContent = <span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> &#123;<br>        <span class="hljs-built_in">this</span>.setState(&#123;<br>            <span class="hljs-attr">content</span>: e.target.value<br>        &#125;)<br>    &#125;<br>    <span class="hljs-comment">/*下拉框变化*/</span><br>    handleSelect = <span class="hljs-function">(<span class="hljs-params">e</span>)=&gt;</span>&#123;<br>        <span class="hljs-built_in">this</span>.setState(&#123;<br>            <span class="hljs-attr">city</span>:e.target.value<br>        &#125;)<br>    &#125;<br>    <span class="hljs-comment">/*复选框变化*/</span><br>    handleCheck=<span class="hljs-function">(<span class="hljs-params">e</span>)=&gt;</span>&#123;<br>        <span class="hljs-built_in">this</span>.setState(&#123;<br>            <span class="hljs-attr">isCheck</span>:e.target.checked<br>        &#125;)<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">return</span> (<br>            <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">                &#123;/*文本框*/&#125;</span><br><span class="xml">                <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;this.state.txt&#125;</span> <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;this.handleChange&#125;/</span>&gt;</span></span><br><span class="xml">                <span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span></span><br><span class="xml">                &#123;/* 富文本框 */&#125;</span><br><span class="xml">                <span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;this.state.content&#125;</span> <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;this.handleContent&#125;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span></span><br><span class="xml">                <span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span></span><br><span class="xml">                &#123;/* 下拉框 */&#125;</span><br><span class="xml">                <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;this.state.city&#125;</span> <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;this.handleSelect&#125;</span>&gt;</span></span><br><span class="xml">                    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;kiku&quot;</span>&gt;</span>kiku<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="xml">                    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;kiki&quot;</span>&gt;</span>kiki<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="xml">                    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;add&quot;</span>&gt;</span>add<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="xml">                    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Amy&quot;</span>&gt;</span>Amy<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="xml">                <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></span><br><span class="xml">                <span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span></span><br><span class="xml">                &#123;/* 复选框 */&#125;</span><br><span class="xml">                <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">checked</span>=<span class="hljs-string">&#123;this.state.isCheck&#125;</span> <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;this.handleCheck&#125;/</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>        )<br>    &#125;<br><br>&#125;<br><span class="hljs-comment">//渲染react 元素</span><br>ReactDOM.render(<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Hello</span>/&gt;</span></span>, <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;root&#x27;</span>))<br></code></pre></td></tr></table></figure><h3 id="受控组件代码优化"><a href="#受控组件代码优化" class="headerlink" title="受控组件代码优化"></a>受控组件代码优化</h3></li><li>给表单元素添加name属性，名字与state相同</li><li>根据表单元素类型获取对应的值</li><li>代码示例：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//导入react</span><br><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> ReactDOM <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-dom&#x27;</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 受控组件：其值受到react控制的表单元素</span><br><span class="hljs-comment"> * 操作文本框的值</span><br><span class="hljs-comment"> * **/</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Hello</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-built_in">super</span>()<br>        <span class="hljs-built_in">this</span>.state = &#123;<br>            <span class="hljs-attr">txt</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>            <span class="hljs-attr">content</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>            <span class="hljs-attr">city</span>:<span class="hljs-string">&#x27;kiku&#x27;</span>,<br>            <span class="hljs-attr">isCheck</span>:<span class="hljs-literal">false</span><br>        &#125;<br>    &#125;<br>    handleForm = <span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> &#123;<br>        <span class="hljs-comment">//获取当前dom对象</span><br>        <span class="hljs-keyword">const</span>  target = e.target<br>        <span class="hljs-comment">// 根据类型获取值</span><br>        <span class="hljs-keyword">const</span> value =target.type === <span class="hljs-string">&#x27;checkbox&#x27;</span> ?target.checked:target.value<br>        <span class="hljs-keyword">const</span> name= target.name<br>        <span class="hljs-built_in">this</span>.setState(&#123;<br>            [name]:value<br>        &#125;)<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">return</span> (<br>            <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">                &#123;/*文本框*/&#125;</span><br><span class="xml">                <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&#x27;txt&#x27;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;this.state.txt&#125;</span> <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;this.handleForm&#125;/</span>&gt;</span></span><br><span class="xml">                <span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span></span><br><span class="xml">                &#123;/* 富文本框 */&#125;</span><br><span class="xml">                <span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;content&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;this.state.content&#125;</span> <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;this.handleForm&#125;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span></span><br><span class="xml">                <span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span></span><br><span class="xml">                &#123;/* 下拉框 */&#125;</span><br><span class="xml">                <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;city&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;this.state.city&#125;</span> <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;this.handleForm&#125;</span>&gt;</span></span><br><span class="xml">                    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;kiku&quot;</span>&gt;</span>kiku<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="xml">                    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;kiki&quot;</span>&gt;</span>kiki<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="xml">                    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;add&quot;</span>&gt;</span>add<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="xml">                    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Amy&quot;</span>&gt;</span>Amy<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span><br><span class="xml">                <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span></span><br><span class="xml">                <span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span></span><br><span class="xml">                &#123;/* 复选框 */&#125;</span><br><span class="xml">                <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;isCheck&quot;</span> <span class="hljs-attr">checked</span>=<span class="hljs-string">&#123;this.state.isCheck&#125;</span> <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;this.handleForm&#125;/</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>        )<br>    &#125;<br><br>&#125;<br><span class="hljs-comment">//渲染react 元素</span><br>ReactDOM.render(<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Hello</span>/&gt;</span></span>, <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;root&#x27;</span>))<br></code></pre></td></tr></table></figure></li></ul><h3 id="非受控组件"><a href="#非受控组件" class="headerlink" title="非受控组件"></a>非受控组件</h3><ul><li>代码示例如下：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//导入react</span><br><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> ReactDOM <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-dom&#x27;</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 非受控组件：</span><br><span class="hljs-comment"> * **/</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Hello</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-built_in">super</span>()<br>        <span class="hljs-built_in">this</span>.texRef =React.createRef()<br>    &#125;<br>    getText = <span class="hljs-function">()=&gt;</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;获取的值是：&#x27;</span>,<span class="hljs-built_in">this</span>.texRef.current.value)<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">return</span> (<br>            <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">                <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#123;this.texRef&#125;/</span>&gt;</span></span><br><span class="xml">                <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.getText&#125;</span> &gt;</span>获取input值<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>        )<br>    &#125;<br>&#125;<br><span class="hljs-comment">//渲染react 元素</span><br>ReactDOM.render(<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Hello</span>/&gt;</span></span>, <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;root&#x27;</span>))<br></code></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> REACT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> REACT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react 基础学习（一）</title>
      <link href="/2022/09/02/react-%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2022/09/02/react-%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li>今天开始学习一下react了，之前项目大多数都是vue，react项目简直少的可怜_^_,加油了</li><li>今天学习的内容可以看目录哦！<h2 id="JSX的列表渲染"><a href="#JSX的列表渲染" class="headerlink" title="JSX的列表渲染"></a>JSX的列表渲染</h2></li><li> 如果要渲染一组数据，应用使用数组的 <strong>map()</strong> 方法</li><li> 渲染列表时<strong>要添加 key属性</strong> ，<strong>key属性的值要保持唯一</strong></li><li> 原则：map遍历谁，就给谁添加 key属性</li><li> <strong>注意：尽量避免使用索引号作为key</strong></li><li> 代码示例如下：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//导入react</span><br><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> ReactDOM <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-dom&#x27;</span><br><span class="hljs-keyword">const</span> user = [<br>    &#123;<br>        <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>,<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;鞠婧祎&#x27;</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">id</span>: <span class="hljs-number">2</span>,<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;林思意&#x27;</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">id</span>: <span class="hljs-number">3</span>,<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;冯薪朵&#x27;</span><br>    &#125;,<br>]<br><span class="hljs-keyword">const</span> list =(<br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="xml">        &#123;user.map(item=&gt;<span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;item.id&#125;</span>&gt;</span>&#123;item.name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>)&#125;</span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br>)<br><span class="hljs-comment">//渲染react 元素</span><br>ReactDOM.render(list,<span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;root&#x27;</span>))<br></code></pre></td></tr></table></figure><h2 id="JSX-的样式处理"><a href="#JSX-的样式处理" class="headerlink" title="JSX 的样式处理"></a>JSX 的样式处理</h2><h3 id="行内样式-style"><a href="#行内样式-style" class="headerlink" title="行内样式 style"></a>行内样式 style</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;h1 style=&#123;&#123;<span class="hljs-attr">color</span>:<span class="hljs-string">&#x27;red&#x27;</span>,<span class="hljs-attr">backgroundColor</span>:<span class="hljs-string">&#x27;skyblue&#x27;</span>&#125;&#125;&gt;jsx的样式处理&lt;/h1&gt;<br></code></pre></td></tr></table></figure><h3 id="类名-className-推荐"><a href="#类名-className-推荐" class="headerlink" title="类名 className (推荐)"></a>类名 className (推荐)</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;h1 className=<span class="hljs-string">&quot;title&quot;</span>&gt;jsx的样式处理&lt;/h1&gt;<br></code></pre></td></tr></table></figure><h2 id="React-创建组件的方式"><a href="#React-创建组件的方式" class="headerlink" title="React 创建组件的方式"></a>React 创建组件的方式</h2><h3 id="函数创建组件"><a href="#函数创建组件" class="headerlink" title="函数创建组件"></a>函数创建组件</h3></li><li>函数名称必须以<strong>大写字母开头</strong></li><li>函数组件<strong>必须有返回值</strong>，表示该组件的结构 React 据此区分组件和普通的React 元素</li><li>如果返回值为null,表示不渲染任何内容</li><li>使用函数名作为组件名</li><li>示例代码如下：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//导入react</span><br><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> ReactDOM <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-dom&#x27;</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 函数组件</span><br><span class="hljs-comment"> * **/</span><br><span class="hljs-comment">//普通函数</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Hello</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> (<br>        <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>这是一个函数组件<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    )<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">//箭头函数</span><br><span class="hljs-comment">const Hello =()=&gt;&#123;</span><br><span class="hljs-comment">    return (</span><br><span class="hljs-comment">        &lt;div&gt;这是一个箭头函数组件&lt;/div&gt;</span><br><span class="hljs-comment">    )</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">*/</span><br><span class="hljs-comment">//渲染react 元素</span><br>ReactDOM.render(<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Hello</span>/&gt;</span></span>,<span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;root&#x27;</span>))<br></code></pre></td></tr></table></figure><h3 id="使用类创建组件（使用es6-的class-创建的组件）"><a href="#使用类创建组件（使用es6-的class-创建的组件）" class="headerlink" title="使用类创建组件（使用es6 的class 创建的组件）"></a>使用类创建组件（使用es6 的class 创建的组件）</h3></li><li>类名称<strong>必须以大写字母开头</strong></li><li>类组件<strong>应该继承React.Component 父类</strong>，从而可以使用父类中提供的方法和属性</li><li>类组件<strong>必须提供render() 方法</strong></li><li>render() 方法必须有返回值，表示该组件的结构</li><li>代码示例如下：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//导入react</span><br><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> ReactDOM <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-dom&#x27;</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 类组件</span><br><span class="hljs-comment"> * **/</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Hello</span>  <span class="hljs-keyword">extends</span>  <span class="hljs-title">React</span>.<span class="hljs-title">Component</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">return</span>(<br>            <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>这是我的第一个类组件<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>        )<br>    &#125;<br>&#125;<br><span class="hljs-comment">//渲染react 元素</span><br>ReactDOM.render(<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Hello</span>/&gt;</span></span>,<span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;root&#x27;</span>))<br></code></pre></td></tr></table></figure><h3 id="抽离成独立的JS文件"><a href="#抽离成独立的JS文件" class="headerlink" title="抽离成独立的JS文件"></a>抽离成独立的JS文件</h3></li><li>组件作为一个独立的个体，一般都会放到一个单独的js文件中</li><li>第一步：创建Hello.js文件，创建组件,代码示例如下：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//导入react</span><br><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-comment">//创建组件</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Hello</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">return</span>(<br>            <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>这是我的第一个抽离的js文件的组件<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>        )<br>    &#125;<br><br>&#125;<br><span class="hljs-comment">//导出组件</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span>  Hello<br></code></pre></td></tr></table></figure></li><li>在index.js文件中导入渲染组件。代码示例如下：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//导入react</span><br><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> ReactDOM <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-dom&#x27;</span><br><span class="hljs-comment">//导入Hello组件</span><br><span class="hljs-keyword">import</span> Hello <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./Hello&quot;</span>;<br><span class="hljs-comment">//渲染react 元素</span><br>ReactDOM.render(<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Hello</span>/&gt;</span></span>,<span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;root&#x27;</span>))<br></code></pre></td></tr></table></figure><h2 id="React-事件处理"><a href="#React-事件处理" class="headerlink" title="React 事件处理"></a>React 事件处理</h2><h3 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h3></li><li>React 事件采用驼峰命名法， 例如onFocus<h4 id="类组件中事件处理"><a href="#类组件中事件处理" class="headerlink" title="类组件中事件处理"></a>类组件中事件处理</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//导入react</span><br><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> ReactDOM <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-dom&#x27;</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">App</span>  <span class="hljs-keyword">extends</span>  <span class="hljs-title">React</span>.<span class="hljs-title">Component</span></span>&#123;<br>    <span class="hljs-comment">//事件处理程序</span><br>    <span class="hljs-function"><span class="hljs-title">handleClick</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;我被点击了&#x27;</span>)<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">return</span>(<br>            <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.handleClick&#125;</span>&gt;</span>点击一下<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>        )<br>    &#125;<br>&#125;<br><span class="hljs-comment">//渲染react 元素</span><br>ReactDOM.render(<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">App</span>/&gt;</span></span>,<span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;root&#x27;</span>))<br></code></pre></td></tr></table></figure><h4 id="函数组件中事件处理"><a href="#函数组件中事件处理" class="headerlink" title="函数组件中事件处理"></a>函数组件中事件处理</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//导入react</span><br><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> ReactDOM <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-dom&#x27;</span><br><span class="hljs-comment">//通过函数组件绑定事件</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">App</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-comment">/*事件处理程序*/</span><br>    <span class="hljs-function"><span class="hljs-keyword">function</span>  <span class="hljs-title">handleClick</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;事件处理函数我被点击了 &#x27;</span>)<br>    &#125;<br>    <span class="hljs-keyword">return</span> (<br>        <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;handleClick&#125;</span>&gt;</span>点击一下<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>    )<br>&#125;<br><span class="hljs-comment">//渲染react 元素</span><br>ReactDOM.render(<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">App</span>/&gt;</span></span>,<span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;root&#x27;</span>))<br></code></pre></td></tr></table></figure><h3 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h3></li><li>通过事件处理程序的参数获取事件对象</li><li>React中的事件对象叫做合成事件（对象）</li><li>合成事件：兼容所有浏览器，无需担心浏览器兼容性问题</li><li>代码示例如下：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//导入react</span><br><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> ReactDOM <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-dom&#x27;</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">App</span>  <span class="hljs-keyword">extends</span>  <span class="hljs-title">React</span>.<span class="hljs-title">Component</span></span>&#123;<br>    <span class="hljs-comment">//事件处理程序</span><br>    <span class="hljs-function"><span class="hljs-title">handleClick</span>(<span class="hljs-params">e</span>)</span>&#123;<br>        <span class="hljs-comment">//阻止浏览器的默认行为</span><br>        e.preventDefault()<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;我被点击了&#x27;</span>)<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">return</span>(<br>            <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&#x27;https://blog.csdn.net/xxz_best&#x27;</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.handleClick&#125;</span>&gt;</span>霖霏晗的博客<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br>        )<br>    &#125;<br><br>&#125;<br><span class="hljs-comment">//渲染react 元素</span><br>ReactDOM.render(<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">App</span>/&gt;</span></span>,<span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;root&#x27;</span>))<br></code></pre></td></tr></table></figure><h3 id="有状态组件和无状态组件"><a href="#有状态组件和无状态组件" class="headerlink" title="有状态组件和无状态组件"></a>有状态组件和无状态组件</h3></li><li>函数组件又称<strong>无状态组件</strong></li><li>类组件又称<strong>有状态组件</strong></li><li>状态 (state)即数据</li><li>函数组件没有自己的状态，只负责数据展示（静）</li><li>类组件有自己的 <strong>状态负责更新UI</strong> ,让页面’动’起来<h3 id="组件中的state-和-setState"><a href="#组件中的state-和-setState" class="headerlink" title="组件中的state  和 setState"></a>组件中的state  和 setState</h3><h4 id="state-的使用"><a href="#state-的使用" class="headerlink" title="state 的使用"></a>state 的使用</h4></li><li>状态（state）即数据，是组件内的私有数据，只能在组件内部使用</li><li>state 的值是一个对象，表示一个组件中可以有多个数据</li><li>通过this.state获取状态<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//导入react</span><br><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> ReactDOM <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-dom&#x27;</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * state 的基本用法</span><br><span class="hljs-comment"> * **/</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Hello</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span></span>&#123;<br>    <span class="hljs-comment">/*constructor() &#123;</span><br><span class="hljs-comment">        super()</span><br><span class="hljs-comment">        //初始化state</span><br><span class="hljs-comment">        this.state =&#123;</span><br><span class="hljs-comment">            count:0,</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">    &#125;*/</span><br>    <span class="hljs-comment">//简洁写法</span><br>    state = &#123;<br>        <span class="hljs-attr">count</span>:<span class="hljs-number">10</span>,<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">return</span>(<br>        <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>有状态组件 &#123;this.state.count&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>        )<br>    &#125;<br><br>&#125;<br><span class="hljs-comment">//渲染react 元素</span><br>ReactDOM.render(<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Hello</span>/&gt;</span></span>,<span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;root&#x27;</span>))<br></code></pre></td></tr></table></figure><h4 id="setState-修改状态"><a href="#setState-修改状态" class="headerlink" title="setState() 修改状态"></a>setState() 修改状态</h4></li><li>状态是可变的</li><li>语法: this.setState({要修改的数据})</li><li>注意： <strong>不要直接修改state中的值，这是错误的！！！</strong></li><li>setState()作用 1修改state 2更新UI</li><li>思想： 数据驱动视图</li><li>代码示例如下：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//导入react</span><br><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> ReactDOM <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-dom&#x27;</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * state 的基本用法</span><br><span class="hljs-comment"> * **/</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Hello</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>&#123;<br>    <span class="hljs-comment">/*constructor() &#123;</span><br><span class="hljs-comment">        super()</span><br><span class="hljs-comment">        //初始化state</span><br><span class="hljs-comment">        this.state =&#123;</span><br><span class="hljs-comment">            count:0,</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">    &#125;*/</span><br>    <span class="hljs-comment">//简洁写法</span><br>    state = &#123;<br>        <span class="hljs-attr">count</span>: <span class="hljs-number">10</span>,<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">return</span> (<br>            <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">                <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>有状态组件 &#123;this.state.count&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="xml">                <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="xml">                    this.setState(&#123;</span><br><span class="xml">                        count: this.state.count + 1</span><br><span class="xml">                    &#125;)</span><br><span class="xml">                &#125;&#125;&gt;+1</span><br><span class="xml">                <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>        )<br>    &#125;<br><br>&#125;<br><span class="hljs-comment">//渲染react 元素</span><br>ReactDOM.render(<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Hello</span>/&gt;</span></span>, <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;root&#x27;</span>))<br></code></pre></td></tr></table></figure><h4 id="从jsx中抽离事件处理程序"><a href="#从jsx中抽离事件处理程序" class="headerlink" title="从jsx中抽离事件处理程序"></a>从jsx中抽离事件处理程序</h4></li><li>jsx中掺杂过多js逻辑代码，会显得非常混乱</li><li>推荐：将逻辑抽离到单独的方法中，保证jsx的结构清晰</li><li><img src="https://linmuhan.gitee.io/images/react_event.png" alt="react事件绑定"><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//导入react</span><br><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> ReactDOM <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-dom&#x27;</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * state 的基本用法</span><br><span class="hljs-comment"> * **/</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Hello</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-built_in">super</span>()<br>        <span class="hljs-built_in">this</span>.state = &#123;<br>            <span class="hljs-attr">count01</span>: <span class="hljs-number">10</span>,<br>            <span class="hljs-attr">count02</span>: <span class="hljs-number">1</span>,<br>            <span class="hljs-attr">count03</span>: <span class="hljs-number">3</span>,<br>        &#125;<br>        <span class="hljs-built_in">this</span>.onINcreatnumthree = <span class="hljs-built_in">this</span>.onINcreatnumthree.bind(<span class="hljs-built_in">this</span>)<br>    &#125;<br>    <span class="hljs-comment">//事件处理程序</span><br>    onINcreatnumOne ()&#123;<br>        <span class="hljs-built_in">this</span>.setState(&#123;<br>            <span class="hljs-attr">count02</span>: <span class="hljs-built_in">this</span>.state.count02 + <span class="hljs-number">1</span><br>        &#125;)<br>    &#125;<br>    onINcreatnum =<span class="hljs-function">()=&gt;</span>&#123;<br>        <span class="hljs-built_in">this</span>.setState(&#123;<br>            <span class="hljs-attr">count01</span>: <span class="hljs-built_in">this</span>.state.count01 + <span class="hljs-number">1</span><br>        &#125;)<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-title">onINcreatnumthree</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">this</span>.setState(&#123;<br>            <span class="hljs-attr">count03</span>: <span class="hljs-built_in">this</span>.state.count03 + <span class="hljs-number">1</span><br>        &#125;)<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * //箭头函数的this指向外部环境，此处为render() 方法</span><br><span class="hljs-comment">         * &lt;button onClick=&#123;()=&gt;this.onINcreatnum()&#125;&gt;+1&lt;/button&gt;</span><br><span class="hljs-comment">         * */</span><br>        <span class="hljs-keyword">return</span> (<br>            <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">                <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>从10开始+1 :&#123;this.state.count01&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="xml">                <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.onINcreatnum&#125;</span>&gt;</span>从10开始+1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="xml">                <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>从1开始+1: &#123;this.state.count02&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="xml">                <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span>=&gt;</span>this.onINcreatnumOne()&#125;&gt;从1开始+1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="xml">                <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>从3开始+1 :&#123;this.state.count03&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="xml">                <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.onINcreatnumthree&#125;</span>&gt;</span>从3开始+1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>        )<br>    &#125;<br><br>&#125;<br><span class="hljs-comment">//渲染react 元素</span><br>ReactDOM.render(<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Hello</span>/&gt;</span></span>, <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;root&#x27;</span>))<br></code></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> REACT </category>
          
      </categories>
      
      
        <tags>
            
            <tag> REACT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开发模式</title>
      <link href="/2022/08/24/%E5%BC%80%E5%8F%91%E6%A8%A1%E5%BC%8F/"/>
      <url>/2022/08/24/%E5%BC%80%E5%8F%91%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li>本编博客介绍了web开发模式。身份认证，Cookie，express中session中间件用法，express中JWT用法<h2 id="web开发模式"><a href="#web开发模式" class="headerlink" title="web开发模式"></a>web开发模式</h2><h3 id="服务端渲染端web传统开发模式"><a href="#服务端渲染端web传统开发模式" class="headerlink" title="服务端渲染端web传统开发模式"></a>服务端渲染端web传统开发模式</h3></li><li>概念： 服务端渲染端概念，服务器发送给客户端的html页面，是在服务器通过字符串的拼接，动态生成的，因此客户端不需要使用ajax这样的技术额外请求页面数据</li><li>优点：前端耗时少，利于SE0</li><li>缺点：占用服务端资源，不利于前后端分离，开发效率低<h3 id="前后端分离端web开发模式"><a href="#前后端分离端web开发模式" class="headerlink" title="前后端分离端web开发模式"></a>前后端分离端web开发模式</h3><h4 id="前后端分离的优缺点"><a href="#前后端分离的优缺点" class="headerlink" title="前后端分离的优缺点"></a>前后端分离的优缺点</h4></li><li>优点：开发体验好，用户体验好，减轻了服务端的渲染压力</li><li>缺点： 不利于SE0 (利用 vue ,react 提供的SSR技术可以解决seo)<h2 id="什么是身份认证"><a href="#什么是身份认证" class="headerlink" title="什么是身份认证"></a>什么是身份认证</h2></li><li>身份认证又称身份验证，鉴权，是指通过一定的手段，完成对身份认证对确认<h3 id="不同开发模式下对身份认证"><a href="#不同开发模式下对身份认证" class="headerlink" title="不同开发模式下对身份认证"></a>不同开发模式下对身份认证</h3></li><li>服务端渲染推荐使用 session 认证机制</li><li>前后端分离推荐使用JWT认证机制<h2 id="HTTP-的无状态性"><a href="#HTTP-的无状态性" class="headerlink" title="HTTP 的无状态性"></a>HTTP 的无状态性</h2></li><li>http协议的无状态性，指的是客户端<strong>每次的http请求都是独立的</strong>，连续多个请求之间没有直接关系，服务端不会主动保留每次http请求的状态<h2 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h2></li><li>cookie 是存储在用户浏览器中一段不超过4kb的字符串 它由一个名称（name）一个值（value） 和 其他几个用于控制cookie 有效期，安全性，使用范围的可选属性组成</li><li>不同域名下的cookie各自独立，<h3 id="cookie的特点"><a href="#cookie的特点" class="headerlink" title="cookie的特点"></a>cookie的特点</h3></li><li>自动发送</li><li>域名独立</li><li>过期时限</li><li>4kb限制<h3 id="cookie在身份认证中的作用"><a href="#cookie在身份认证中的作用" class="headerlink" title="cookie在身份认证中的作用"></a>cookie在身份认证中的作用</h3></li><li>客户端第一次请求服务器的时候，服务器通过响应头的形式，向客户端发送了一个身份认证的cookie，客户端会自动将cookie保存在浏览器中</li><li>随后，当客户端浏览器每次请求服务器的时候，浏览器会自动将身份认证相关的cookie,听过请求头的形式，发送给服务器，服务器即可验明客户端的身份<h3 id="COOKIE不具备安全性"><a href="#COOKIE不具备安全性" class="headerlink" title="COOKIE不具备安全性"></a>COOKIE不具备安全性</h3></li><li>cookie 很容易被伪造<h2 id="session的认证机制"><a href="#session的认证机制" class="headerlink" title="session的认证机制"></a>session的认证机制</h2></li><li><img src="https://linmuhan.gitee.io/images/session.png" alt="avatar"><h2 id="在Express中使用session中间件"><a href="#在Express中使用session中间件" class="headerlink" title="在Express中使用session中间件"></a>在Express中使用session中间件</h2></li><li>安装 express-session 中间件</li><li>在express 项目中，只需要安装express-session 中间件，即可在项目中使用session认证</li><li>命令： npm install express-session<h3 id="配置express-session中间件"><a href="#配置express-session中间件" class="headerlink" title="配置express - session中间件"></a>配置express - session中间件</h3></li><li>express-session 中间件安装成功后，需要通过 app.use() 来注册 session中间件，实例代码如下：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//1.导入session 中间件</span><br><span class="hljs-keyword">const</span>  session = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express-session&#x27;</span>)<br><span class="hljs-comment">//2. 配置session中间件</span><br>app.use(session(&#123;<br>    <span class="hljs-attr">secret</span>:<span class="hljs-string">&#x27;itheima&#x27;</span>, <span class="hljs-comment">//secret的值可以为任意字符串</span><br>    <span class="hljs-attr">resave</span>: <span class="hljs-literal">false</span>, <span class="hljs-comment">//固定写法</span><br>    <span class="hljs-attr">saveUninitialized</span>:<span class="hljs-literal">true</span>, <span class="hljs-comment">//固定写法</span><br>&#125;))<br></code></pre></td></tr></table></figure><h3 id="向session存储数据"><a href="#向session存储数据" class="headerlink" title="向session存储数据"></a>向session存储数据</h3></li><li>当 express-session中间件配置成功过以后，即可通过req.session 来访问和使用session对象，从而存储用户的相关信息<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript">app.post(<span class="hljs-string">&#x27;/api/login&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(req.body, <span class="hljs-string">&#x27;req&#x27;</span>)<br>    <span class="hljs-comment">// 判断用户登录的信息是否正确</span><br>    <span class="hljs-keyword">if</span> (req.body.name !== <span class="hljs-string">&#x27;admin&#x27;</span> || req.body.pwd !== <span class="hljs-string">&#x27;0000&#x27;</span>) &#123;<br>        res.send(&#123;<br>            <span class="hljs-attr">status</span>: <span class="hljs-number">1</span>,<br>            <span class="hljs-attr">msg</span>: <span class="hljs-string">&#x27;登录失败&#x27;</span><br>        &#125;)<br>    &#125;<br>    <span class="hljs-comment">// 请将登录成功后的用户信息，保存在 session中</span><br>    <span class="hljs-comment">// 注意: 只有成功配置了express-session这个中间件以后，才能通过req点出来session这个属性</span><br>    req.session.user =req.body <span class="hljs-comment">//存储用户信息</span><br>    req.session.islogin  = <span class="hljs-literal">true</span> <span class="hljs-comment">//存储用户登录状态</span><br>    res.send(&#123;<br>        <span class="hljs-attr">status</span>:<span class="hljs-number">0</span>,<br>        <span class="hljs-attr">msg</span>:<span class="hljs-string">&#x27;登录成功&#x27;</span><br>    &#125;)<br><br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="从session中取数据"><a href="#从session中取数据" class="headerlink" title="从session中取数据"></a>从session中取数据</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript">app.get(<span class="hljs-string">&#x27;/api/getuser&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">req,res</span>)=&gt;</span>&#123;<br><span class="hljs-comment">//    请从session中获取用户信息，返给客户端</span><br><span class="hljs-comment">//    获取用户信息之前判断用户是否登录</span><br>    <span class="hljs-keyword">if</span>(!req.session.islogin)&#123;<br>        <span class="hljs-keyword">return</span> res.send(&#123;<br>            <span class="hljs-attr">status</span>:<span class="hljs-number">1</span>,<br>            <span class="hljs-attr">msg</span>:<span class="hljs-string">&#x27;请先登录&#x27;</span><br>        &#125;)<br>    &#125;<br>    res.send(&#123;<br>        <span class="hljs-attr">status</span>:<span class="hljs-number">0</span>,<br>        <span class="hljs-attr">msg</span>:<span class="hljs-string">&#x27;suc&#x27;</span>,<br>        <span class="hljs-attr">name</span>:req.session.user.name,<span class="hljs-comment">//获取用户登录信息的name</span><br>    &#125;)<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="清空session"><a href="#清空session" class="headerlink" title="清空session"></a>清空session</h3></li><li>调用req.session.destory() 函数，可以清空服务器保存的session信息<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//退出登录接口</span><br>app.post(<span class="hljs-string">&#x27;/api/loginout&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// 清空当前用户客户端对应的session信息</span><br>    req.session.destroy()<br>    res.send(&#123;<br>        <span class="hljs-attr">status</span>:<span class="hljs-number">0</span>,<br>        <span class="hljs-attr">msg</span>:<span class="hljs-string">&#x27;退出登录成功&#x27;</span><br>    &#125;)<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="session局限性"><a href="#session局限性" class="headerlink" title="session局限性"></a>session局限性</h3></li><li>session认证机制需要配合cookie才能实现，由于cookie不支持跨域访问，所以，当涉及到前端跨域请求后端接口的时候，<strong>需要做很多的额外配置</strong>，才能实现跨域session认证</li><li>注意： 当<strong>前端请求后端接口不存在跨域问题</strong>的时候 推荐使用<strong>session</strong>身份认证机制</li><li>当前端需要跨域请求后端接口的时候不推荐使用session身份认证机制，推荐使用JWT认证机制<h2 id="session存储，获取，清空数据（代码实例如下）"><a href="#session存储，获取，清空数据（代码实例如下）" class="headerlink" title="session存储，获取，清空数据（代码实例如下）"></a>session存储，获取，清空数据（代码实例如下）</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//导入express模块</span><br><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>)<br><span class="hljs-comment">//创建express模块实例</span><br><span class="hljs-keyword">const</span> app = express()<br><span class="hljs-comment">//1.导入session 中间件</span><br><span class="hljs-keyword">const</span> session = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express-session&#x27;</span>)<br><span class="hljs-comment">//2. 配置session中间件</span><br>app.use(session(&#123;<br>    <span class="hljs-attr">secret</span>: <span class="hljs-string">&#x27;itheima&#x27;</span>, <span class="hljs-comment">//secret的值可以为任意字符串</span><br>    <span class="hljs-attr">resave</span>: <span class="hljs-literal">false</span>, <span class="hljs-comment">//固定写法</span><br>    <span class="hljs-attr">saveUninitialized</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">//固定写法</span><br>&#125;))<br><span class="hljs-comment">//配置表单数据中间件</span><br>app.use(express.urlencoded(&#123;<span class="hljs-attr">extended</span>: <span class="hljs-literal">false</span>&#125;))<br><span class="hljs-comment">//登录接口</span><br>app.post(<span class="hljs-string">&#x27;/api/login&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(req.body, <span class="hljs-string">&#x27;req&#x27;</span>)<br>    <span class="hljs-comment">// 判断用户登录的信息是否正确</span><br>    <span class="hljs-keyword">if</span> (req.body.name !== <span class="hljs-string">&#x27;admin&#x27;</span> || req.body.pwd !== <span class="hljs-string">&#x27;0000&#x27;</span>) &#123;<br>        res.send(&#123;<br>            <span class="hljs-attr">status</span>: <span class="hljs-number">1</span>,<br>            <span class="hljs-attr">msg</span>: <span class="hljs-string">&#x27;登录失败&#x27;</span><br>        &#125;)<br>    &#125;<br>    <span class="hljs-comment">// 请将登录成功后的用户信息，保存在 session中</span><br><span class="hljs-comment">// 注意: 只有成功配置了express-session这个中间件以后，才能通过req点出来session这个属性</span><br>    req.session.user = req.body <span class="hljs-comment">//存储用户信息</span><br>    req.session.islogin = <span class="hljs-literal">true</span> <span class="hljs-comment">//存储用户登录状态</span><br>    res.send(&#123;<br>        <span class="hljs-attr">status</span>: <span class="hljs-number">0</span>,<br>        <span class="hljs-attr">msg</span>: <span class="hljs-string">&#x27;登录成功&#x27;</span><br>    &#125;)<br><br>&#125;)<br><span class="hljs-comment">//获取用户信息接口</span><br>app.get(<span class="hljs-string">&#x27;/api/getuser&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br><span class="hljs-comment">//    请从session中获取用户信息，返给客户端</span><br><span class="hljs-comment">//    获取用户信息之前判断用户是否登录</span><br>    <span class="hljs-keyword">if</span> (!req.session.islogin) &#123;<br>        <span class="hljs-keyword">return</span> res.send(&#123;<br>            <span class="hljs-attr">status</span>: <span class="hljs-number">1</span>,<br>            <span class="hljs-attr">msg</span>: <span class="hljs-string">&#x27;请先登录&#x27;</span><br>        &#125;)<br>    &#125;<br>    res.send(&#123;<br>        <span class="hljs-attr">status</span>: <span class="hljs-number">0</span>,<br>        <span class="hljs-attr">msg</span>: <span class="hljs-string">&#x27;suc&#x27;</span>,<br>        <span class="hljs-attr">name</span>: req.session.user.name,<span class="hljs-comment">//获取用户登录信息的name</span><br>    &#125;)<br>&#125;)<br><span class="hljs-comment">//退出登录接口</span><br>app.post(<span class="hljs-string">&#x27;/api/loginout&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// 清空当前用户客户端对应的session信息</span><br>    req.session.destroy()<br>    res.send(&#123;<br>        <span class="hljs-attr">status</span>:<span class="hljs-number">0</span>,<br>        <span class="hljs-attr">msg</span>:<span class="hljs-string">&#x27;退出登录成功&#x27;</span><br>    &#125;)<br>&#125;)<br>app.listen(<span class="hljs-number">8088</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;express server running at http://127.0.0.1:8088&#x27;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="JWT认证机制"><a href="#JWT认证机制" class="headerlink" title="JWT认证机制"></a>JWT认证机制</h2></li><li>JWT（英文全称 JSON Web Token） 是目前最流行的跨域认证解决方案<h3 id="JWT工作原理"><a href="#JWT工作原理" class="headerlink" title="JWT工作原理"></a>JWT工作原理</h3></li><li>用户的信息通过token字符串的形式，保存在客户端浏览器中，服务端通过还原token字符串的形式来认证用户的身份</li><li><img src="https://linmuhan.gitee.io/images/token.png" alt="avatar"></li><li>JWT通常由三部分组成，分别是 Header(头部)，Payload(有效荷载), Signature(签名)</li><li>三者之间使用英文的 .  分割，格式如下</li><li>Header.Payload.Signature<h3 id="JWT三个部分的含义"><a href="#JWT三个部分的含义" class="headerlink" title="JWT三个部分的含义"></a>JWT三个部分的含义</h3></li><li>Payload 部分才是真正的用户信息,他是用户信息通过加密之后生成的字符串</li><li>Header 和 Signature 是安全性相关的部分，只是为了保护token的安全性<h3 id="JWT的使用方式"><a href="#JWT的使用方式" class="headerlink" title="JWT的使用方式"></a>JWT的使用方式</h3></li><li>客户端收到服务端返回的JWT之后，通常会把他存储在localStorage 和sessionStorage 中</li><li>此后，客户端每次与服务端通讯，都要带上这个JWT字符串，从而进行身份验证，</li><li>推荐的做法是<strong>把JWT放在http请求头的 Authorization</strong>中</li><li>格式：Authorization: Bearer <token><h2 id="在-express中使用-JWT"><a href="#在-express中使用-JWT" class="headerlink" title="在 express中使用 JWT"></a>在 express中使用 JWT</h2><h3 id="安装包"><a href="#安装包" class="headerlink" title="安装包"></a>安装包</h3></li><li>npm install jsonwebtoken express-jwt</li><li>其中 jsonwebtoken 用于生成JWT字符串，express-jwt用户将JWT字符串解析还原成 JSON 对象<h3 id="导入JWT相关的包"><a href="#导入JWT相关的包" class="headerlink" title="导入JWT相关的包"></a>导入JWT相关的包</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//导入用于生成JWT字符串的包</span><br><span class="hljs-keyword">const</span> jwt = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;jsonwebtoken&#x27;</span>)<br><span class="hljs-comment">//导入用于将客户端发送过来的JWT字符串解析还原成JSON 对象的包</span><br><span class="hljs-keyword">const</span> expressJWT = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express-jwt&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="在jwt中定义-secret-密钥"><a href="#在jwt中定义-secret-密钥" class="headerlink" title="在jwt中定义 secret 密钥"></a>在jwt中定义 secret 密钥</h3></li><li>为了 <strong>保证JWT 字符串的安全性</strong>，防止JWT字符串在网路传输过程中被别人破解，我们需要 专门 定义一个用于加密和解密的secret 密钥</li><li>当生成JWT字符串的时候，需要使用secret密钥对用户信息<strong>进行加密</strong>，最终得到加密好的JWT字符串</li><li>当把JWT字符串解析还原成json对象的时候，我们需要secret密钥进行解密<h3 id="登录成功以后生成JWT字符串"><a href="#登录成功以后生成JWT字符串" class="headerlink" title="登录成功以后生成JWT字符串"></a>登录成功以后生成JWT字符串</h3></li><li>调用jsonwebtoken包提供sign()方法，将用户信息加密成JWT字符串，返给客户端<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 导入express模块</span><br><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>)<br><br><span class="hljs-comment">// 创建express的服务器实例</span><br><span class="hljs-keyword">const</span> app = express()<br><span class="hljs-comment">//配置解析表单数据中间件</span><br>app.use(express.urlencoded(&#123;<span class="hljs-attr">extended</span>:<span class="hljs-literal">false</span>&#125;))<br><br><span class="hljs-comment">//导入jwt相关的包</span><br><span class="hljs-keyword">const</span> jwt = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;jsonwebtoken&#x27;</span>)<br><span class="hljs-keyword">const</span> expressJWT = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express-jwt&#x27;</span>)<br><br><span class="hljs-comment">//允许跨域资源共享</span><br><span class="hljs-keyword">const</span> cors = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;cors&#x27;</span>)<br>app.use(cors())<br><span class="hljs-comment">//定义 secret密钥，建议将密钥命令为secretKey</span><br><span class="hljs-keyword">const</span> secretKey = <span class="hljs-string">&#x27;lh70420kiku0618&#x27;</span><br>app.post(<span class="hljs-string">&#x27;/api/login&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">//将req.body请求体中 的数据转存为userinfo常量</span><br>    <span class="hljs-keyword">const</span> userinfo = req.body<br>    <span class="hljs-keyword">if</span> (userinfo.name !== <span class="hljs-string">&#x27;admin&#x27;</span> || userinfo.pwd !== <span class="hljs-string">&#x27;0000&#x27;</span>) &#123;<br>        res.send(&#123;<br>            <span class="hljs-attr">status</span>: <span class="hljs-number">1</span>,<br>            <span class="hljs-attr">msg</span>: <span class="hljs-string">&#x27;登录失败&#x27;</span><br>        &#125;)<br>    &#125;<br><span class="hljs-comment">//    登录成功调用jwt.sign()方法生成JWT字符串，并通过token属性发送给客户端</span><br><span class="hljs-comment">//     参数1：用户的信息对象，参数2：加密的密钥，参数3：配置对象，可配置当前token有效期 例如30秒有效期&#123;expiresIn:&#x27;30s&#x27;&#125;</span><br>    <span class="hljs-keyword">const</span> tokenStr= jwt.sign(&#123;<span class="hljs-attr">username</span>: userinfo.name&#125;,secretKey,&#123;<span class="hljs-attr">expiresIn</span>:<span class="hljs-string">&#x27;30s&#x27;</span>&#125;)<br>    res.send(&#123;<br>        <span class="hljs-attr">code</span>: <span class="hljs-number">200</span>,<br>        <span class="hljs-attr">msg</span>: <span class="hljs-string">&#x27;登录成功&#x27;</span>,<br>        <span class="hljs-attr">token</span>:tokenStr <span class="hljs-comment">//用户信息加密以后返给客户端</span><br>    &#125;)<br>&#125;)<br><span class="hljs-comment">//启动服务器</span><br>app.listen(<span class="hljs-number">8088</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;express server running at http://127.0.0.1:8088&#x27;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="将JWT字符串还原成json对象"><a href="#将JWT字符串还原成json对象" class="headerlink" title="将JWT字符串还原成json对象"></a>将JWT字符串还原成json对象</h3><h3 id="使用req-user-获取用户信息"><a href="#使用req-user-获取用户信息" class="headerlink" title="使用req.user 获取用户信息"></a>使用req.user 获取用户信息</h3></li><li>当express-jwt 这个中间件配置成功以后，即可在哪些有权限的接口中，使用req.user对象，来访问从JWT字符串中解析的用户信息了</li><li></li></ul>]]></content>
      
      
      <categories>
          
          <category> Node.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库</title>
      <link href="/2022/08/21/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
      <url>/2022/08/21/%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>本篇博客详细介绍了数据库的使用！！！</p><h1 id="数据库的基本概念"><a href="#数据库的基本概念" class="headerlink" title="数据库的基本概念"></a>数据库的基本概念</h1><h2 id="什么是数据库？"><a href="#什么是数据库？" class="headerlink" title="什么是数据库？"></a>什么是数据库？</h2><ul><li>数据库（database）是用来<strong>组织</strong>，<strong>存储</strong>和<strong>管理数据的仓库</strong><h2 id="常见的数据库及分类"><a href="#常见的数据库及分类" class="headerlink" title="常见的数据库及分类"></a>常见的数据库及分类</h2><h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3></li><li>MySql 数据库(开源免费) Community+Enterprise</li><li>Oracle 数据库 (收费)</li><li>SQL Server 数据库（收费）</li><li>Mongodb 数据库 Community+Enterprise<h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3></li><li>传统型数据库(关系型数据库或者SQL数据库)：MySql，Oracle，SQL Server</li><li>新型数据库(非关系型数据库或者NOSQL数据库)：Mongodb<h3 id="数据组织结构（库，表，行，字段之间的关系）"><a href="#数据组织结构（库，表，行，字段之间的关系）" class="headerlink" title="数据组织结构（库，表，行，字段之间的关系）"></a>数据组织结构（库，表，行，字段之间的关系）</h3></li><li>实际项目开发是，每个项目对应一个<strong>独立的数据库</strong></li><li>不同的数据存在不同的表中</li><li>每个表中存储哪些信息是有字段决定的</li><li>表中的行，代表每一条具体的数据<h3 id="SQL-的-select-语句-（查询）"><a href="#SQL-的-select-语句-（查询）" class="headerlink" title="SQL 的 select 语句 （查询）"></a>SQL 的 select 语句 （查询）</h3></li><li>SELECT * FROM 表名称 [ 从from指定的表中查询所有的数据 ]</li><li>SELECT 列名称 FROM 表名称 [ 从from指定的表中查询指定列名称（字段）的数据]</li><li>SELECT 列名称1, 列名称2 FROM 表名称 [多个列名称之间用逗号分隔开]<h3 id="SQL-的-insert-into-语句-（向数据表中插入新的数据）"><a href="#SQL-的-insert-into-语句-（向数据表中插入新的数据）" class="headerlink" title="SQL 的 insert into 语句 （向数据表中插入新的数据）"></a>SQL 的 insert into 语句 （向数据表中插入新的数据）</h3></li><li>insert into 表名称 (列名称1，列名称2) values (值1，值2)    [注意: 列和值一一对应]<h3 id="SQL-的-update-语法-（更新）"><a href="#SQL-的-update-语法-（更新）" class="headerlink" title="SQL 的 update 语法 （更新）"></a>SQL 的 update 语法 （更新）</h3></li><li>update 表名 set 列名 = 新值 where 筛选条件  [更新表中某一行的某一列]</li><li>update 表名 set 列名1 = 新值1,列名2 = 新值2 where 筛选条件  [更新表中某一行的多列]<h3 id="SQL-的-delete-语句（删除）"><a href="#SQL-的-delete-语句（删除）" class="headerlink" title="SQL 的 delete 语句（删除）"></a>SQL 的 delete 语句（删除）</h3></li><li>delete from 表名  where 列名称 = 值<h3 id="SQL-的-where-子句"><a href="#SQL-的-where-子句" class="headerlink" title="SQL 的 where 子句"></a>SQL 的 where 子句</h3></li><li>where 子句用于限定选择的标准。 在select，update delete 语句中皆可使用</li><li>查询语句中的where 条件: <strong>select 列名称 from 表名 where 列名称  运算符 值</strong>  </li><li>更新语句中的where 条件: <strong>update 表名称 set 列名称= 新值  where 列名称  运算符 值</strong></li><li>删除语句中的where 条件: <strong>delete from 表名  where 列名称 运算符 值</strong></li><li>以上查询，更新，删除语句中的运算符 等号(=),不等于（&lt;&gt;,!=）, 大于（&gt;）,小于（&lt;）,大于等于（ &gt;= ）, 小于等于(&lt;=)<h3 id="SQL-的-and-和-or-运算符"><a href="#SQL-的-and-和-or-运算符" class="headerlink" title="SQL 的 and 和 or 运算符"></a>SQL 的 and 和 or 运算符</h3></li><li>select * from 表名 where 列名 = 值 and  列名2= 值2</li><li>select * from 表名 where 列名 = 值 or  列名2= 值2<h3 id="SQL-的-order-by-语句"><a href="#SQL-的-order-by-语句" class="headerlink" title="SQL 的 order by 语句"></a>SQL 的 order by 语句</h3></li><li>根据指定的列对结果进行排序</li><li>order by 语句默认按照升序对记录进行排序 </li><li>如果按照降序对记录进行排序，可以使用 desc 关键字，asc表示升序可以不写</li><li>例子如下：<br>select * from user order by status<br>select * from user order by id desc<h3 id="SQL-的-order-by-语句-多重排序"><a href="#SQL-的-order-by-语句-多重排序" class="headerlink" title="SQL 的 order by 语句 多重排序"></a>SQL 的 order by 语句 多重排序</h3></li><li>select * from user order by name desc, id asc<h3 id="SQL-的-count-函数"><a href="#SQL-的-count-函数" class="headerlink" title="SQL 的 count(*) 函数"></a>SQL 的 count(*) 函数</h3></li><li>count(*)函数用于返回查询接口总数据条数，</li><li>select count(*) from 表名</li><li>select count(*) from 表名 where 列名 = 值<h4 id="使用-as-为列设置别名（给查询出来对列名称设置别名）"><a href="#使用-as-为列设置别名（给查询出来对列名称设置别名）" class="headerlink" title="使用 as 为列设置别名（给查询出来对列名称设置别名）"></a>使用 as 为列设置别名（给查询出来对列名称设置别名）</h4></li><li>select count(*) as 新列名 from 表名 where 列名 = 值<h2 id="安装配置mysql-模块"><a href="#安装配置mysql-模块" class="headerlink" title="安装配置mysql 模块"></a>安装配置mysql 模块</h2></li><li>mysql 模块是托管与npm 的第三方模块，他提供了在node.js项目中连接和操作mysql数据库的能力</li><li>安装命令： npm install mysql<h3 id="配置mysql"><a href="#配置mysql" class="headerlink" title="配置mysql"></a>配置mysql</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * mysql配置</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">// 1. 导入mysql 模块</span><br><span class="hljs-keyword">const</span> mysql = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;mysql&#x27;</span>)<br><span class="hljs-comment">// 2. 建立与 mysql 数据库的连接关系</span><br>  <span class="hljs-keyword">const</span> db =mysql.createPool(&#123;<br>      <span class="hljs-attr">host</span>:<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>, <span class="hljs-comment">//数据库的IP地址</span><br>      <span class="hljs-attr">user</span>:<span class="hljs-string">&#x27;root&#x27;</span>, <span class="hljs-comment">//登录名</span><br>      <span class="hljs-attr">password</span>:<span class="hljs-string">&#x27;admin123&#x27;</span>, <span class="hljs-comment">//登录数据库的密码</span><br>      <span class="hljs-attr">database</span>:<span class="hljs-string">&#x27;my_db_01&#x27;</span>, <span class="hljs-comment">//指定要操作的数据库名称</span><br>  &#125;)<br></code></pre></td></tr></table></figure><h3 id="检测mysql模块是否能正常运行"><a href="#检测mysql模块是否能正常运行" class="headerlink" title="检测mysql模块是否能正常运行"></a>检测mysql模块是否能正常运行</h3></li><li>通过db.query() 函数 指定要执行的sql语句，通过回调函数拿到执行的结果<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//测试mysql 是否能正常</span><br>db.query(<span class="hljs-string">&#x27;select 1&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">err, results</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">//mysql模块运行期间报错</span><br>    <span class="hljs-keyword">if</span> (err) <span class="hljs-keyword">return</span> <span class="hljs-built_in">console</span>.log(err.message)<br>    <span class="hljs-comment">//能够正常执行sql 语句</span><br>    <span class="hljs-built_in">console</span>.log(results)<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h3></li><li>注意： 如果执行的是 select 语句，则执行的结果是数组<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 1. 导入mysql 模块</span><br><span class="hljs-keyword">const</span> mysql = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;mysql&#x27;</span>)<br><span class="hljs-comment">// 2. 建立与 mysql 数据库的连接关系</span><br><span class="hljs-keyword">const</span> db = mysql.createPool(&#123;<br>    <span class="hljs-attr">host</span>: <span class="hljs-string">&#x27;127.0.0.1&#x27;</span>, <span class="hljs-comment">//数据库的IP地址</span><br>    <span class="hljs-attr">user</span>: <span class="hljs-string">&#x27;root&#x27;</span>, <span class="hljs-comment">//登录名</span><br>    <span class="hljs-attr">password</span>: <span class="hljs-string">&#x27;admin123&#x27;</span>, <span class="hljs-comment">//登录数据库的密码</span><br>    <span class="hljs-attr">database</span>: <span class="hljs-string">&#x27;my_db_01&#x27;</span>, <span class="hljs-comment">//指定要操作的数据库名称</span><br>&#125;)<br><span class="hljs-comment">// 查询user 表中的所有数据</span><br><span class="hljs-keyword">const</span> selesql = <span class="hljs-string">&#x27;select * from user&#x27;</span><br>db.query(selesql, <span class="hljs-function">(<span class="hljs-params">err, results</span>) =&gt;</span> &#123;<br><span class="hljs-comment">//   查询数据失败</span><br>    <span class="hljs-keyword">if</span> (err) <span class="hljs-keyword">return</span> <span class="hljs-built_in">console</span>.log(err.message)<br>    <span class="hljs-built_in">console</span>.log(results)<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 1. 导入mysql 模块</span><br><span class="hljs-keyword">const</span> mysql = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;mysql&#x27;</span>)<br><span class="hljs-comment">// 2. 建立与 mysql 数据库的连接关系</span><br><span class="hljs-keyword">const</span> db = mysql.createPool(&#123;<br>    <span class="hljs-attr">host</span>: <span class="hljs-string">&#x27;127.0.0.1&#x27;</span>, <span class="hljs-comment">//数据库的IP地址</span><br>    <span class="hljs-attr">user</span>: <span class="hljs-string">&#x27;root&#x27;</span>, <span class="hljs-comment">//登录名</span><br>    <span class="hljs-attr">password</span>: <span class="hljs-string">&#x27;admin123&#x27;</span>, <span class="hljs-comment">//登录数据库的密码</span><br>    <span class="hljs-attr">database</span>: <span class="hljs-string">&#x27;my_db_01&#x27;</span>, <span class="hljs-comment">//指定要操作的数据库名称</span><br>&#125;)<br><span class="hljs-comment">//1.向user表中插入一条数据</span><br> <span class="hljs-keyword">const</span> user=&#123;<br>    <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;zr&#x27;</span>,<br>     <span class="hljs-attr">pwd</span>:<span class="hljs-string">&#x27;111&#x27;</span><br> &#125;<br><span class="hljs-comment">// 2.定义待执行的sql语句，其中的英文问号?表示占位符</span><br><span class="hljs-keyword">const</span>  sqlstr = <span class="hljs-string">&#x27;insert into user ( name,pwd) values (?,?)&#x27;</span><br><span class="hljs-comment">// 使用数组的形式，依次为?占位符指定具体的值</span><br>db.query(sqlstr,[user.name,user.pwd],<span class="hljs-function">(<span class="hljs-params">err,results</span>)=&gt;</span>&#123;<br>    <span class="hljs-comment">//执行sql语句失败</span><br>    <span class="hljs-keyword">if</span>(err) <span class="hljs-keyword">return</span> <span class="hljs-built_in">console</span>.log(err.message)<br>    <span class="hljs-comment">//成功</span><br>    <span class="hljs-comment">//注意： 如果执行的是 insert into 插入语句，则results 是一个对象</span><br>    <span class="hljs-comment">// 可以通过 affectedRows 属性判断是否插入数据成功</span><br>    <span class="hljs-keyword">if</span>(results.affectedRows === <span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;插入数据成功&#x27;</span>)<br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="插入数据的便携方式"><a href="#插入数据的便携方式" class="headerlink" title="插入数据的便携方式"></a>插入数据的便携方式</h3></li><li>向表中新增数据时候，如果数据对象的每个属性和数据表的字段一一对应，则可以用以下方式插入数据</li><li>insert into user set ?<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 1. 导入mysql 模块</span><br><span class="hljs-keyword">const</span> mysql = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;mysql&#x27;</span>)<br><span class="hljs-comment">// 2. 建立与 mysql 数据库的连接关系</span><br><span class="hljs-keyword">const</span> db = mysql.createPool(&#123;<br>    <span class="hljs-attr">host</span>: <span class="hljs-string">&#x27;127.0.0.1&#x27;</span>, <span class="hljs-comment">//数据库的IP地址</span><br>    <span class="hljs-attr">user</span>: <span class="hljs-string">&#x27;root&#x27;</span>, <span class="hljs-comment">//登录名</span><br>    <span class="hljs-attr">password</span>: <span class="hljs-string">&#x27;admin123&#x27;</span>, <span class="hljs-comment">//登录数据库的密码</span><br>    <span class="hljs-attr">database</span>: <span class="hljs-string">&#x27;my_db_01&#x27;</span>, <span class="hljs-comment">//指定要操作的数据库名称</span><br>&#125;)<br><span class="hljs-comment">//1.向user表中插入一条数据</span><br><span class="hljs-keyword">const</span> userstr = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;zr1&#x27;</span>,<br>    <span class="hljs-attr">pwd</span>: <span class="hljs-string">&#x27;111&#x27;</span><br>&#125;<br><span class="hljs-keyword">const</span> sqlstr = <span class="hljs-string">&#x27;insert into user set ?&#x27;</span><br>db.query(sqlstr, userstr, <span class="hljs-function">(<span class="hljs-params">err, results</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">//执行sql语句失败</span><br>    <span class="hljs-keyword">if</span> (err) <span class="hljs-keyword">return</span> <span class="hljs-built_in">console</span>.log(err.message)<br>    <span class="hljs-comment">//成功</span><br>    <span class="hljs-comment">// 可以通过 affectedRows 属性判断是否插入数据成功</span><br>    <span class="hljs-keyword">if</span> (results.affectedRows === <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;插入数据成功&#x27;</span>)<br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 1. 导入mysql 模块</span><br><span class="hljs-keyword">const</span> mysql = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;mysql&#x27;</span>)<br><span class="hljs-comment">// 2. 建立与 mysql 数据库的连接关系</span><br><span class="hljs-keyword">const</span> db = mysql.createPool(&#123;<br>    <span class="hljs-attr">host</span>: <span class="hljs-string">&#x27;127.0.0.1&#x27;</span>, <span class="hljs-comment">//数据库的IP地址</span><br>    <span class="hljs-attr">user</span>: <span class="hljs-string">&#x27;root&#x27;</span>, <span class="hljs-comment">//登录名</span><br>    <span class="hljs-attr">password</span>: <span class="hljs-string">&#x27;admin123&#x27;</span>, <span class="hljs-comment">//登录数据库的密码</span><br>    <span class="hljs-attr">database</span>: <span class="hljs-string">&#x27;my_db_01&#x27;</span>, <span class="hljs-comment">//指定要操作的数据库名称</span><br>&#125;)<br><span class="hljs-comment">//要更新的数据对象</span><br> <span class="hljs-keyword">const</span>  user =&#123;<span class="hljs-attr">userid</span>:<span class="hljs-number">10</span>,<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;林思意&#x27;</span>,<span class="hljs-attr">pwd</span>:<span class="hljs-string">&#x27;lsy&#x27;</span>&#125;<br><span class="hljs-comment">//要执行的sql语句</span><br><span class="hljs-keyword">const</span>  sqlstr = <span class="hljs-string">&quot;update user set name=?,pwd=? where userid=?&quot;</span><br><span class="hljs-comment">//调用 db.query() 执行sql语句的同时，使用数组依次为占位符指定具体的值</span><br>db.query(sqlstr,[user.name,user.pwd,user.userid],<span class="hljs-function">(<span class="hljs-params">err,results</span>)=&gt;</span>&#123;<br>    <span class="hljs-comment">//失败</span><br>    <span class="hljs-keyword">if</span>(err) <span class="hljs-keyword">return</span> <span class="hljs-built_in">console</span>.log(err.message)<br><span class="hljs-comment">//    成功</span><br>    <span class="hljs-keyword">if</span>(results.affectedRows === <span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;数据更新成功&#x27;</span>)<br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="更新数据的便携方式"><a href="#更新数据的便携方式" class="headerlink" title="更新数据的便携方式"></a>更新数据的便携方式</h3></li><li>更新数据时，如果数据对象的每个属性和数据表中的字段一一对应 则可以通过如下方式更新数据<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 1. 导入mysql 模块</span><br><span class="hljs-keyword">const</span> mysql = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;mysql&#x27;</span>)<br><span class="hljs-comment">// 2. 建立与 mysql 数据库的连接关系</span><br><span class="hljs-keyword">const</span> db = mysql.createPool(&#123;<br>    <span class="hljs-attr">host</span>: <span class="hljs-string">&#x27;127.0.0.1&#x27;</span>, <span class="hljs-comment">//数据库的IP地址</span><br>    <span class="hljs-attr">user</span>: <span class="hljs-string">&#x27;root&#x27;</span>, <span class="hljs-comment">//登录名</span><br>    <span class="hljs-attr">password</span>: <span class="hljs-string">&#x27;admin123&#x27;</span>, <span class="hljs-comment">//登录数据库的密码</span><br>    <span class="hljs-attr">database</span>: <span class="hljs-string">&#x27;my_db_01&#x27;</span>, <span class="hljs-comment">//指定要操作的数据库名称</span><br>&#125;)<br><span class="hljs-comment">//要更新的数据对象</span><br> <span class="hljs-keyword">const</span>  user =&#123;<span class="hljs-attr">userid</span>:<span class="hljs-number">11</span>,<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;陆婷&#x27;</span>,<span class="hljs-attr">pwd</span>:<span class="hljs-string">&#x27;lt&#x27;</span>&#125;<br><span class="hljs-comment">//要执行的sql语句</span><br><span class="hljs-keyword">const</span>  sqlstr = <span class="hljs-string">&quot;update user set ? where userid=?&quot;</span><br><span class="hljs-comment">//调用 db.query() 执行sql语句的同时，使用数组依次为占位符指定具体的值</span><br>db.query(sqlstr,[user,user.userid],<span class="hljs-function">(<span class="hljs-params">err,results</span>)=&gt;</span>&#123;<br>    <span class="hljs-comment">//失败</span><br>    <span class="hljs-keyword">if</span>(err) <span class="hljs-keyword">return</span> <span class="hljs-built_in">console</span>.log(err.message)<br><span class="hljs-comment">//    成功</span><br>    <span class="hljs-keyword">if</span>(results.affectedRows === <span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;数据更新成功&#x27;</span>)<br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="删除数据-彻底删除"><a href="#删除数据-彻底删除" class="headerlink" title="删除数据(彻底删除)"></a>删除数据(彻底删除)</h3></li><li>在删除数据时，尽量根据id（唯一标识）来删除数据<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 1. 导入mysql 模块</span><br><span class="hljs-keyword">const</span> mysql = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;mysql&#x27;</span>)<br><span class="hljs-comment">// 2. 建立与 mysql 数据库的连接关系</span><br><span class="hljs-keyword">const</span> db = mysql.createPool(&#123;<br>    <span class="hljs-attr">host</span>: <span class="hljs-string">&#x27;127.0.0.1&#x27;</span>, <span class="hljs-comment">//数据库的IP地址</span><br>    <span class="hljs-attr">user</span>: <span class="hljs-string">&#x27;root&#x27;</span>, <span class="hljs-comment">//登录名</span><br>    <span class="hljs-attr">password</span>: <span class="hljs-string">&#x27;admin123&#x27;</span>, <span class="hljs-comment">//登录数据库的密码</span><br>    <span class="hljs-attr">database</span>: <span class="hljs-string">&#x27;my_db_01&#x27;</span>, <span class="hljs-comment">//指定要操作的数据库名称</span><br>&#125;)<br><span class="hljs-comment">//要执行的sql语句</span><br><span class="hljs-keyword">const</span>  sqlstr = <span class="hljs-string">&#x27;delete from user where userid = ?&#x27;</span><br><span class="hljs-comment">//调用 db.query() 执行sql语句的同时，使用数组依次为占位符指定具体的值</span><br><span class="hljs-comment">// 注意，如果sql语句中有多个占位符，则必须使用数组为每个占位符指定具体的值</span><br><span class="hljs-comment">// 如果sql 语句中只有一个占位符，可以省略数组</span><br>db.query(sqlstr,<span class="hljs-number">10</span>,<span class="hljs-function">(<span class="hljs-params">err,results</span>)=&gt;</span>&#123;<br>    <span class="hljs-comment">//失败</span><br>    <span class="hljs-keyword">if</span>(err) <span class="hljs-keyword">return</span> <span class="hljs-built_in">console</span>.log(err.message)<br><span class="hljs-comment">//    成功</span><br>    <span class="hljs-keyword">if</span>(results.affectedRows === <span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;数据删除成功&#x27;</span>)<br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="标记删除"><a href="#标记删除" class="headerlink" title="标记删除"></a>标记删除</h3></li><li>使用delete语句会吧数据从数据库真正的删除，为了保险起见，推荐使用标记删除的形式来模拟删除的动作，</li><li>所谓的标记删除，就是在表中设置类似status这样的状态字段，来标记当前这条数据是否被删除</li><li>当用户执行来删除的动作，我们并没有执行delete语句而是执行了update 语句将这条数据对应的status字段标记为删除<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 1. 导入mysql 模块</span><br><span class="hljs-keyword">const</span> mysql = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;mysql&#x27;</span>)<br><span class="hljs-comment">// 2. 建立与 mysql 数据库的连接关系</span><br><span class="hljs-keyword">const</span> db = mysql.createPool(&#123;<br>    <span class="hljs-attr">host</span>: <span class="hljs-string">&#x27;127.0.0.1&#x27;</span>, <span class="hljs-comment">//数据库的IP地址</span><br>    <span class="hljs-attr">user</span>: <span class="hljs-string">&#x27;root&#x27;</span>, <span class="hljs-comment">//登录名</span><br>    <span class="hljs-attr">password</span>: <span class="hljs-string">&#x27;admin123&#x27;</span>, <span class="hljs-comment">//登录数据库的密码</span><br>    <span class="hljs-attr">database</span>: <span class="hljs-string">&#x27;my_db_01&#x27;</span>, <span class="hljs-comment">//指定要操作的数据库名称</span><br>&#125;)<br><span class="hljs-comment">//要执行的sql语句</span><br><span class="hljs-keyword">const</span>  sqlstr = <span class="hljs-string">&#x27;update user set status= ? where userid = ?&#x27;</span><br>db.query(sqlstr,[<span class="hljs-number">1</span>,<span class="hljs-number">11</span>],<span class="hljs-function">(<span class="hljs-params">err,results</span>)=&gt;</span>&#123;<br>    <span class="hljs-comment">//失败</span><br>    <span class="hljs-keyword">if</span>(err) <span class="hljs-keyword">return</span> <span class="hljs-built_in">console</span>.log(err.message)<br><span class="hljs-comment">//    成功</span><br>    <span class="hljs-keyword">if</span>(results.affectedRows === <span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;标记删除成功&#x27;</span>)<br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node.js 知识整理（使用Express写接口）</title>
      <link href="/2022/08/20/Node.js%20%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86%EF%BC%88%E4%BD%BF%E7%94%A8Express%E5%86%99%E6%8E%A5%E5%8F%A3%EF%BC%89/"/>
      <url>/2022/08/20/Node.js%20%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86%EF%BC%88%E4%BD%BF%E7%94%A8Express%E5%86%99%E6%8E%A5%E5%8F%A3%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li>本篇博客主要介绍le如何用Express 写接口<h2 id="创建基本的服务器"><a href="#创建基本的服务器" class="headerlink" title="创建基本的服务器"></a>创建基本的服务器</h2></li><li>如何使用express写接口呢？话不多说，先来创建web服务器，代码示例如下<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 导入express模块</span><br><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>)<br><span class="hljs-comment">//创建 express 服务器实例</span><br><span class="hljs-keyword">const</span> app = express()<br><span class="hljs-comment">//调用 app.listen 方法，指定端口号，启动web服务器</span><br>app.listen(<span class="hljs-string">&#x27;8088&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;express server running at http://127.0.0.1:8088&#x27;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="创建API路由模块"><a href="#创建API路由模块" class="headerlink" title="创建API路由模块"></a>创建API路由模块</h2></li><li>代码示例如下，创建两个js文件，一个api.js,一个router.js</li><li>api.js文件代码如下(api.js文件导入路由模块)：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 导入express模块</span><br><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>)<br><br><span class="hljs-comment">//创建 express 服务器实例</span><br><span class="hljs-keyword">const</span> app = express()<br><span class="hljs-comment">// 导入路由模块</span><br><span class="hljs-keyword">const</span> router =<span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./router&#x27;</span>)<br><span class="hljs-comment">//把路由模块注册到app上</span><br>app.use(<span class="hljs-string">&#x27;/api&#x27;</span>,router)<br><br><span class="hljs-comment">//调用 app.listen 方法，指定端口号，启动web服务器</span><br>app.listen(<span class="hljs-string">&#x27;8088&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;express server running at http://127.0.0.1:8088&#x27;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure></li><li>router.js文件代码如下<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 导入express模块</span><br><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>)<br><span class="hljs-keyword">const</span> router = express.Router()<br><span class="hljs-comment">//这里挂载对应的路由</span><br><span class="hljs-built_in">module</span>.exports = router<br></code></pre></td></tr></table></figure><h2 id="编写get接口"><a href="#编写get接口" class="headerlink" title="编写get接口"></a>编写get接口</h2></li><li>在上面的roter.js文件中写get接口<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 导入express模块</span><br><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>)<br><span class="hljs-keyword">const</span> router = express.Router()<br><span class="hljs-comment">//这里挂载对应的路由</span><br>router.get(<span class="hljs-string">&#x27;/get&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">req,res</span>)=&gt;</span>&#123;<br>    <span class="hljs-comment">// 通过req.query 获取客户端通过查询字符串。发送到服务器中的数据</span><br>    <span class="hljs-keyword">const</span>  query = req.query<br>    <span class="hljs-comment">// 通过res.send方法， 向客户端响应处理到接口</span><br>    res.send(&#123;<br>        <span class="hljs-attr">code</span>:<span class="hljs-number">200</span>,<span class="hljs-comment">//200表示处理成功</span><br>        <span class="hljs-attr">msg</span>:<span class="hljs-string">&#x27;get接口请求成功&#x27;</span>,<span class="hljs-comment">//状态描述</span><br>        <span class="hljs-attr">data</span>:query <span class="hljs-comment">//需要响应给客户端的数据</span><br>    &#125;)<br>&#125;)<br><span class="hljs-built_in">module</span>.exports = router<br></code></pre></td></tr></table></figure><h3 id="编写post-接口"><a href="#编写post-接口" class="headerlink" title="编写post 接口"></a>编写post 接口</h3></li><li>两个文件api.js 和router.js</li><li>api.js<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 导入express模块</span><br><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>)<br><span class="hljs-comment">//创建 express 服务器实例</span><br><span class="hljs-keyword">const</span> app = express()<br><span class="hljs-comment">//配置解析表单数据中间件</span><br>app.use(express.urlencoded(&#123;<span class="hljs-attr">extended</span>:<span class="hljs-literal">false</span>&#125;))<br><br><br><span class="hljs-comment">// 导入路由模块</span><br><span class="hljs-keyword">const</span> router = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./router&#x27;</span>)<br><span class="hljs-comment">// console.log(router)</span><br><span class="hljs-comment">//把路由模块注册到app上</span><br>app.use(<span class="hljs-string">&#x27;/api&#x27;</span>,router)<br><br><span class="hljs-comment">//调用 app.listen 方法，指定端口号，启动web服务器</span><br>app.listen(<span class="hljs-string">&#x27;8088&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;express server running at http://127.0.0.1:8088&#x27;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure></li><li>router.js<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 导入express模块</span><br><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>)<br><span class="hljs-keyword">const</span> router = express.Router()<br><span class="hljs-comment">//这里挂载对应的路由</span><br>router.post(<span class="hljs-string">&#x27;/post&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">req,res</span>)=&gt;</span>&#123;<br>   <span class="hljs-comment">// 通过req.body 获取请求体中包含的 url-encoded 格式的数据</span><br>    <span class="hljs-keyword">const</span> body = req.body<br>    <span class="hljs-comment">// 调用res.send 方法向客户端响应结果</span><br>    res.send(&#123;<br>        <span class="hljs-attr">code</span>:<span class="hljs-number">200</span>,<br>        <span class="hljs-attr">msg</span>:<span class="hljs-string">&#x27;post请求成功&#x27;</span>,<br>        <span class="hljs-attr">data</span>:body<br>    &#125;)<br>&#125;)<br><span class="hljs-built_in">module</span>.exports = router<br></code></pre></td></tr></table></figure><h2 id="接口跨域问题"><a href="#接口跨域问题" class="headerlink" title="接口跨域问题"></a>接口跨域问题</h2><h3 id="如何解决跨域问题"><a href="#如何解决跨域问题" class="headerlink" title="如何解决跨域问题"></a>如何解决跨域问题</h3></li><li>CORS</li><li>JSONP(只支持 get 请求)<h3 id="CORS-解决跨域"><a href="#CORS-解决跨域" class="headerlink" title="CORS 解决跨域"></a>CORS 解决跨域</h3></li><li>cors 是express的一个第三方中间件，通过安装和配置可以解决跨域</li></ul><ol><li>运行命令 npm install cors  安装中间件</li><li>使用 const cors = require(‘cors’)</li><li>在路由之前调用app.use(cors()) 配置中间件</li><li>注意：<strong>一定要在路由之前配置cors 这个中间件，从而解决跨域问题</strong><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript"> <span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 在上面的 api.js文件引入cors解决跨域</span><br><span class="hljs-comment"> * **/</span><br><span class="hljs-comment">// 导入express模块</span><br><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>)<br><span class="hljs-comment">//创建 express 服务器实例</span><br><span class="hljs-keyword">const</span> app = express()<br><span class="hljs-comment">//配置解析表单数据中间件</span><br>app.use(express.urlencoded(&#123;<span class="hljs-attr">extended</span>:<span class="hljs-literal">false</span>&#125;))<br><span class="hljs-comment">// 一定要在路由之前配置cors 这个中间件，从而解决跨域问题</span><br><span class="hljs-keyword">const</span> cors = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;cors&#x27;</span>)<br>app.use(cors())<br><span class="hljs-comment">// 导入路由模块</span><br><span class="hljs-keyword">const</span> router = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./router&#x27;</span>)<br><span class="hljs-comment">//把路由模块注册到app上</span><br>app.use(<span class="hljs-string">&#x27;/api&#x27;</span>,router)<br><span class="hljs-comment">//调用 app.listen 方法，指定端口号，启动web服务器</span><br>app.listen(<span class="hljs-string">&#x27;8088&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;express server running at http://127.0.0.1:8088&#x27;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><h4 id="什么是CORS"><a href="#什么是CORS" class="headerlink" title="什么是CORS"></a>什么是CORS</h4></li></ol><ul><li>cors(Cross-Origin Resource Sharing,<strong>跨域资源共享</strong>),由一系列 HTTP 响应头组成,这些HTTP响应头决定浏览器是否阻止前端js代码跨域获取资源</li><li>浏览器的同源安全策略，默认会阻网页跨域获取资源，但如果接口服务器配置了CORS相关的http响应头，就可以解决浏览器的跨域访问限制。<h4 id="CORS-注意事项"><a href="#CORS-注意事项" class="headerlink" title="CORS 注意事项"></a>CORS 注意事项</h4></li></ul><ol><li>CORS主要在<strong>服务器端进行配置</strong>，<strong>客户端浏览器无需做任何额外的配置</strong>，即可请求开启了CORS的接口</li><li>CORS<strong>有兼容性</strong>。 只能支持XMLHttpRequest level2 的浏览器，才能正常访问开启了CORS的服务端接口，（例如：IE10+,Chrome4+,FireFox3.5+）<h4 id="CORS响应头字段"><a href="#CORS响应头字段" class="headerlink" title="CORS响应头字段"></a>CORS响应头字段</h4><h5 id="Access-Control-Allow-Origin-："><a href="#Access-Control-Allow-Origin-：" class="headerlink" title="Access-Control-Allow-Origin ： | *"></a>Access-Control-Allow-Origin ：<origin> | *</h5><blockquote><p>如果只允许来自<a href="https://www.baidu.com/">https://www.baidu.com/</a> 的请求</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">res.setHeader(<span class="hljs-string">&#x27;Access-Control-Allow-Origin&#x27;</span>,<span class="hljs-string">&#x27;https://www.baidu.com/&#x27;</span>)<br></code></pre></td></tr></table></figure><blockquote><p>如果允许任何域的请求，参数值可以改为*</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">res.setHeader(<span class="hljs-string">&#x27;Access-Control-Allow-Origin&#x27;</span>,<span class="hljs-string">&#x27;*&#x27;</span>)<br></code></pre></td></tr></table></figure><h5 id="Access-Control-Allow-Headers"><a href="#Access-Control-Allow-Headers" class="headerlink" title="Access-Control-Allow-Headers"></a>Access-Control-Allow-Headers</h5></li></ol><ul><li>默认情况下，cors仅支持客户端向服务器发送如下九个请求头</li><li>Accept，Accept-Language，Content-Language，DPR,Downlink,Save-Data,Viewport-Width,Width,Content-Type(值仅限于 text/plain,  multipart/form-data,   application/x-www-form-urlencoded 三者之一)</li><li>如果客户端向服务器发送了额外的请求头信息，则需要在服务器端，通过Access-Control-Allow-Headers对额外的请求头进行声明，否则这次请求会失败</li><li><img src="https://linmuhan.gitee.io/images/reqhead.png" alt="avatar"><h5 id="Access-Control-Allow-Methods"><a href="#Access-Control-Allow-Methods" class="headerlink" title="Access-Control-Allow-Methods"></a>Access-Control-Allow-Methods</h5></li><li>默认情况下cors仅支持客户端发起的GET，POST, HEAD 请求</li><li>如果客户端希望通过 PUT,DELETE 等方式请求服务器等资源，则需要在服务器端通过 Access-Control-Allow-Methods 来指定实际请求所允许使用的HTTP请求方法</li><li><img src="https://linmuhan.gitee.io/images/reqmethods.png" alt="avatar"><h4 id="CORS请求分类"><a href="#CORS请求分类" class="headerlink" title="CORS请求分类"></a>CORS请求分类</h4><h5 id="简单请求"><a href="#简单请求" class="headerlink" title="简单请求"></a>简单请求</h5></li><li>满足一下两大条件</li></ul><ol><li>请求方式： GET,POST,HEAD 三者之一</li><li>HTTP不超过以下几种字段，无自定义头部字段，Accept，Accept-Language，Content-Language，DPR,Downlink,Save-Data,Viewport-Width,Width,Content-Type(只有三个值 text/plain,  multipart/form-data,   application/x-www-form-urlencoded)<h5 id="预检请求"><a href="#预检请求" class="headerlink" title="预检请求"></a>预检请求</h5></li></ol><ul><li>只要符合以下任何一个条件的请求，都需要预检请求</li></ul><ol><li>请求方式为GET,POST,HEAD 之外的请求Method 类型</li><li>请求头中包含了自定义字段</li><li>向服务器发送了application/json 格式的数据</li></ol><ul><li>在浏览器和服务器正式通讯之前，浏览器会先发送option请求进行预检，以获知服务器是否允许该实际请求，所以这一次的option请求称为”预检请求”，服务器成功响应预检请求之后，才能发送真正的请求，并携带真实数据<h5 id="简单请求和预检请求-之间的区别"><a href="#简单请求和预检请求-之间的区别" class="headerlink" title="简单请求和预检请求 之间的区别"></a>简单请求和预检请求 之间的区别</h5></li><li>简单请求特点：<strong>客户端与服务器之间只有一次请求</strong></li><li>预检请求的特点： 客户端与服务器之间两次请求，option预检请求成功之后，才会真正发起请求<h3 id="JSONP-解决跨域"><a href="#JSONP-解决跨域" class="headerlink" title="JSONP 解决跨域"></a>JSONP 解决跨域</h3></li><li>概念： 浏览器端通过script标签的src属性，请求服务器上的数据，同时，服务器返回一个函数的调用，这种请求数据的方式叫做JSONP</li><li>特点：</li></ul><ol><li>JSONP不属于真正的ajax请求，因为它没有使用XMLHttpRequest 这个对象</li><li>JSONP只支持get请求，</li></ol><ul><li>注意事项：</li></ul><ol><li>如果项目中已经配置了cors跨域资源共享，为了防止冲突，必须在配置cors中间件之前声明jsonp的接口，否则jsonp接口会被处理成开启了cors的接口<h2 id="以上知识相关文件如下"><a href="#以上知识相关文件如下" class="headerlink" title="以上知识相关文件如下"></a>以上知识相关文件如下</h2><h3 id="html文件"><a href="#html文件" class="headerlink" title="html文件"></a>html文件</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.staticfile.org/jquery/3.6.0/jquery.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btnget&quot;</span>&gt;</span>get<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btnpost&quot;</span>&gt;</span>post<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btndel&quot;</span>&gt;</span>delete<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btnjsonp&quot;</span>&gt;</span>jsonp<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    $(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">    <span class="hljs-comment">//    测试get 接口</span></span><br><span class="javascript">        $(<span class="hljs-string">&#x27;#btnget&#x27;</span>).on(<span class="hljs-string">&#x27;click&#x27;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">            $.ajax(&#123;</span><br><span class="javascript">                <span class="hljs-attr">type</span>:<span class="hljs-string">&quot;GET&quot;</span>,</span><br><span class="javascript">                <span class="hljs-attr">url</span>:<span class="hljs-string">&#x27;http://127.0.0.1:8088/api/get&#x27;</span>,</span><br><span class="javascript">                <span class="hljs-attr">data</span>:&#123;</span><br><span class="javascript">                    <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;lfh&#x27;</span>,</span><br><span class="javascript">                    <span class="hljs-attr">age</span>:<span class="hljs-number">23</span>,</span><br><span class="javascript">                    <span class="hljs-attr">genner</span>:<span class="hljs-string">&#x27;女&#x27;</span></span><br><span class="javascript">                &#125;,</span><br><span class="javascript">                <span class="hljs-attr">success</span>:<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">res</span>)</span>&#123;</span><br><span class="javascript">                    <span class="hljs-built_in">console</span>.log(res)</span><br><span class="javascript">                &#125;</span><br><span class="javascript">            &#125;)</span><br><span class="javascript">        &#125;)</span><br><span class="javascript">    <span class="hljs-comment">//    测试post 接口</span></span><br><span class="javascript">        $(<span class="hljs-string">&#x27;#btnpost&#x27;</span>).on(<span class="hljs-string">&#x27;click&#x27;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">            $.ajax(&#123;</span><br><span class="javascript">                <span class="hljs-attr">type</span>:<span class="hljs-string">&quot;POST&quot;</span>,</span><br><span class="javascript">                <span class="hljs-attr">url</span>:<span class="hljs-string">&#x27;http://127.0.0.1:8088/api/post&#x27;</span>,</span><br><span class="javascript">                <span class="hljs-attr">data</span>:&#123;</span><br><span class="javascript">                    <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;lfh&#x27;</span>,</span><br><span class="javascript">                    <span class="hljs-attr">age</span>:<span class="hljs-number">23</span>,</span><br><span class="javascript">                    <span class="hljs-attr">genner</span>:<span class="hljs-string">&#x27;女&#x27;</span></span><br><span class="javascript">                &#125;,</span><br><span class="javascript">                <span class="hljs-attr">success</span>:<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">res</span>)</span>&#123;</span><br><span class="javascript">                    <span class="hljs-built_in">console</span>.log(res)</span><br><span class="javascript">                &#125;</span><br><span class="javascript">            &#125;)</span><br><span class="javascript">        &#125;)</span><br><span class="javascript">    <span class="hljs-comment">//    测试delete请求</span></span><br><span class="javascript">        $(<span class="hljs-string">&#x27;#btndel&#x27;</span>).on(<span class="hljs-string">&#x27;click&#x27;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">            $.ajax(&#123;</span><br><span class="javascript">                <span class="hljs-attr">type</span>:<span class="hljs-string">&quot;DELETE&quot;</span>,</span><br><span class="javascript">                <span class="hljs-attr">url</span>:<span class="hljs-string">&#x27;http://127.0.0.1:8088/api/delete&#x27;</span>,</span><br><span class="javascript">                <span class="hljs-attr">data</span>:&#123;</span><br><span class="javascript">                    <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;lfh&#x27;</span>,</span><br><span class="javascript">                    <span class="hljs-attr">age</span>:<span class="hljs-number">23</span>,</span><br><span class="javascript">                    <span class="hljs-attr">genner</span>:<span class="hljs-string">&#x27;女&#x27;</span></span><br><span class="javascript">                &#125;,</span><br><span class="javascript">                <span class="hljs-attr">success</span>:<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">res</span>)</span>&#123;</span><br><span class="javascript">                    <span class="hljs-built_in">console</span>.log(res)</span><br><span class="javascript">                &#125;</span><br><span class="javascript">            &#125;)</span><br><span class="javascript">        &#125;)</span><br><span class="javascript">        <span class="hljs-comment">////    测试jsonp请求</span></span><br><span class="javascript">        $(<span class="hljs-string">&#x27;#btnjsonp&#x27;</span>).on(<span class="hljs-string">&#x27;click&#x27;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">            $.ajax(&#123;</span><br><span class="javascript">                <span class="hljs-attr">type</span>:<span class="hljs-string">&quot;GET&quot;</span>,</span><br><span class="javascript">                <span class="hljs-attr">url</span>:<span class="hljs-string">&#x27;http://127.0.0.1:8088/api/jsonp&#x27;</span>,</span><br><span class="javascript">                <span class="hljs-attr">dataType</span>:<span class="hljs-string">&#x27;jsonp&#x27;</span>,</span><br><span class="javascript">                <span class="hljs-attr">success</span>:<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">res</span>)</span>&#123;</span><br><span class="javascript">                    <span class="hljs-built_in">console</span>.log(res)</span><br><span class="javascript">                &#125;</span><br><span class="javascript">            &#125;)</span><br><span class="javascript">        &#125;)</span><br><span class="javascript">    &#125;)</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="api-js"><a href="#api-js" class="headerlink" title="api.js"></a>api.js</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 导入express模块</span><br><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>)<br><span class="hljs-comment">//创建 express 服务器实例</span><br><span class="hljs-keyword">const</span> app = express()<br><span class="hljs-comment">//配置解析表单数据中间件</span><br>app.use(express.urlencoded(&#123;<span class="hljs-attr">extended</span>:<span class="hljs-literal">false</span>&#125;))<br><span class="hljs-comment">//必须在配置cors中间件之前配置jsonp接口</span><br><br>app.get(<span class="hljs-string">&#x27;/api/jsonp&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">req,res</span>)=&gt;</span>&#123;<br>    <span class="hljs-comment">// 1.得到函数的名称</span><br>    <span class="hljs-keyword">const</span> funname = req.query.callback<br>    <span class="hljs-comment">// 2.定义要发送给客户端的数据对象</span><br>    <span class="hljs-keyword">const</span>  data =&#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&quot;lfh&quot;</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">6</span>&#125;<br>    <span class="hljs-comment">// 3.拼接出一个函数的调用</span><br>    <span class="hljs-keyword">const</span>  str = <span class="hljs-string">`<span class="hljs-subst">$&#123;funname&#125;</span>(<span class="hljs-subst">$&#123;<span class="hljs-built_in">JSON</span>.stringify(data)&#125;</span>)`</span><br>    <span class="hljs-comment">// 4.把拼接的字符串响应给客户端</span><br>    res.send(str)<br>&#125;)<br><span class="hljs-comment">// 一定要在路由之前配置cors 这个中间件，从而解决跨域问题</span><br><span class="hljs-keyword">const</span> cors = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;cors&#x27;</span>)<br>app.use(cors())<br><br><br><br><span class="hljs-comment">// 导入路由模块</span><br><span class="hljs-keyword">const</span> router = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./router&#x27;</span>)<br><span class="hljs-comment">// console.log(router)</span><br><span class="hljs-comment">//把路由模块注册到app上</span><br>app.use(<span class="hljs-string">&#x27;/api&#x27;</span>,router)<br><br><span class="hljs-comment">//调用 app.listen 方法，指定端口号，启动web服务器</span><br>app.listen(<span class="hljs-string">&#x27;8088&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;express server running at http://127.0.0.1:8088&#x27;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="router-js"><a href="#router-js" class="headerlink" title="router.js"></a>router.js</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 导入express模块</span><br><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>)<br><span class="hljs-keyword">const</span> router = express.Router()<br><span class="hljs-comment">//这里挂载对应的路由</span><br>router.post(<span class="hljs-string">&#x27;/post&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">req,res</span>)=&gt;</span>&#123;<br>   <span class="hljs-comment">// 通过req.body 获取请求体中包含的 url-encoded 格式的数据</span><br>    <span class="hljs-keyword">const</span> body = req.body<br>    <span class="hljs-comment">// 调用res.send 方法向客户端响应结果</span><br>    res.send(&#123;<br>        <span class="hljs-attr">code</span>:<span class="hljs-number">200</span>,<br>        <span class="hljs-attr">msg</span>:<span class="hljs-string">&#x27;post请求成功&#x27;</span>,<br>        <span class="hljs-attr">data</span>:body<br>    &#125;)<br>&#125;)<br>router.get(<span class="hljs-string">&#x27;/get&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">req,res</span>)=&gt;</span>&#123;<br>    <span class="hljs-comment">// 通过req.query 获取客户端通过查询字符串。发送到服务器中的数据</span><br>    <span class="hljs-keyword">const</span>  query = req.query<br>    <span class="hljs-comment">// 通过res.send方法， 向客户端响应处理到接口</span><br>    res.send(&#123;<br>        <span class="hljs-attr">code</span>:<span class="hljs-number">200</span>,<span class="hljs-comment">//200表示处理成功</span><br>        <span class="hljs-attr">msg</span>:<span class="hljs-string">&#x27;get接口请求成功&#x27;</span>,<span class="hljs-comment">//状态描述</span><br>        <span class="hljs-attr">data</span>:query <span class="hljs-comment">//需要响应给客户端的数据</span><br>    &#125;)<br>&#125;)<br>router.delete(<span class="hljs-string">&#x27;/delete&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">req,res</span>)=&gt;</span>&#123;<br>    res.send(&#123;<br>        <span class="hljs-attr">code</span>:<span class="hljs-string">&#x27;200&#x27;</span>,<br>        <span class="hljs-attr">msg</span>:<span class="hljs-string">&#x27;delete请求成功&#x27;</span><br>    &#125;)<br>&#125;)<br><span class="hljs-built_in">module</span>.exports = router<br></code></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Node.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node.js 知识整理（Express中间件）</title>
      <link href="/2022/08/20/Node.js%20%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86%EF%BC%88Express%E4%B8%AD%E9%97%B4%E4%BB%B6%EF%BC%89/"/>
      <url>/2022/08/20/Node.js%20%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86%EF%BC%88Express%E4%B8%AD%E9%97%B4%E4%BB%B6%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li>本篇博客主要记录了express中间件<h2 id="Express-中间件"><a href="#Express-中间件" class="headerlink" title="Express 中间件"></a>Express 中间件</h2><h3 id="中间件格式"><a href="#中间件格式" class="headerlink" title="中间件格式"></a>中间件格式</h3></li><li>中间件函数的形参数列表中，<strong>必须有 next参数</strong>，而路由处理参数中只包含req 和 res</li><li>书写格式如下：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>)<br><span class="hljs-keyword">const</span> app = express()<br>app.get(<span class="hljs-string">&#x27;/&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">req,res,next</span>)=&gt;</span>&#123;<br>   next()<br>&#125;)<br>app.listen(<span class="hljs-string">&#x27;8088&#x27;</span>,<span class="hljs-function">()=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;express server running at http://127.0.0.1:8088&#x27;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="next-函数的作用"><a href="#next-函数的作用" class="headerlink" title="next 函数的作用"></a>next 函数的作用</h3></li><li><strong>next函数</strong>是实现<strong>多个中间件连续调用</strong>的关键，它表示把流转关系<strong>转交</strong>给下一个中间件或者路由</li><li><img src="https://linmuhan.gitee.io/images/zhongjianjian.png" alt="avatar"><h3 id="定义中间件"><a href="#定义中间件" class="headerlink" title="定义中间件"></a>定义中间件</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span>  express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>)<br><span class="hljs-keyword">const</span>  app = express()<br><span class="hljs-comment">//定义一个中间件</span><br><span class="hljs-keyword">const</span> c1 = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">req,res,next</span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;这是一个中间件函数&#x27;</span>)<br>    <span class="hljs-comment">// 把流转关系，转交给下一个中间件或路由</span><br>    next()<br>&#125;<br>app.listen(<span class="hljs-string">&#x27;8088&#x27;</span>,<span class="hljs-function">()=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;express server running is http://127.0.0.1:8088&#x27;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="全局生效的中间件"><a href="#全局生效的中间件" class="headerlink" title="全局生效的中间件"></a>全局生效的中间件</h3></li><li>客户端发起的<strong>任何请求</strong>，到达服务器之后，<strong>都会触发中间件</strong>，叫做全局生效的中间件</li><li>通过app.use(中间件函数)，即可定义一个 全局生效的中间件，示例代码如下：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>)<br><span class="hljs-keyword">const</span> app = express()<br><span class="hljs-comment">//定义一个中间件</span><br><span class="hljs-keyword">const</span> c1 = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">req, res, next</span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;这是一个中间件函数&#x27;</span>)<br>    <span class="hljs-comment">// 把流转关系，转交给下一个中间件或路由</span><br>    next()<br>&#125;<br><span class="hljs-comment">//将cl函数注册为全局生效的中间件</span><br>app.use(c1)<br><br>app.get(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;调用了/这个路由&#x27;</span>)<br>    res.send(<span class="hljs-string">&#x27;home page&#x27;</span>)<br>&#125;)<br>app.post(<span class="hljs-string">&#x27;/user&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;调用了/user这个路由&#x27;</span>)<br>    res.send(<span class="hljs-string">&#x27;user page&#x27;</span>)<br>&#125;)<br>app.listen(<span class="hljs-string">&#x27;8088&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;express server running is http://127.0.0.1:8088&#x27;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="定义中间件简化形式"><a href="#定义中间件简化形式" class="headerlink" title="定义中间件简化形式"></a>定义中间件简化形式</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>)<br><span class="hljs-keyword">const</span> app = express()<br><span class="hljs-comment">// 定义全局中间件的简化形式</span><br>app.use(<span class="hljs-function">(<span class="hljs-params">req,res,next</span>)=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;定义全局中间件的简化形式&#x27;</span>)<br>    next()<br>&#125;)<br>app.get(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;调用了/这个路由&#x27;</span>)<br>    res.send(<span class="hljs-string">&#x27;home page&#x27;</span>)<br>&#125;)<br>app.listen(<span class="hljs-string">&#x27;8088&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;express server running is http://127.0.0.1:8088&#x27;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="中间件的作用"><a href="#中间件的作用" class="headerlink" title="中间件的作用"></a>中间件的作用</h3></li><li>多个中间件之间，共享一份req 和 res ,基于这样的特性，我们可以在上游的中间件中，统一的为req 或 res对象添加自定义的属性和方法，供下游的中间件或者路由使用。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>)<br><span class="hljs-keyword">const</span> app = express()<br><span class="hljs-comment">// 定义全局中间件的简化形式</span><br>app.use(<span class="hljs-function">(<span class="hljs-params">req, res, next</span>) =&gt;</span> &#123;<br><span class="hljs-comment">//    获取请求到达服务器的时间</span><br><span class="hljs-keyword">const</span>  time = <span class="hljs-built_in">Date</span>.now()<br>    <span class="hljs-comment">//为 req 对象 拦截自定义属性，从而把时间共享给后面的所有路由</span><br>    req.startTime = time<br>    next()<br>&#125;)<br>app.get(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>    res.send(<span class="hljs-string">&#x27;home page&#x27;</span> + req.startTime)<br>&#125;)<br>app.post(<span class="hljs-string">&#x27;/user&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>    res.send(<span class="hljs-string">&#x27;user page&#x27;</span> +req.startTime)<br>&#125;)<br>app.listen(<span class="hljs-string">&#x27;8088&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;express server running is http://127.0.0.1:8088&#x27;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="定义多个全局中间件"><a href="#定义多个全局中间件" class="headerlink" title="定义多个全局中间件"></a>定义多个全局中间件</h3></li><li>可以用app.use() <strong>连续定义多个</strong>全局中间件，客户端请求到达服务器之后，会按照中间件的定义的先后顺序依次进行调用， 示例代码如下：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *定义多个全局中间件</span><br><span class="hljs-comment"> * */</span><br><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>)<br><span class="hljs-keyword">const</span> app = express()<br><span class="hljs-comment">//第一个全局中间件</span><br>app.use(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">req, res, next</span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;第一个全局中间件&#x27;</span>)<br>    next()<br>&#125;)<br><span class="hljs-comment">//第二个全局中间件</span><br>app.use(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">req, res, next</span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;第二个全局中间件&#x27;</span>)<br>    next()<br>&#125;)<br><span class="hljs-comment">//定义路由</span><br>app.get(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>    res.send(<span class="hljs-string">&#x27;home page&#x27;</span>)<br>&#125;)<br>app.listen(<span class="hljs-string">&#x27;8088&#x27;</span>,<span class="hljs-function">()=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;express server running at http://127.0.0.1:8088&#x27;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="局部定义的中间件"><a href="#局部定义的中间件" class="headerlink" title="局部定义的中间件"></a>局部定义的中间件</h3></li><li>不使用 app.use() 定义的中间件叫做 局部生效的中间件,代码示例如下：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *定义局部生效的中间件</span><br><span class="hljs-comment"> * */</span><br><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>)<br><span class="hljs-keyword">const</span> app = express()<br><span class="hljs-keyword">const</span> ct = <span class="hljs-function">(<span class="hljs-params">req,res,next</span>)=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;局部生效中间件函数&#x27;</span>)<br>  next()<br>&#125;<br><span class="hljs-comment">//定义路由</span><br>app.get(<span class="hljs-string">&#x27;/&#x27;</span>,ct, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>    res.send(<span class="hljs-string">&#x27;home page&#x27;</span>)<br>&#125;)<br>app.post(<span class="hljs-string">&#x27;/user&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>    res.send(<span class="hljs-string">&#x27;user page&#x27;</span>)<br>&#125;)<br>app.listen(<span class="hljs-string">&#x27;8088&#x27;</span>,<span class="hljs-function">()=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;express server running at http://127.0.0.1:8088&#x27;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="定义多个局部中间件，代码示例如下："><a href="#定义多个局部中间件，代码示例如下：" class="headerlink" title="定义多个局部中间件，代码示例如下："></a>定义多个局部中间件，代码示例如下：</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *定义多个局部中间件</span><br><span class="hljs-comment"> * */</span><br><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>)<br><span class="hljs-keyword">const</span> app = express()<br><span class="hljs-keyword">const</span> ct1 = <span class="hljs-function">(<span class="hljs-params">req,res,next</span>)=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;第一个局部中间件函数&#x27;</span>)<br>  next()<br>&#125;<br><span class="hljs-keyword">const</span> ct2 = <span class="hljs-function">(<span class="hljs-params">req,res,next</span>)=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;第二个局部中间件函数&#x27;</span>)<br>    next()<br>&#125;<br><span class="hljs-keyword">const</span> ct3 = <span class="hljs-function">(<span class="hljs-params">req,res,next</span>)=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;第三个局部中间件函数&#x27;</span>)<br>    next()<br>&#125;<br><span class="hljs-keyword">const</span> ct4 = <span class="hljs-function">(<span class="hljs-params">req,res,next</span>)=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;第四个局部中间件函数&#x27;</span>)<br>    next()<br>&#125;<br><span class="hljs-comment">//定义路由</span><br>app.get(<span class="hljs-string">&#x27;/&#x27;</span>,ct1,ct2, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>    res.send(<span class="hljs-string">&#x27;home page&#x27;</span>)<br>&#125;)<br>app.post(<span class="hljs-string">&#x27;/user&#x27;</span>,[ct3,ct4], <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>    res.send(<span class="hljs-string">&#x27;user page&#x27;</span>)<br>&#125;)<br>app.listen(<span class="hljs-string">&#x27;8088&#x27;</span>,<span class="hljs-function">()=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;express server running at http://127.0.0.1:8088&#x27;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="使用中间件的注意事项"><a href="#使用中间件的注意事项" class="headerlink" title="使用中间件的注意事项"></a>使用中间件的注意事项</h3></li><li>一定要在<strong>路由之前</strong>注册中间件</li><li>客户端发送过来的请求，<strong>可以连续调用多个</strong>中间件进行处理</li><li>执行完中间件的业务代码之后，<strong>不要忘记调用next()函数</strong></li><li>为了<strong>防止代码逻辑混乱</strong>，调用<strong>next()函数之后不要再写额外的代码</strong></li><li>连续调用多个中间件时，多个中间件之间，共享 req 和 res 对象<h3 id="中间件的分类"><a href="#中间件的分类" class="headerlink" title="中间件的分类"></a>中间件的分类</h3></li><li><strong>注意:除了错误级别的中间件，其他的中间件必须在路由之前配置</strong><h4 id="应用级别的中间件"><a href="#应用级别的中间件" class="headerlink" title="应用级别的中间件"></a>应用级别的中间件</h4></li><li>通过 app.use()或者app.get()或app.post() <strong>绑定在app示例上的中间件</strong>，叫做应用级别的中间件<h4 id="路由级别的中间件"><a href="#路由级别的中间件" class="headerlink" title="路由级别的中间件"></a>路由级别的中间件</h4></li><li>绑定到 express.Router() 实例上的中间件，叫做路由级别的中间件，它的用法和应用级别的中间件没有任何区别，只不过，<strong>应用级别的中间件绑定在app实例上，路由级别的中间件绑定在router实例上</strong><h4 id="错误级别的中间件"><a href="#错误级别的中间件" class="headerlink" title="错误级别的中间件"></a>错误级别的中间件</h4></li><li>作用： 专门用来捕获整个项目中发生的异常错误，从而防止项目异常崩溃的问题</li><li>格式： 错误级别中间件中的function处理函数中，<strong>必须有4个形参</strong>，形参顺序从前到后，分别是(err,req,res,next).</li><li>注意： <strong>错误级别的中间件，必须注册在所有路由之后</strong></li><li>代码实例如下：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 错误级别中间件</span><br><span class="hljs-comment"> * **/</span><br><span class="hljs-keyword">const</span>  express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>)<br><span class="hljs-keyword">const</span> app = express()<br><span class="hljs-comment">//1.定义路由</span><br>app.get(<span class="hljs-string">&#x27;/&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">req,res</span>)=&gt;</span>&#123;<br><span class="hljs-comment">//   人为制造错误</span><br>    <span class="hljs-keyword">throw</span>  <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">&#x27;服务器内部出现error&#x27;</span>)<br>    res.send(<span class="hljs-string">&#x27;home page&#x27;</span>)<br>&#125;)<br><span class="hljs-comment">//2.定义错误级别的中间件,捕获整个项目中的异常错误，从而防止程序的崩溃</span><br>app.use(<span class="hljs-function">(<span class="hljs-params">err,req,res,next</span>)=&gt;</span>&#123;<br>    <span class="hljs-comment">//2.1 在服务器中打印错误</span><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;发生了错误&#x27;</span>+err.message)<br>    <span class="hljs-comment">//2.2 向客户端响应错误相关的内容</span><br>    res.send(<span class="hljs-string">&#x27;Error&#x27;</span>+err.message)<br>&#125;)<br><span class="hljs-comment">//调用 app.listen 方法，指定端口号，启动web服务器</span><br>app.listen(<span class="hljs-string">&#x27;8088&#x27;</span>,<span class="hljs-function">()=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;express server running at http://127.0.0.1:8088&#x27;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><h4 id="Express的内置中间件"><a href="#Express的内置中间件" class="headerlink" title="Express的内置中间件"></a>Express的内置中间件</h4></li></ul><ol><li><strong>express.static</strong> 快速托管静态资源的内部中间件，例如：HTML文件，图片，CSS样式等（无兼容性）</li><li><strong>express.json</strong> 解析JSON格式的请求体数据，（有兼容性，仅在4.16.0+ 版本中使用）</li><li><strong>express.urlencoded</strong> 解析 URL-encoded 格式的请求体数据（有兼容性，仅在4.16.0+ 版本中使用）<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 内置中间件的使用 express.json()和express.urlencoded(&#123;extended:false&#125;)</span><br><span class="hljs-comment"> * **/</span><br><span class="hljs-keyword">const</span>  express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>)<br><span class="hljs-keyword">const</span> app = express()<br><span class="hljs-comment">//注意:除了错误级别的中间件，其他的中间件必须在路由之前配置</span><br><span class="hljs-comment">// 通过express.json 这个中间件。解析表单中json 格式的数据</span><br><span class="hljs-comment">// 通过express.urlencoded()这个中间件，来解析表单中url-encoded 格式的数据（解析 x-www-form-urlencoded 格式的表单数据）</span><br>app.use(express.json())<br>app.use(express.urlencoded(&#123;<span class="hljs-attr">extended</span>:<span class="hljs-literal">false</span>&#125;))<br><br>app.post(<span class="hljs-string">&#x27;/user&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">req,res</span>)=&gt;</span>&#123;<br>    <span class="hljs-comment">//在服务器中，可以使用 req.body 这个属性，来接收客户端发送过来的请求体数据</span><br>    <span class="hljs-comment">//默认情况下，如果不配置解析表单数据的中间件，则req.body 默认等于 undefined</span><br>    <span class="hljs-built_in">console</span>.log(req.body)<br>    res.send(<span class="hljs-string">&#x27;ok&#x27;</span>)<br>&#125;)<br>app.post(<span class="hljs-string">&#x27;/book&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">req,res</span>)=&gt;</span>&#123;<br>    <span class="hljs-comment">//在服务器中，可以使用 req.body 这个属性，来接收客户端发送过来的请求体数据 和url-encoded 格式的数据</span><br><br>    <span class="hljs-built_in">console</span>.log(req.body)<br>    res.send(<span class="hljs-string">&#x27;bookok&#x27;</span>)<br>&#125;)<br><span class="hljs-comment">//调用 app.listen 方法，指定端口号，启动web服务器</span><br>app.listen(<span class="hljs-string">&#x27;8088&#x27;</span>,<span class="hljs-function">()=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;express server running at http://127.0.0.1:8088&#x27;</span>)<br>&#125;)<br><br></code></pre></td></tr></table></figure><h4 id="第三方的中间件"><a href="#第三方的中间件" class="headerlink" title="第三方的中间件"></a>第三方的中间件</h4></li></ol><ul><li>非Express 官方内置的，而是由第三方提供出来的中间件，叫做第三方中间件，在项目中大家可以按需下载并配置第三方中间件，从而提高项目的开发效率</li><li>例如使用body-parser 第三方中间件解析请求体数据</li><li>输入 npm install body-parser 安装中间件</li><li>使用require导入中间件</li><li>调用 app.use ()注册并使用中间件</li><li>使用方法如下：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span>  express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>)<br><span class="hljs-keyword">const</span> app = express()<br><span class="hljs-comment">//1导入解析数据的中间件body-parser</span><br><span class="hljs-keyword">const</span> parser = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;body-parser&#x27;</span>)<br><span class="hljs-comment">// 2.使用app.use 注册中间件</span><br>app.use(parser.urlencoded(&#123;<span class="hljs-attr">extended</span>:<span class="hljs-literal">false</span>&#125;))<br><br>app.post(<span class="hljs-string">&#x27;/book&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">req,res</span>)=&gt;</span>&#123;<br>    <span class="hljs-comment">//，如果不配置解析表单数据的中间件，则req.body 默认等于 undefined</span><br>    <span class="hljs-built_in">console</span>.log(req.body)<br>    res.send(<span class="hljs-string">&#x27;ok1&#x27;</span>)<br>&#125;)<br><span class="hljs-comment">//调用 app.listen 方法，指定端口号，启动web服务器</span><br>app.listen(<span class="hljs-string">&#x27;8088&#x27;</span>,<span class="hljs-function">()=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;express server running at http://127.0.0.1:8088&#x27;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="自定义中间件"><a href="#自定义中间件" class="headerlink" title="自定义中间件"></a>自定义中间件</h3></li><li>在文件目录下创建两个js文件，自定义模块化拆分.js 和 conmon-body-parser.js</li><li>在 自定义模块化拆分.js 文件中导入封装的中间件<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>)<br><span class="hljs-keyword">const</span> app = express()<br><span class="hljs-comment">// 1.导入之间封装的中间件</span><br><span class="hljs-keyword">const</span> custbodyparser =<span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./conmon-body-parser&#x27;</span>)<br><span class="hljs-comment">// 2.将自定义的中间件，注册为全局可用的中间件</span><br>app.use(custbodyparser)<br>app.post(<span class="hljs-string">&#x27;/book&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>    res.send(req.body)<br>&#125;)<br>app.listen(<span class="hljs-string">&#x27;8088&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;express server running at http://127.0.0.1:8088&#x27;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure></li><li>在conmon-body-parser.js文件中进行封装中间件<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 导入node.js 内置的 querystring 模块</span><br><span class="hljs-keyword">const</span> qs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;querystring&#x27;</span>)<br><span class="hljs-keyword">const</span> bodyparser = <span class="hljs-function">(<span class="hljs-params">req, res, next</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// 1.定义一个str字符串，专门用来存储客户端发送过来的请求数据</span><br>    <span class="hljs-keyword">let</span> str = <span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-comment">// 2.监听req 的data事件</span><br>    req.on(<span class="hljs-string">&#x27;data&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">chunk</span>) =&gt;</span> &#123;<br>        str += chunk<br>    &#125;)<br>    <span class="hljs-comment">// 3.监听req的 end事件</span><br>    req.on(<span class="hljs-string">&#x27;end&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-comment">//在 str中存放的是完整的请求体数据</span><br>        <span class="hljs-built_in">console</span>.log(str)<br>        <span class="hljs-comment">//    todo:把字符串格式的请求体数据，解析成对象格式</span><br>        <span class="hljs-keyword">const</span> body = qs.parse(str)<br>        <span class="hljs-built_in">console</span>.log(body)<br>        req.body = body<br>        next()<br>    &#125;)<br>&#125;<br><span class="hljs-built_in">module</span>.exports=bodyparser<br><br></code></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Node.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node.js 知识整理（二）</title>
      <link href="/2022/08/12/Node.js%20%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86%EF%BC%88%E4%BA%8C)/"/>
      <url>/2022/08/12/Node.js%20%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86%EF%BC%88%E4%BA%8C)/</url>
      
        <content type="html"><![CDATA[<h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><h3 id="模块的加载机制"><a href="#模块的加载机制" class="headerlink" title="模块的加载机制"></a>模块的加载机制</h3><ul><li>优先从缓存中加载<blockquote><p>模块在第一次加载后会被缓存，<br>注意：不论是内置模块。自定义模块，第三方模块，他们都会优先从缓存中加载，从而<strong>提高模块的加载效率</strong></p></blockquote></li><li><strong>内置模块</strong>的加载机制<blockquote><p>内置模块由node.js 官方提供的模块，<strong>内置模块的加载优先级最高</strong></p></blockquote></li><li>自定义模块的加载机制<blockquote><p>使用 require() 加载自定义模块时，必须指定./ 或 ../ 开头的路径标识符，在加载自定义模块时，如果没有./ 或 ../ 这样的路径标识符，node会把它当成内置模块或第三方模块进行加载<br>在 require() 导入自定义模块时，如果省略了文件的扩展名，则Node.js会按照顺序分别尝试加载以下的文件</p><blockquote><p>1.按照确切的文件名加载<br>2.补全.js扩展名进行加载<br>3.补全.json扩展名进行加载<br>4.补全.node扩展名进行加载<br>5.加载失败，终端报错</p></blockquote></blockquote></li><li>第三方模块的加载机制<blockquote><p>如果没有找到对应的第三方模块，则移动到再上一层父目录中，进行加载，直到文件系统的根目录</p></blockquote><h2 id="Express"><a href="#Express" class="headerlink" title="Express"></a>Express</h2></li><li>Express是基于node.js的平台，快速，开放，极简的web前端框架</li><li>本质: 是npm 的第三方包，提供了快速创建web服务器的便捷方法</li><li>中文官网：<a href="https://www.expressjs.com.cn/">https://www.expressjs.com.cn</a></li><li>安装命令：npm install express –save<h3 id="Express-能做什么？？"><a href="#Express-能做什么？？" class="headerlink" title="Express 能做什么？？"></a>Express 能做什么？？</h3></li><li>使用 Express 我们可以方便，快速的创建Web网站的服务器和API接口的服务器<h3 id="创建基本的服务器"><a href="#创建基本的服务器" class="headerlink" title="创建基本的服务器"></a>创建基本的服务器</h3></li><li>前提： 安装了 express<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 1.导入 Express</span><br><span class="hljs-keyword">const</span> express =<span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>)<br><span class="hljs-comment">// 2. 创建web服务器</span><br><span class="hljs-keyword">const</span> app = express()<br><span class="hljs-comment">// 3. 调用app.listen(端口号，启动成功的回调函数) 启动web服务器</span><br>app.listen(<span class="hljs-number">8088</span>,<span class="hljs-function">()=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;express server running at http://127.0.0.1:8088&#x27;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="监听-GET-请求-和-POST-请求"><a href="#监听-GET-请求-和-POST-请求" class="headerlink" title="监听 GET 请求 和  POST 请求"></a>监听 GET 请求 和  POST 请求</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 1.导入 Express</span><br><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>)<br><span class="hljs-comment">// 2. 创建web服务器</span><br><span class="hljs-keyword">const</span> app = express()<br><span class="hljs-comment">// 4. 监听客户端的 GET 和 POST 请求，并向客户端响应具体的内容</span><br>app.get(<span class="hljs-string">&#x27;/user&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br><span class="hljs-comment">//调用express 提供的res.send() 方法，向客户端响应一个JSON 对象</span><br>    res.send(&#123;<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;lfh&#x27;</span>,<br>        <span class="hljs-attr">age</span>: <span class="hljs-number">29</span>,<br>        <span class="hljs-attr">gender</span>: <span class="hljs-string">&#x27;男&#x27;</span><br>    &#125;)<br>&#125;)<br>app.post(<span class="hljs-string">&#x27;/user&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">//调用express 提供的res.send() 方法，向客户端响应一个文本字符</span><br>    res.send(<span class="hljs-string">&#x27;请求成功&#x27;</span>)<br>&#125;)<br><span class="hljs-comment">// 3. 调用app.listen(端口号，启动成功的回调函数) 启动web服务器</span><br>app.listen(<span class="hljs-number">8088</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;express server running at http://127.0.0.1:8088&#x27;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="如何获取url-中传递的参数呢？"><a href="#如何获取url-中传递的参数呢？" class="headerlink" title="如何获取url 中传递的参数呢？"></a>如何获取url 中传递的参数呢？</h3><h4 id="通过req-query-对象可以访问到客户端通过查询字符串的形式，发送到服务器到参数"><a href="#通过req-query-对象可以访问到客户端通过查询字符串的形式，发送到服务器到参数" class="headerlink" title="通过req.query 对象可以访问到客户端通过查询字符串的形式，发送到服务器到参数"></a>通过req.query 对象可以访问到客户端通过查询字符串的形式，发送到服务器到参数</h4></li><li>注意： <strong>默认情况下，req.requry是一个空对象{}</strong><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/*在浏览器中请求接口</span><br><span class="hljs-comment">* http://127.0.0.1:8088/?user=za&amp;age=20</span><br><span class="hljs-comment">* 页面显示：&#123;&quot;user&quot;:&quot;za&quot;,&quot;age&quot;:&quot;20&quot;&#125;</span><br><span class="hljs-comment">* */</span><br><span class="hljs-comment">// 1.导入 Express</span><br><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>)<br><span class="hljs-comment">// 2. 创建web服务器</span><br><span class="hljs-keyword">const</span> app = express()<br><span class="hljs-comment">//获取url 中传递的参数呢</span><br>app.get(<span class="hljs-string">&#x27;/&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">req,res</span>)=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(req.query)<br>    <span class="hljs-comment">//通过req.query 可以获取到客户端发送过来到查询参数</span><br>    <span class="hljs-comment">//注意： 默认情况下，req.requry是一个空对象&#123;&#125;</span><br>    res.send(req.query)<br>&#125;)<br><span class="hljs-comment">// 3. 调用app.listen(端口号，启动成功的回调函数) 启动web服务器</span><br>app.listen(<span class="hljs-number">8088</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;express server running at http://127.0.0.1:8088&#x27;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><h4 id="通过req-params-对象，可以访问到-url-中通过-匹配-到的动态参数"><a href="#通过req-params-对象，可以访问到-url-中通过-匹配-到的动态参数" class="headerlink" title="通过req.params 对象，可以访问到 url 中通过 : 匹配 到的动态参数"></a>通过req.params 对象，可以访问到 url 中通过 : 匹配 到的动态参数</h4></li><li>注意： 默认情况下，req.params是一个空对象{},里面存放这通过 : 动态匹配到参数值<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 浏览器输入 http://127.0.0.1:8088/user/1</span><br><span class="hljs-comment"> * 页面显示：&#123;&quot;id&quot;:&quot;1&quot;&#125;</span><br><span class="hljs-comment"> * **/</span><br><span class="hljs-comment">// 1.导入 Express</span><br><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>)<br><span class="hljs-comment">// 2. 创建web服务器</span><br><span class="hljs-keyword">const</span> app = express()<br><span class="hljs-comment">//获取通过 : 动态匹配到参数值</span><br><span class="hljs-comment">// :id是一个动态的参数,也可以访问多个 /user/:id/:name</span><br>app.get(<span class="hljs-string">&#x27;/user/:id&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">req,res</span>)=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(req.params)<br>    <span class="hljs-comment">//注意： 默认情况下，req.params是一个空对象&#123;&#125;,里面存放这通过 : 动态匹配到参数值</span><br>    res.send(req.params)<br>&#125;)<br><span class="hljs-comment">// 3. 调用app.listen(端口号，启动成功的回调函数) 启动web服务器</span><br>app.listen(<span class="hljs-number">8088</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;express server running at http://127.0.0.1:8088&#x27;</span>)<br>&#125;)<br><br></code></pre></td></tr></table></figure><h4 id="托管静态资源（-express-static-）"><a href="#托管静态资源（-express-static-）" class="headerlink" title="托管静态资源（ express.static() ）"></a>托管静态资源（ express.static() ）</h4></li><li>注意： Express 在<strong>指定的</strong>的静态目录中查找文件，并对外提供资源的访问路径，因此 <strong>存放静态文件的目录名不会存在url中</strong></li><li>如果要托管多个静态资源目录，请多次调用express.static() 函数<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span>  express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>)<br><span class="hljs-keyword">const</span> app = express()<br><span class="hljs-comment">// 使用express.static() 方法，快速的对外提供静态资源</span><br>app.use(express.static(<span class="hljs-string">&#x27;public&#x27;</span>))<br>app.use(express.static(<span class="hljs-string">&#x27;fiels&#x27;</span>))<br>app.listen(<span class="hljs-number">8081</span>,<span class="hljs-function">()=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;express server running http://127.0.0.1:8081&#x27;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">app.use(express.static(<span class="hljs-string">&#x27;public&#x27;</span>))<br>app.use(express.static(<span class="hljs-string">&#x27;files&#x27;</span>))<br></code></pre></td></tr></table></figure></li><li>访问静态资源时，express.static() 函数会根据目录的添加顺序查找所需的文件<h4 id="挂载路径前缀"><a href="#挂载路径前缀" class="headerlink" title="挂载路径前缀"></a>挂载路径前缀</h4></li><li>如果希望在托管的静态资源访问路径之前，挂载路径前缀，则可以用如下的方式<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">app.use(<span class="hljs-string">&#x27;/public&#x27;</span>,express.static(<span class="hljs-string">&#x27;public&#x27;</span>))<br></code></pre></td></tr></table></figure><h3 id="nodemon-自动重启项目"><a href="#nodemon-自动重启项目" class="headerlink" title="nodemon (自动重启项目)"></a>nodemon (自动重启项目)</h3></li><li>安装命令: npm install -g nodemon <h2 id="express-路由"><a href="#express-路由" class="headerlink" title="express 路由"></a>express 路由</h2></li><li>在express中路由指的是 客户端的请求 与服务器处理函数 之间的映射关系</li><li>express 的路由由三部分组成，分别是，请求的类型，请求的url地址，处理函数，格式如下<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">app.METHOD(PATH,HANDLER)<br></code></pre></td></tr></table></figure><h3 id="路由的匹配过程"><a href="#路由的匹配过程" class="headerlink" title="路由的匹配过程"></a>路由的匹配过程</h3></li><li>每当一个请求到达服务器后，<strong>需要先经过路由的匹配</strong> 只有匹配成功时，才会调用对应的 处理函数</li><li>在匹配时，会按照路由的顺序进行匹配，如果<strong>请求类型</strong>和<strong>请求url</strong> 同时匹配成功，则 express 会将这次请求，转交给对应的function 函数进行处理。</li><li><img src="https://linmuhan.gitee.io/images/expressrouter.png" alt="avatar"><h3 id="路由最简单的方式"><a href="#路由最简单的方式" class="headerlink" title="路由最简单的方式"></a>路由最简单的方式</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span>  express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>)<br><span class="hljs-keyword">const</span> app = express()<br><span class="hljs-comment">// 挂载路由</span><br>app.get(<span class="hljs-string">&#x27;/&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">req,res</span>)=&gt;</span>&#123;<br>    res.send(<span class="hljs-string">&#x27;get请求&#x27;</span>)<br>&#125;)<br>app.post(<span class="hljs-string">&#x27;/login&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">req,res</span>)=&gt;</span>&#123;<br>    res.send(<span class="hljs-string">&#x27;post请求&#x27;</span>)<br>&#125;)<br>app.listen(<span class="hljs-number">8086</span>,<span class="hljs-function">()=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;http://127.0.0.1:8086&#x27;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="路由模块化"><a href="#路由模块化" class="headerlink" title="路由模块化"></a>路由模块化</h3><h4 id="将路由抽离成单独模块的步骤如下-创建路由模块"><a href="#将路由抽离成单独模块的步骤如下-创建路由模块" class="headerlink" title="将路由抽离成单独模块的步骤如下(创建路由模块)"></a>将路由抽离成单独模块的步骤如下(创建路由模块)</h4></li></ul><ol><li>创建路由对应的.js文件</li><li>调用<strong>express.Roter()</strong> 函数，创建路由对象</li><li>向路由对象挂载具体的路由</li><li>使用module.exports 向外共享路由对象</li><li>使用app.use() 函数注册路由模块<h3 id="注册路由模块"><a href="#注册路由模块" class="headerlink" title="注册路由模块"></a>注册路由模块</h3></li></ol><ul><li>导入路由模块： const router = require(‘router’)</li><li>注册路由模块： app.use(router)<h3 id="为路由模块添加前缀"><a href="#为路由模块添加前缀" class="headerlink" title="为路由模块添加前缀"></a>为路由模块添加前缀</h3></li><li> app.use(‘/api’,router)<h3 id="例子：-路由模块是一个js文件，注册路由是一个js文件"><a href="#例子：-路由模块是一个js文件，注册路由是一个js文件" class="headerlink" title="例子： 路由模块是一个js文件，注册路由是一个js文件"></a>例子： 路由模块是一个js文件，注册路由是一个js文件</h3></li><li>router.js<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 路由模块</span><br><span class="hljs-comment"> * **/</span><br><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>)<br><span class="hljs-keyword">const</span> router = express.Router()<br><span class="hljs-comment">//挂载具体的路由</span><br>router.get(<span class="hljs-string">&#x27;/user&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">req,res</span>)=&gt;</span>&#123;<br>    res.send(<span class="hljs-string">&#x27;get user&#x27;</span>)<br>&#125;)<br>router.post(<span class="hljs-string">&#x27;/user/delete&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">req,res</span>)=&gt;</span>&#123;<br>    res.send(<span class="hljs-string">&#x27;/user/delete&#x27;</span>)<br>&#125;)<br><br><span class="hljs-built_in">module</span>.exports = router<br></code></pre></td></tr></table></figure></li><li>index.js<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 注册路由</span><br><span class="hljs-comment"> * **/</span><br>    <span class="hljs-keyword">const</span>  express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>)<br>    <span class="hljs-keyword">const</span>  app =express()<br>    <span class="hljs-comment">//1.导入路由模块</span><br>    <span class="hljs-keyword">const</span> router = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;router&#x27;</span>)<br>    <span class="hljs-comment">//2.注册路由模块</span><br>    <span class="hljs-comment">// 注意： app.use() 函数的作用就是来注册中间件</span><br>    <span class="hljs-comment">// app.use(router)</span><br>    app.use(<span class="hljs-string">&#x27;/api&#x27;</span>,router) <span class="hljs-comment">//为路由模块添加前缀</span><br>    app.listen(<span class="hljs-number">8087</span>,<span class="hljs-function">()=&gt;</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;http://127.0.0.1:8087&#x27;</span>)<br>    &#125;)<br></code></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Node.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node.js知识整理（一）</title>
      <link href="/2022/08/09/Node.js%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2022/08/09/Node.js%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="使用readFile读取文件内容"><a href="#使用readFile读取文件内容" class="headerlink" title="使用readFile读取文件内容"></a>使用readFile读取文件内容</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//1导入fs文件，来操作文件</span><br><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>)<br><span class="hljs-comment">//2.调用fs.readFile()方法读取文件</span><br><span class="hljs-comment">//参数1：读取文件的存放路径:./files/demo1.txt</span><br><span class="hljs-comment">//参数2： 读取文件时候采用的编码格式，一般默认制定utf8</span><br><span class="hljs-comment">//参数3： 回调函数，拿到读取失败和成功的结果 err(失败结果) dataStr（成功结果）</span><br>fs.readFile(<span class="hljs-string">&#x27;./files/demo1.txt&#x27;</span>,<span class="hljs-string">&#x27;utf8&#x27;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">err,dataStr</span>) </span>&#123;<br>    <span class="hljs-comment">//2.1打印失败结果，</span><br>    <span class="hljs-comment">// 如果读取成功，err的值为null</span><br>    <span class="hljs-comment">// 如果读取失败，则err的值为错误对象，dataStr的值为undefined</span><br>    <span class="hljs-keyword">if</span>(err)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;文件读取失败&#x27;</span>+ err)<br>    &#125;<br>    <span class="hljs-comment">//2.2打印成功结果</span><br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;文件读取成功&#x27;</span>+dataStr)<br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="使用writeFile方法向指定的文件中插入内容"><a href="#使用writeFile方法向指定的文件中插入内容" class="headerlink" title="使用writeFile方法向指定的文件中插入内容"></a>使用writeFile方法向指定的文件中插入内容</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//  1.导入fs 系统模块</span><br><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>)<br><span class="hljs-comment">//  2.调用fs.writeFile() 方法，创建写入文件内容（只能用来创建文件不能用来创建路径）重复调用fs.writeFile()方法会覆盖之前的内容</span><br><span class="hljs-comment">//      参数1：表示文件的存放路径:./files/demo2.txt</span><br><span class="hljs-comment">//      参数2： 表示要写入的内容: kiku</span><br><span class="hljs-comment">//      参数3：回调函数</span><br>fs.writeFile(<span class="hljs-string">&#x27;./files/demo2.txt&#x27;</span>, <span class="hljs-string">&#x27;kiku&#x27;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">err</span>) </span>&#123;<br>    <span class="hljs-comment">//2.1 如果文件写入成功，err返回为null</span><br>    <span class="hljs-comment">//2.2 如果文件写入失败，err的值会是一个错误对象</span><br>    <span class="hljs-comment">// console.log(err)</span><br>    <span class="hljs-keyword">if</span>(err)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;文件写入失败&#x27;</span>,err)<br>    &#125;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;文件写入成功&#x27;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="路径问题处理"><a href="#路径问题处理" class="headerlink" title="路径问题处理"></a>路径问题处理</h2><h3 id="问题—"><a href="#问题—" class="headerlink" title="问题—-"></a>问题—-</h3><ul><li>问题：在使用fs模块操作文件时，如果提供的文件路径是./或者../的相对路径时，很容易出现路径动态拼接错误的问题</li><li>问题出现原因： 代码在运行的时候，会执行node命令所处的目录，动态拼接出被操作文件的完整路径<h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3></li><li>可以直接提供一个完整的文件存放路径（移植性差，不方便维护）<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span>  fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>)<br>fs.readFile(<span class="hljs-string">&#x27;/Users/WebstormProjects/nodeTEST/files/demo1.txt&#x27;</span>,<span class="hljs-string">&#x27;utf8&#x27;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">err,data</span>) </span>&#123;<br>    <span class="hljs-keyword">if</span>(err)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">console</span>.log(err)<br>    &#125;<br>    <span class="hljs-built_in">console</span>.log(data)<br>&#125;)<br></code></pre></td></tr></table></figure></li><li><strong>__dirname</strong> 表示当前文件所处目录<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span>  fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>)<br><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;path&quot;</span>)<br><span class="hljs-comment">// 拼接路径要用path.join,不要使用+,如果路径格式不对，会导致错误用+ &#x27;/files/demo1.txt&#x27; 和&#x27;./files/demo1.txt&#x27;不一样，path.join会直接过滤.字符</span><br><span class="hljs-comment">//path.join(__dirname,&#x27;files/demo1.txt&#x27;)</span><br><span class="hljs-comment">//__dirname+&#x27;/files/demo1.txt&#x27;</span><br>fs.readFile(path.join(__dirname,<span class="hljs-string">&#x27;/files/demo1.txt&#x27;</span>),<span class="hljs-string">&#x27;utf8&#x27;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">err,data</span>) </span>&#123;<br>    <span class="hljs-keyword">if</span>(err)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">console</span>.log(err)<br>    &#125;<br>    <span class="hljs-built_in">console</span>.log(data)<br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="path-join-方法-path-basename-方法-path-extname-方法"><a href="#path-join-方法-path-basename-方法-path-extname-方法" class="headerlink" title="path.join()方法,path.basename()方法,path.extname()方法"></a>path.join()方法,path.basename()方法,path.extname()方法</h2><h3 id="path-join-拼接路径"><a href="#path-join-拼接路径" class="headerlink" title="path.join():拼接路径"></a>path.join():拼接路径</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> fs =<span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>)<br><span class="hljs-keyword">const</span>  path =<span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>)<br><span class="hljs-comment">//注意： ../会抵消前面的路径</span><br><span class="hljs-keyword">const</span>  pathStr = path.join(<span class="hljs-string">&#x27;/a&#x27;</span>,<span class="hljs-string">&#x27;b/c/d&#x27;</span>,<span class="hljs-string">&#x27;../&#x27;</span>,<span class="hljs-string">&#x27;e&#x27;</span>)<br><span class="hljs-built_in">console</span>.log(pathStr) <span class="hljs-comment">///a/b/c/e</span><br><span class="hljs-keyword">const</span>  pathData = path.join(<span class="hljs-string">&#x27;/a&#x27;</span>,<span class="hljs-string">&#x27;b/c/d&#x27;</span>,<span class="hljs-string">&#x27;../../&#x27;</span>,<span class="hljs-string">&#x27;e&#x27;</span>)<br><span class="hljs-built_in">console</span>.log(pathData) <span class="hljs-comment">///a/b/e</span><br>fs.readFile(path.join(__dirname,<span class="hljs-string">&#x27;/files/demo1.txt&#x27;</span>),<span class="hljs-string">&#x27;utf8&#x27;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">err,data</span>)</span>&#123;<br>    <span class="hljs-keyword">if</span>(err)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">console</span>.log(err)<br>    &#125;<br>    <span class="hljs-built_in">console</span>.log(data)<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="path-basename-获取文件名称"><a href="#path-basename-获取文件名称" class="headerlink" title="path.basename():获取文件名称"></a>path.basename():获取文件名称</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//path.basename()方法可以从一个文件路径中获取文件的名称部分</span><br><span class="hljs-comment">//参数1：文件路径（必传）</span><br><span class="hljs-comment">//参数2：文件扩展名（非必传，如果不需要文件扩展名可传）</span><br><span class="hljs-comment">//path.basename(&#x27;文件路径:&#x27;,&#x27;文件扩展名&#x27;)</span><br><span class="hljs-keyword">const</span>  path= <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>)<br><span class="hljs-comment">//定义文件的存放路径</span><br><span class="hljs-keyword">const</span> fpath = <span class="hljs-string">&#x27;/Users/jiangdi/WebstormProjects/nodeTEST/files/demo2.txt&#x27;</span><br><span class="hljs-keyword">const</span> fname = path.basename(fpath)<br><span class="hljs-built_in">console</span>.log(fname) <span class="hljs-comment">//demo2.txt</span><br><span class="hljs-keyword">const</span> fname1 = path.basename(fpath,<span class="hljs-string">&#x27;.txt&#x27;</span>)<br><span class="hljs-built_in">console</span>.log(fname1)<span class="hljs-comment">//demo2</span><br></code></pre></td></tr></table></figure><h3 id="path-extname-获取文件后缀名"><a href="#path-extname-获取文件后缀名" class="headerlink" title="path.extname():获取文件后缀名"></a>path.extname():获取文件后缀名</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//path.extname()</span><br><span class="hljs-comment">// 参数：文件路径（必传）</span><br><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>)<br><span class="hljs-keyword">const</span> fpath =<span class="hljs-string">&#x27;/a/b/c/index.html&#x27;</span> <span class="hljs-comment">//文件存放路径：/a/b/c/index.html</span><br><span class="hljs-keyword">const</span> ext= path.extname(fpath)<br><span class="hljs-built_in">console</span>.log(ext)<span class="hljs-comment">//.html</span><br></code></pre></td></tr></table></figure><h2 id="创建web服务器"><a href="#创建web服务器" class="headerlink" title="创建web服务器"></a>创建web服务器</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 1.导入http模块</span><br><span class="hljs-keyword">const</span> http =<span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;http&#x27;</span>)<br><span class="hljs-comment">//  2.创建web服务器实例</span><br><span class="hljs-keyword">const</span> server = http.createServer()<br><span class="hljs-comment">//  3.为服务器实例绑定request事件，监听客户端的请求</span><br>server.on(<span class="hljs-string">&#x27;request&#x27;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">req,res</span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;Someone visit our web servers.&#x27;</span>)<br>&#125;)<br><span class="hljs-comment">//  4.启动服务器：8080配置端口</span><br>server.listen(<span class="hljs-number">8080</span>,<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;server running at http://127.0.0.1:8080&#x27;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="了解http中req请求对象和res响应"><a href="#了解http中req请求对象和res响应" class="headerlink" title="了解http中req请求对象和res响应"></a>了解http中req请求对象和res响应</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;http&#x27;</span>)<br><span class="hljs-keyword">const</span> server = http.createServer()<br><span class="hljs-comment">//req是请求对象，包含了与客户端相关的数据和对象</span><br>server.on(<span class="hljs-string">&#x27;request&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req,res</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// req.url 客户端请求的URL地址</span><br>    <span class="hljs-keyword">const</span> url = req.url<br><span class="hljs-comment">//    req.method 是客户端请求的method类型</span><br>    <span class="hljs-keyword">const</span> method = req.method<br>    <span class="hljs-keyword">const</span> str = <span class="hljs-string">`You request url is <span class="hljs-subst">$&#123;url&#125;</span> and request method is <span class="hljs-subst">$&#123;method&#125;</span>`</span><br>    <span class="hljs-built_in">console</span>.log(str)<br><span class="hljs-comment">//    调用res.end() ，向客户端响应一些内容</span><br>    res.end(str)<br>&#125;)<br>server.listen(<span class="hljs-number">8081</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;server running at http://127.0.0.1:8081&#x27;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="解决http中文乱码问题"><a href="#解决http中文乱码问题" class="headerlink" title="解决http中文乱码问题"></a>解决http中文乱码问题</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;http&#x27;</span>)<br><span class="hljs-keyword">const</span> server = http.createServer()<br><span class="hljs-comment">//req是请求对象，包含了与客户端相关的数据和对象</span><br>server.on(<span class="hljs-string">&#x27;request&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req,res</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// req.url 客户端请求的URL地址</span><br>    <span class="hljs-keyword">const</span> url = req.url<br><span class="hljs-comment">//    req.method 是客户端请求的method类型</span><br>    <span class="hljs-keyword">const</span> method = req.method<br>    <span class="hljs-keyword">const</span> str = <span class="hljs-string">`你请求的url是 <span class="hljs-subst">$&#123;url&#125;</span> 请求的方法是 <span class="hljs-subst">$&#123;method&#125;</span>`</span><br>    <span class="hljs-built_in">console</span>.log(str)<br>    <span class="hljs-comment">// 调用 res.setHeader()方法，设置Content-Type响应头，解决中文乱码的问题</span><br>    res.setHeader(<span class="hljs-string">&#x27;Content-type&#x27;</span>,<span class="hljs-string">&#x27;text/html;charset=utf-8&#x27;</span>)<br>    <span class="hljs-comment">// 调用res.end() ，将响应返回给客户端</span><br>    res.end(str)<br>&#125;)<br>server.listen(<span class="hljs-number">80</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;server running at http://127.0.0.1&#x27;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="根据不同的url响应不同的内容"><a href="#根据不同的url响应不同的内容" class="headerlink" title="根据不同的url响应不同的内容"></a>根据不同的url响应不同的内容</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//导入http模块</span><br><span class="hljs-keyword">const</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;http&#x27;</span>)<br><span class="hljs-comment">//创建服务器</span><br><span class="hljs-keyword">const</span> server = http.createServer()<br><span class="hljs-comment">// 监听web服务器的 request 事件</span><br>server.on(<span class="hljs-string">&#x27;request&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">req,res</span>)=&gt;</span>&#123;<br><span class="hljs-comment">//   1.获取请求的url地址</span><br>    <span class="hljs-keyword">const</span> url =req.url<br><span class="hljs-comment">//   2.设置默认响应的内容为 404 not found</span><br>    <span class="hljs-keyword">let</span>   content = <span class="hljs-string">&#x27;&lt;h1&gt;404 not found&lt;/h1&gt;&#x27;</span><br><span class="hljs-comment">//   3.判断请求是否为/或者/index.html首页</span><br><span class="hljs-comment">//   4. 判断页面是否为about.html 关于页面</span><br>    <span class="hljs-keyword">if</span>(url === <span class="hljs-string">&#x27;/&#x27;</span> || url ===<span class="hljs-string">&#x27;/index.html&#x27;</span>)&#123;<br>        content =<span class="hljs-string">&#x27;&lt;h1&gt;首页&lt;/h1&gt;&#x27;</span><br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(url === <span class="hljs-string">&#x27;/about.html&#x27;</span>)&#123;<br>        content =<span class="hljs-string">&#x27;&lt;h1&gt;关于页面&lt;/h1&gt;&#x27;</span><br>    &#125;<br><span class="hljs-comment">//   5.设置Content-type响应头，防止中文乱码</span><br>    res.setHeader(<span class="hljs-string">&#x27;Content-type&#x27;</span>,<span class="hljs-string">&#x27;text/html;charset=utf-8&#x27;</span>)<br><span class="hljs-comment">//   6.使用res.end() ,把内容返回给客户端</span><br>    res.end(content)<br>&#125;)<br>server.listen(<span class="hljs-number">8081</span>,<span class="hljs-function">()=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;server is running http://127.0.0.1:8081&#x27;</span> )<br>&#125;)<br><br></code></pre></td></tr></table></figure><h2 id="node模块分为内置模块，自定义模块，和第三方模块"><a href="#node模块分为内置模块，自定义模块，和第三方模块" class="headerlink" title="node模块分为内置模块，自定义模块，和第三方模块"></a>node模块分为内置模块，自定义模块，和第三方模块</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">  <span class="hljs-comment">//加载内置模块</span><br><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>)<br><span class="hljs-comment">//加载用户自定义模块要写路径 ，注意在加载自定义模块时可以省略.js后缀名</span><br><span class="hljs-keyword">const</span> m1 = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./01m&#x27;</span>)<br><span class="hljs-comment">//加载第三方模块</span><br></code></pre></td></tr></table></figure><h2 id="模块块级作用域"><a href="#模块块级作用域" class="headerlink" title="模块块级作用域"></a>模块块级作用域</h2></li><li>在自定义模块中，定义的变量，方法等成员，只能在当前模块中访问，这种模块级别等访问限制，叫做模块作用域</li><li>好处：防止了全局变量污染的问题<h2 id="向外共享模块作用域的成员"><a href="#向外共享模块作用域的成员" class="headerlink" title="向外共享模块作用域的成员"></a>向外共享模块作用域的成员</h2><h3 id="module对象"><a href="#module对象" class="headerlink" title="module对象"></a>module对象</h3></li><li>在每个.js自定义模块中都有一个module对象，它里面存储了当前模块有关的信息<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">module</span>)<br></code></pre></td></tr></table></figure><h3 id="module-exports-对象-exports对象"><a href="#module-exports-对象-exports对象" class="headerlink" title="module.exports 对象(exports对象)"></a>module.exports 对象(exports对象)</h3></li><li>在自定义模块中，可以使用 module.exports对象，将模块内的成员共享出去，供外界使用</li><li>在一个自定义模块中，默认情况下，module.exports = {}</li><li>在外界使用require方法导入一个自定义模块的时候，得到的就是引入的自定义模块中通过module.exports指向的那个对象</li><li>module.exports和exports指向同一个对象，即最总共享的对象以module.exports指向的对象为准<blockquote><p>新建两个js文件 demo1.js 和demo2.js</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// demo1js</span><br><span class="hljs-comment">// 向module.exports 对象上挂载 username 属性</span><br><span class="hljs-built_in">module</span>.exports.username =<span class="hljs-string">&#x27;kiki&#x27;</span><br><span class="hljs-comment">// 向module.exports 对象上挂载 sayhello 方法</span><br><span class="hljs-built_in">module</span>.exports.sayhello = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;大家好&#x27;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// demo2.js</span><br><span class="hljs-keyword">const</span>  demo1= <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./demo1&#x27;</span>)<br><span class="hljs-built_in">console</span>.log(demo1) <span class="hljs-comment">// &#123; username: &#x27;kiki&#x27;, sayhello: [Function (anonymous)] &#125;</span><br></code></pre></td></tr></table></figure></li><li>使用<strong>require 方法导入模块时，导入的结果永远以 module.exports 指向的对象为准</strong></li><li><strong>为了防止混乱，建议大家不要在同一个模块同时使用exports 和 module.exports</strong><h3 id="nodejs中的模块化规范（nodejs遵循了CommonJS规范）"><a href="#nodejs中的模块化规范（nodejs遵循了CommonJS规范）" class="headerlink" title="nodejs中的模块化规范（nodejs遵循了CommonJS规范）"></a>nodejs中的模块化规范（nodejs遵循了CommonJS规范）</h3></li><li>每个模块内部module 变量代表当前模块</li><li>module 变量是一个对象，它的 exports 属性（即 module.exports）是对外的接口</li><li>加载某个模块，其实就是加载这个模块的module.exports属性，require()方法用于加载模块<h2 id="npm包"><a href="#npm包" class="headerlink" title="npm包"></a>npm包</h2></li><li>命令： npm i 名称，例如npm i moment ,(npm i 和npm install 一样)</li><li>使用： 1.导入的名称就是安装包的名称(require(‘moment’))：<h3 id="npm-初次安装包多了哪些文件呢"><a href="#npm-初次安装包多了哪些文件呢" class="headerlink" title="npm 初次安装包多了哪些文件呢"></a>npm 初次安装包多了哪些文件呢</h3></li><li>node_modules 文件夹用来存放所有已经安装到项目中的包，require()导入第三方包时，就是从这个目录中查找并加载包</li><li>package-lock.json 配置文件用来记录node_modules目录下每一个下载包的下载信息，例如包的名字，版本号和下载地址等</li><li>package.json（必须存在）<h3 id="npm包管理配置文件（package-json）"><a href="#npm包管理配置文件（package-json）" class="headerlink" title="npm包管理配置文件（package.json）"></a>npm包管理配置文件（package.json）</h3></li><li>package.json 用来记录与项目有关的配置信息<h3 id="快速创建-package-json"><a href="#快速创建-package-json" class="headerlink" title="快速创建 package.json"></a>快速创建 package.json</h3></li><li>命令： npm init -y</li><li>注意：<strong>此命令只能在英文的目录下成功运行</strong>，所以<strong>项目文件夹名称不能是中文，不能用空格</strong><h3 id="如何安装指定版本的包呢？"><a href="#如何安装指定版本的包呢？" class="headerlink" title="如何安装指定版本的包呢？"></a>如何安装指定版本的包呢？</h3></li><li>如果需要安装指定版本的包，可以在包名字之后通过 <strong>@符号</strong> 指定具体的版本，例如 npm i <a href="mailto:&#109;&#x6f;&#109;&#x65;&#x6e;&#x74;&#x40;&#x32;&#46;&#50;&#x39;&#x2e;&#52;">&#109;&#x6f;&#109;&#x65;&#x6e;&#x74;&#x40;&#x32;&#46;&#50;&#x39;&#x2e;&#52;</a></li><li>包的语义化版本 例如2.29.4 第一位数字：大版本，第二位数字：功能版本，第三位数字：bug修复版本</li><li><strong>版本号提升的规则</strong>：只要前面的版本号增长了，后面的版本号<strong>归零</strong><h3 id="npm一次性安装所有的包"><a href="#npm一次性安装所有的包" class="headerlink" title="npm一次性安装所有的包"></a>npm一次性安装所有的包</h3></li><li>npm install (npm i)<h3 id="npm-卸载包"><a href="#npm-卸载包" class="headerlink" title="npm 卸载包"></a>npm 卸载包</h3></li><li>使用npm uninstall 具体的包名 来卸载包</li><li><strong>npm uninstall</strong> moment (moment是卸载的包名 )<h3 id="安装全局包"><a href="#安装全局包" class="headerlink" title="安装全局包"></a>安装全局包</h3></li><li>npm i  包名 -g<h3 id="卸载全局包"><a href="#卸载全局包" class="headerlink" title="卸载全局包"></a>卸载全局包</h3></li><li>npm uninstall 包名 -g<h3 id="解决下载包慢的问题"><a href="#解决下载包慢的问题" class="headerlink" title="解决下载包慢的问题"></a>解决下载包慢的问题</h3></li><li>淘宝npm镜像</li><li>查看当前下载包的镜像源 : npm config get registry</li><li>将下包的镜像设置为淘宝镜像： npm config set registry <a href="https://registry.npm.taobao.org/">https://registry.npm.taobao.org</a><h3 id="规范的包结构"><a href="#规范的包结构" class="headerlink" title="规范的包结构"></a>规范的包结构</h3></li><li>必须以单独的文件存在</li><li>包的顶级目录下面必须包含package.json 配置文件</li><li>package.json 文件必须包括 name ,version, main 三个属性 分别代表包的名字。版本号，包的入口<h3 id="发布npm包"><a href="#发布npm包" class="headerlink" title="发布npm包"></a>发布npm包</h3></li><li>npm publish (注意：此命名在发布包的目录下)<h3 id="删除已发布的包"><a href="#删除已发布的包" class="headerlink" title="删除已发布的包"></a>删除已发布的包</h3></li><li>命令：<strong>npm unpublish 包名  –force</strong> 即可删除npm发布的包</li><li>注意：<blockquote><p>npm unpublish命令只能删除72小时以内发布的包<br>npm unpublish 删除的包在24小时内不能重复发布<br>尽量不要往npm发布无用包</p></blockquote><h2 id="nrm-工具"><a href="#nrm-工具" class="headerlink" title="nrm 工具"></a>nrm 工具</h2></li><li>安装nrm 工具： npm i nrm  -g</li><li>查看所有可用的镜像源： nrm ls</li><li>切换镜像 例如切换为淘宝镜像：nrm use taobao</li></ul>]]></content>
      
      
      <categories>
          
          <category> Node.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VUE面试题</title>
      <link href="/2022/07/13/VUE%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
      <url>/2022/07/13/VUE%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h3 id="vue-js的两个核心是什么？"><a href="#vue-js的两个核心是什么？" class="headerlink" title="vue.js的两个核心是什么？"></a>vue.js的两个核心是什么？</h3><ul><li>数据驱动(双向数据绑定)核心是VM，即ViewModel，保证数据和视图的一致性</li><li>组件系统<h3 id="Vue双向数据绑定的原理"><a href="#Vue双向数据绑定的原理" class="headerlink" title="Vue双向数据绑定的原理"></a><font color="red">Vue双向数据绑定的原理</font></h3></li><li>Vue.js是采用<strong>数据劫持</strong>结合<em>发布者-订阅者模式</em>的方式，通过Object.defineProperty()来劫持各个属性的setter,getter,在数据变动时发给订阅者，触发相应的监听回调<h3 id="请说出vue几种常用的指令"><a href="#请说出vue几种常用的指令" class="headerlink" title="请说出vue几种常用的指令"></a>请说出vue几种常用的指令</h3></li><li>v-if：根据表达式的值的真假条件渲染元素。在切换时元素及它的数据绑定 / 组件被销毁并重建。</li><li>v-show：根据表达式之真假值，切换元素的 display CSS 属性。</li><li>v-for：循环指令，基于一个数组或者对象渲染一个列表，vue 2.0以上必须需配合 key值 使用。</li><li>v-bind：动态地绑定一个或多个特性，或一个组件 prop 到表达式。</li><li>v-on：用于监听指定元素的DOM事件，比如点击事件。绑定事件监听器。</li><li>v-model：实现表单输入和应用状态之间的双向绑定</li><li>v-pre：跳过这个元素和它的子元素的编译过程。可以用来显示原始 Mustache 标签。跳过大量没有指令的节点会加快编译。</li><li>v-once：只渲染元素和组件一次。随后的重新渲染，元素/组件及其所有的子节点将被视为静态内容并跳过。这可以用于优化更新性能<h3 id="vue生命周期"><a href="#vue生命周期" class="headerlink" title="vue生命周期"></a>vue生命周期</h3></li><li>beforeCreate：<strong>创建前</strong> :数据观测和初始化事件还未开始，此时 data 的响应式追踪、event/watcher 都还没有被设置，也就是说不能访问到data、computed、watch、methods上的方法和数据。</li><li>created：<strong>创建后</strong>: 实例创建完成,实例上配置的 options 包括 data、computed、watch、methods 等都配置完成，但是此时渲染得节点还未挂载到 DOM，所以不能访问到 $el 属性。</li><li>beforeMount：挂载前</li><li>mounted：挂载后</li><li>beforeUpdate：更新前</li><li>updated：更新后</li><li>activated()：keep-alive 组件激活时调用</li><li>deactivated(); keep-alive 组件停用时调用</li><li>beforeDestroy：销毁前</li><li>destroyed：销毁后</li><li>errorCaptured（2.5.0+ 新增）<h3 id="v-if-和-v-show-有什么区别"><a href="#v-if-和-v-show-有什么区别" class="headerlink" title="v-if 和 v-show 有什么区别"></a>v-if 和 v-show 有什么区别</h3><h4 id="相同点"><a href="#相同点" class="headerlink" title="相同点"></a>相同点</h4></li><li>动态显示DOM元素。<h4 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h4></li><li>v-if 是 真正 的 条件渲染，有更高的切换消耗，v-if适合运行时条件很少改变时使用</li><li>v-show 只是简单地切换元素的 CSS 属性display。有更高的初始消耗，v-show适合频繁切换<h3 id="vue常用的修饰符"><a href="#vue常用的修饰符" class="headerlink" title="vue常用的修饰符"></a>vue常用的修饰符</h3></li><li>.stop - 调用 event.stopPropagation()，禁止事件冒泡。</li><li>.prevent - 调用 event.preventDefault()，阻止事件默认行为。</li><li>.capture - 添加事件侦听器时使用 capture 模式。</li><li>.self - 只当事件是从侦听器绑定的元素本身触发时才触发回调。</li><li>.{keyCode | keyAlias} - 只当事件是从特定键触发时才触发回调。</li><li>.native - 监听组件根元素的原生事件。</li><li>.once - 只触发一次回调。</li><li>.left - (2.2.0) 只当点击鼠标左键时触发。</li><li>.right - (2.2.0) 只当点击鼠标右键时触发。</li><li>.middle - (2.2.0) 只当点击鼠标中键时触发。</li><li>.passive - (2.3.0) 以 { passive: true } 模式添加侦听器<h3 id="vue中-key-值的作用"><a href="#vue中-key-值的作用" class="headerlink" title="vue中 key 值的作用"></a>vue中 key 值的作用</h3></li><li>唯一性，用于 管理可复用的元素</li><li>v-for 更新已渲染过的元素列表时，它默认使用“就地复用”的策略。如果数据项的顺序发生了改变，Vue 不会移动 DOM 元素来匹配数据项的顺序，而是简单复用此处的每个元素。因此通过为每个列表项提供一个 key 值，来以便 Vue 跟踪元素的身份，从而高效的实现复用。key的作用是为了高效的更新渲染虚拟DOM。</li><li>v-for 的默认行为会尝试原地修改元素而不是移动它们。要强制其重新排序元素，你需要用特殊属性 key 来提供一个排序提示<h3 id="什么是-nextTick？"><a href="#什么是-nextTick？" class="headerlink" title="什么是$nextTick？"></a>什么是$nextTick？</h3></li><li>因为Vue的异步更新队列，$nextTick是用来知道什么时候DOM更新完成的。<h3 id="Vue-组件中-data-为什么必须是函数？"><a href="#Vue-组件中-data-为什么必须是函数？" class="headerlink" title="Vue 组件中 data 为什么必须是函数？"></a>Vue 组件中 data 为什么必须是函数？</h3></li><li>因为组件是共享的，但他们的data是私有的，所以每个组件都要return一个新的data对象，返回一个唯一的对象，不要和其他组件共用一个对象<h3 id="v-for-与-v-if-的优先级"><a href="#v-for-与-v-if-的优先级" class="headerlink" title="v-for 与 v-if 的优先级"></a>v-for 与 v-if 的优先级</h3></li><li>v-for的优先级比v-if更高</li><li>永远不要把 v-if 和 v-for 同时用在一个元素上，带来性能方面的浪费（每次渲染都会先循环再进行条件判断）</li><li>如果避免出现这种情况，则在外层嵌套 template （页面渲染不生成dom节点），再这一层进行 v-if 判断，然后再内部进行 v-for 循环<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template v-if=&quot;isShow&quot;&gt;<br>&lt;p v-for=&quot;item in items&quot;&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><h3 id="vue中组件之间调用"><a href="#vue中组件之间调用" class="headerlink" title="vue中组件之间调用"></a>vue中组件之间调用</h3><h4 id="vue中子组件调用父组件的方法"><a href="#vue中子组件调用父组件的方法" class="headerlink" title="vue中子组件调用父组件的方法"></a>vue中子组件调用父组件的方法</h4></li><li>在子组件中通过’$emit’触发 当前实例上的 自定义事件。</li><li>this.$emit(‘func’,this.msg)  (fuc是父组件中的函数，this.msg是传递给父组件的值)<h4 id="父组件给子组件通过props传值"><a href="#父组件给子组件通过props传值" class="headerlink" title="父组件给子组件通过props传值"></a>父组件给子组件通过props传值</h4><h4 id="vue父组件调用子组件中的方法"><a href="#vue父组件调用子组件中的方法" class="headerlink" title="vue父组件调用子组件中的方法"></a>vue父组件调用子组件中的方法</h4></li><li>在父组件中：首先要引入子组件 import Child from ‘./child’;</li><li><child ref="mychild"></child>是在父组件中为子组件添加一个占位，ref=”mychild”是子组件在父组件中的名字</li><li>父组件中 components: {}　　是声明子组件在父组件中的名字</li><li>在父组件的方法中调用子组件的方法，很重要   this.$refs.mychild.parentHandleclick(“hello”);<h3 id="Vue组件通讯方式"><a href="#Vue组件通讯方式" class="headerlink" title="Vue组件通讯方式"></a>Vue组件通讯方式</h3></li><li>props / $emit 适用 父子组件通信</li><li>ref 与 $parent / $children 适用 父子组件通信</li><li>$emit / $on 适用于 父子、隔代、兄弟组件通信</li><li>$attrs/$listeners 适用于 隔代组件通信</li><li>provide / inject 适用于 隔代组件通信</li><li>Vuex 适用于 父子、隔代、兄弟组件通信<h3 id="Vue中-set-的作用"><a href="#Vue中-set-的作用" class="headerlink" title="Vue中$set()的作用"></a>Vue中$set()的作用</h3></li><li>给对象添加新的属性。如果视图不能更新的话用$set可以进行视图更新。只所以用$set 是因为Vue无法监听普通的新增属性的变化。<h3 id="Axios"><a href="#Axios" class="headerlink" title="Axios"></a>Axios</h3></li><li>Axios 是一个基于 promise 的 HTTP 库，可以在浏览器和 node.js 中运行</li><li>特性<blockquote><p>1.从浏览器中创建 XMLHttpRequests<br>2.从 node.js 创建 http 请求<br>3.支持 Promise API<br>4.拦截请求和响应<br>5.转换请求数据和响应数据<br>6.取消请求<br>7.自动转换 JSON 数据<br>8.客户端支持防御 XSRF</p></blockquote></li><li>安装方法<br><code>npm install axios</code></li><li>引入(一般在封装接口的js文件中引入)<br><code>import axios from &#39;axios&#39;;</code></li><li>配置使用<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;axios&#x27;</span><br><span class="hljs-comment">//创建一个新的axios</span><br><span class="hljs-keyword">const</span> service = axios.create(&#123;<br>  <br>&#125;)<br><span class="hljs-comment">//请求拦截器</span><br>service.interceptors.request.use(<br>        <span class="hljs-function"><span class="hljs-params">config</span> =&gt;</span> &#123;<br>          <span class="hljs-comment">// 在请求发送前做的操作</span><br>          <span class="hljs-keyword">return</span> config<br>        &#125;,<br>        <span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> &#123;<br>          <span class="hljs-comment">// 处理错误请求</span><br>          <span class="hljs-built_in">console</span>.log(error, <span class="hljs-number">28</span>) <span class="hljs-comment">// for debug</span><br>          <span class="hljs-keyword">return</span> <span class="hljs-built_in">Promise</span>.reject(error)<br>        &#125;<br>)<br><span class="hljs-comment">//响应拦截器</span><br>service.interceptors.response.use(<br>        <span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> &#123;<br>          <span class="hljs-keyword">const</span> res = response.data<br>          <span class="hljs-keyword">return</span> res<br>        &#125;,<br>        <span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> &#123;<br>          <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;err&#x27;</span> + error) <span class="hljs-comment">// for debug</span><br>          <span class="hljs-keyword">return</span> <span class="hljs-built_in">Promise</span>.reject(error)<br>        &#125;<br>)<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> service<br><br></code></pre></td></tr></table></figure></li><li>搭配UI框架如：iview、vant、elementUI等<h3 id="vue中的跨域问题处理"><a href="#vue中的跨域问题处理" class="headerlink" title="vue中的跨域问题处理"></a>vue中的跨域问题处理</h3></li><li>为什么会出现跨域呢？<blockquote><p>不满足同源策略:协议+域名+端口一致</p></blockquote></li><li>解决跨域<blockquote><p>在vue项目中找到vue.config.js文件中devServer配置 </p></blockquote><h3 id="vue-router有哪几种导航钩子（-导航守卫-）？"><a href="#vue-router有哪几种导航钩子（-导航守卫-）？" class="headerlink" title="vue-router有哪几种导航钩子（ 导航守卫 ）？"></a>vue-router有哪几种导航钩子（ 导航守卫 ）？</h3></li></ul><ol><li>全局守卫： router.beforeEach</li><li>全局解析守卫： router.beforeResolve</li><li>全局后置钩子： router.afterEach</li><li>路由独享的守卫： beforeEnter</li><li>组件内的守卫： beforeRouteEnter、beforeRouteUpdate (2.2 新增)、beforeRouteLeave<h3 id="vue-router路由的两种模式"><a href="#vue-router路由的两种模式" class="headerlink" title="vue-router路由的两种模式"></a>vue-router路由的两种模式</h3></li></ol><ul><li>vue-router路由提供了两种路由模式：hash模式和history模式。</li><li>hash模式：在浏览器中符号“#”，#以及#后面的字符称之为 hash， 用 window.location.hash 读取</li><li>在vue的router中，通过修改vueRouter的mode属性来决定使用history还是hash。默认为hash模式。<h3 id="vue-路由跳转"><a href="#vue-路由跳转" class="headerlink" title="vue 路由跳转"></a>vue 路由跳转</h3></li><li>标签跳转 router-link<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">li</span> &gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;user&quot;</span>&gt;</span>点击验证动画效果 <span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span>   <br><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li>事件跳转 this.$router.push()<blockquote><p> query 传参，相当于get请求，页面跳转时参数会在地址栏中显示</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">this</span>.$router.push(&#123;<br>    <span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/user&#x27;</span>,<br>    <span class="hljs-attr">query</span>:&#123;<br>        <span class="hljs-attr">id</span>:<span class="hljs-built_in">this</span>.id<br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><blockquote><p>params 传参，相当于post请求，页面跳转时参数不会在地址栏中显示,通过this.$route.params.id获取</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">this</span>.$router.push(&#123;<br>    <span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/user&#x27;</span>,<br>    <span class="hljs-attr">params</span>:&#123;<br>        <span class="hljs-attr">id</span>:<span class="hljs-built_in">this</span>.id<br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><blockquote><p><font color='#ff6633'>注意：query刷新不会丢失query里面的数据 params刷新会丢失 params里面的数据。</font></p></blockquote></li><li>this.$router.replace{path:’/user’} (描述：同样是跳转到指定的url，但是这个方法不会向history里面添加新的记录)</li><li>this.$router.go(n) 相对于当前页面向前或向后跳转多少个页面,类似 window.history.go(n)。n可为正数可为负数。正数返回上一个页面</li><li>this.router.forward() 前进一步</li><li>this.router.back() 回退一步 <h3 id="vuex-状态管理器的使用"><a href="#vuex-状态管理器的使用" class="headerlink" title="vuex(状态管理器的使用)"></a>vuex(状态管理器的使用)</h3></li></ul><ol><li>State：单一状态树</li><li>Getters：状态获取</li><li>Mutations：触发同步事件</li><li>Actions：提交mutation，可以包含异步操作</li><li>Module：将vuex进行分模块<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><code>npm install vuex --save</code><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4></li><li>在 src/文件下面创建store文件创建index.js文件<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> Vue <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> Vuex <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span><br><span class="hljs-comment">//挂载Vuex</span><br>Vue.use(Vuex)<br><span class="hljs-comment">//创建VueX对象</span><br><span class="hljs-keyword">const</span> store = <span class="hljs-keyword">new</span> Vuex.Store(&#123;<br>  <span class="hljs-comment">//state定义属性</span><br>    <span class="hljs-attr">state</span>: &#123;<br>        <span class="hljs-attr">count</span>: <span class="hljs-number">0</span>,<br>    &#125;, <br>    <span class="hljs-comment">//getters 不会修改state里面是数据,获取最新的数据</span><br>    <span class="hljs-attr">getters</span>:&#123;<br>     <span class="hljs-function"><span class="hljs-title">shownum</span>(<span class="hljs-params">state</span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;当前最新的值为【&#x27;</span>+state.count+<span class="hljs-string">&#x27;】&#x27;</span><br>      &#125;<br>    &#125;,<br>  <span class="hljs-comment">//只有mutations才能变更store中的数据,不能在mutations函数中执行异步操作</span><br>  <span class="hljs-attr">mutations</span>: &#123;<br>    <span class="hljs-function"><span class="hljs-title">addition</span>(<span class="hljs-params">state</span>)</span> &#123;<br>      state.count++<br>    &#125;,<br>  &#125;,<br>  <span class="hljs-comment">//actions用于异步操作，但是在action中要通过触发mutation的方式来变更数据</span><br>  <span class="hljs-attr">actions</span>: &#123;<br>        <br>  &#125;,<br><br>&#125;)<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> store<br><br></code></pre></td></tr></table></figure></li><li>在main.js中引用<br><code>import store from &#39;./store&#39;//引入store文件夹下面的index.js</code><h4 id="访问vuex的值state"><a href="#访问vuex的值state" class="headerlink" title="访问vuex的值state"></a>访问vuex的值state</h4></li></ol><ul><li>第一种：通过this.$store.state.count 访问 count为vuex中state中属性的名称</li><li>第二种：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript">引入<span class="hljs-keyword">import</span> &#123;mapState&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span><br><span class="hljs-attr">computed</span>: &#123;<br>    ...mapState([<span class="hljs-string">&#x27;count&#x27;</span>])<span class="hljs-comment">//mapState映射</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="调用vue中mutations函数的方法"><a href="#调用vue中mutations函数的方法" class="headerlink" title="调用vue中mutations函数的方法"></a>调用vue中mutations函数的方法</h4></li><li>第一种<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">this</span>.$store.commit(<span class="hljs-string">&#x27;addition2&#x27;</span>,<span class="hljs-number">2</span>) <span class="hljs-comment">//调用vue中mutations函数的方法,addition2函数名称，2是传递的参数</span><br></code></pre></td></tr></table></figure></li><li>第二种<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123;mapMutations&#125; <span class="hljs-keyword">from</span>  <span class="hljs-string">&#x27;vuex&#x27;</span>,<br><span class="hljs-attr">methods</span>: &#123;<br>...mapMutations([<span class="hljs-string">&#x27;subtraction&#x27;</span>,<span class="hljs-string">&#x27;subtraction2&#x27;</span>]),<br>    <span class="hljs-function"><span class="hljs-title">subbtn</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">this</span>.subtraction();<br>    &#125;,<br>    <span class="hljs-function"><span class="hljs-title">subbtn2</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">this</span>.subtraction2(<span class="hljs-number">3</span>)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="触发vue中actions函数的方法-vuex异步操作通过this-store-dispatch触发actions里面的函数"><a href="#触发vue中actions函数的方法-vuex异步操作通过this-store-dispatch触发actions里面的函数" class="headerlink" title="触发vue中actions函数的方法(vuex异步操作通过this.$store.dispatch触发actions里面的函数)"></a>触发vue中actions函数的方法(vuex异步操作通过this.$store.dispatch触发actions里面的函数)</h4></li><li>第一种<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">this</span>.$store.dispatch(<span class="hljs-string">&#x27;函数名&#x27;</span>)vuex异步操作通过<span class="hljs-built_in">this</span>.$store.dispatch触发actions里面的函数<br></code></pre></td></tr></table></figure></li><li>第二种<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123;mapActions&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span><br><span class="hljs-attr">methods</span>: &#123;<br>...mapActions([<span class="hljs-string">&#x27;subAsync&#x27;</span>,<span class="hljs-string">&#x27;subAsync2&#x27;</span>]),<br>    <span class="hljs-function"><span class="hljs-title">subbtn3</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">this</span>.subAsync();<br>    &#125;,<br>    <span class="hljs-function"><span class="hljs-title">subbtn4</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">this</span>.subAsync2(<span class="hljs-number">4</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="使用getter"><a href="#使用getter" class="headerlink" title="使用getter"></a>使用getter</h4></li><li>第一种<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">this</span>.$store.getters.shownum<br></code></pre></td></tr></table></figure></li><li>第二种<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123;mapGetters&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span><br><span class="hljs-attr">computed</span>: &#123;<br>    ...mapGetters([<span class="hljs-string">&#x27;shownum&#x27;</span>])<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h3><h4 id="webpack-中的-loader-的作用是什么"><a href="#webpack-中的-loader-的作用是什么" class="headerlink" title="webpack 中的 loader 的作用是什么"></a>webpack 中的 loader 的作用是什么</h4><ul><li>webpack是基于 node 的，只能处理 JS和 JSON文件，loader 的作用是用来处理其他类型的文件（less\vue….等） 可以将 less 转成 css 文件，将 jsx处理成 JS文件，将其他版本的 ES 处理成浏览器能识别的 ES 版本<h4 id="使用-webpack-时如何优化项目体积"><a href="#使用-webpack-时如何优化项目体积" class="headerlink" title="使用 webpack 时如何优化项目体积"></a>使用 webpack 时如何优化项目体积</h4></li><li>使用用 uglyfly 进行代码压缩，使用 commonsChunk 分离第三方代码<h4 id="webpack-中什么是-HMR，原理是什么"><a href="#webpack-中什么是-HMR，原理是什么" class="headerlink" title="webpack 中什么是 HMR，原理是什么"></a>webpack 中什么是 HMR，原理是什么</h4></li><li>HMR（Hot Module Replacement），热更新又称热替换，基于 webpack-dev-server。 第一步：webpack 对文件系统进行 watch 打包到内存中 第二步：devServer 通知浏览器端文件发生改变，在这一阶段，sockjs 是服务端和浏览器端之间的桥梁，在启动 devServer 的时候，sockjs 在服务端和浏览器端建立了一个 webSocket 长连接，以便将 webpack 编译和打包的各个阶段状态告知浏览器 第三步：webpack-dev-server/client 接收到服务端消息做出响应 第四步：webpack 接收到最新 hash 值验证并请求模块代码 第五步：HotModuleReplacement.runtime 对模块进行热更新 第六步：调用 accept 方法，及时将新后的内容插入到页面中<h3 id="vue-项目中如何在页面刷新的状态下保留数据"><a href="#vue-项目中如何在页面刷新的状态下保留数据" class="headerlink" title="vue 项目中如何在页面刷新的状态下保留数据"></a>vue 项目中如何在页面刷新的状态下保留数据</h3></li><li>页面刷新的同时数据同步更新到LocalStorage/SessionStorage里面</li><li>路由传值<h3 id="vue中watch，computed-和methods的区别"><a href="#vue中watch，computed-和methods的区别" class="headerlink" title="vue中watch，computed 和methods的区别"></a>vue中watch，computed 和methods的区别</h3><h4 id="计算属性computed"><a href="#计算属性computed" class="headerlink" title="计算属性computed :"></a>计算属性computed :</h4></li><li><strong>支持缓存</strong>，只有依赖数据发生改变，才会重新进行计算</li><li><strong>不支持异步</strong>，当computed内有异步操作时无效，无法监听数据的变化</li><li>computed 属性值会默认走缓存，计算属性是基于它们的响应式依赖进行缓存的，也就是基于data中声明过或者父组件传递的props中的数据通过计算得到的值</li><li>如果一个属性是由其他属性计算而来的，这个属性依赖其他属性，是一个多对一或者一对一，一般用computed</li><li>如果computed属性属性值是函数，那么默认会走get方法；函数的返回值就是属性的属性值；在computed中的，属性都有一个get和一个set方法，当数据变化时，调用set方法。<h4 id="监听属性watch：（需要在数据变化时执行异步或开销较大的操作时，这个方式是最有用）"><a href="#监听属性watch：（需要在数据变化时执行异步或开销较大的操作时，这个方式是最有用）" class="headerlink" title="监听属性watch：（需要在数据变化时执行异步或开销较大的操作时，这个方式是最有用）"></a>监听属性watch：（需要在数据变化时执行异步或开销较大的操作时，这个方式是最有用）</h4></li><li><strong>不支持缓存</strong>，数据变，直接会触发相应的操作</li><li>watch<strong>支持异步</strong></li><li>监听的函数接收两个参数，第一个参数是最新的值；第二个参数是输入之前的值；</li><li>当一个属性发生变化时，需要执行对应的操作；一对多；</li><li>监听数据必须是data中声明过或者父组件传递过来的props中的数据，当数据变化时，触发其他操作，函数有两个参数，</li><li>immediate：组件加载立即触发回调函数执行， deep: 深度监听，复杂类型的数据时使用，例如数组中的对象改变。注意：deep无法监听到数组的变动和对象的新增，参考vue数组变异,只有以响应式的方式触发才会被监听到。<h4 id="Methods"><a href="#Methods" class="headerlink" title="Methods"></a>Methods</h4></li><li>Methods是挂载到vue实例所有方法的集合<h3 id="子组件可以直接改变父组件的数据吗？"><a href="#子组件可以直接改变父组件的数据吗？" class="headerlink" title="子组件可以直接改变父组件的数据吗？"></a>子组件可以直接改变父组件的数据吗？</h3></li><li>子组件不可以直接改变父组件的数据。这样做主要是为了维护父子组件的单向数据流。每次父级组件发生更新时，子组件中所有的 prop 都将会刷新为最新的值。如果这样做了，Vue 会在浏览器的控制台中发出警告</li><li>Vue提倡单向数据流，即父级 props 的更新会流向子组件，但是反过来则不行。这是为了防止意外的改变父组件状态，使得应用的数据流变得难以理解，导致数据流混乱。如果破坏了单向数据流，当应用复杂时，debug 的成本会非常高</li><li>只能通过 $emit 派发一个自定义事件，父组件接收到后，由父组件修改.<h3 id="ref，-refs，-el区别"><a href="#ref，-refs，-el区别" class="headerlink" title="ref，$refs，$el区别"></a>ref，$refs，$el区别</h3></li><li>ref ：是 元素的属性，用于设置在元素上</li><li>$refs ：获取页面中所有含有ref属性的DOM元素</li><li>$el ：获取Vue实例关联的DOM元素<h3 id="vue-sync修饰符的理解"><a href="#vue-sync修饰符的理解" class="headerlink" title="vue .sync修饰符的理解"></a>vue .sync修饰符的理解</h3></li><li>当一个子组件改变了一个 prop 的值时，这个变化也会同步到父组件中所绑定<h3 id="v-model-和-sync-区别"><a href="#v-model-和-sync-区别" class="headerlink" title="v-model 和.sync 区别"></a>v-model 和.sync 区别</h3></li><li>相同点：都是语法糖，都可以实现父子组件中的数据通信。</li><li>不同点<br>格式不同，v-model=”num”       :num.sync=”num”<br>v-model:@input+value       :num.sync:@update:num</li><li>v-model只能使用一次，.sync可以使用多个。<h3 id="MVVM、MVC的区别"><a href="#MVVM、MVC的区别" class="headerlink" title="MVVM、MVC的区别"></a>MVVM、MVC的区别</h3></li><li>MVC<blockquote><p>MVC(Model:模型,View:视图,Controller:控制器),View负责页面的显示逻辑。Model负责存储页面的业务数据，以及对相应数据的操作。<br>View 和 Model 应用了观察者模式，当Model层发生改变的时候它会通知有关 View 层更新页面<br>MVC是单向通信,也就是View跟Model，必须通过Controller来承上启下。</p></blockquote></li><li>MVVM<blockquote><p>Model（模型）,View（视图）,ViewModel（视图模型）<br>View——&gt;&lt;—— ViewModel ——&gt;&lt;—— Model</p></blockquote><h3 id="Vue-子组件和父组件执行顺序"><a href="#Vue-子组件和父组件执行顺序" class="headerlink" title="Vue 子组件和父组件执行顺序"></a>Vue 子组件和父组件执行顺序</h3></li><li>加载渲染过程<blockquote><p>1.父组件 beforeCreate<br>2.父组件 created<br>3.父组件 beforeMount<br>4.子组件 beforeCreate<br>5.子组件 created<br>6.子组件 beforeMount<br>7.子组件 mounted<br>8.父组件 mounted</p></blockquote></li><li>更新过程<blockquote><p>1.父组件 beforeUpdate<br>2.子组件 beforeUpdate<br>3.子组件 updated<br>4.父组件 updated</p></blockquote></li><li>销毁过程<blockquote><p>1.父组件 beforeDestroy<br>2.子组件 beforeDestroy<br>3.子组件 destroyed<br>4.父组件 destoryed</p></blockquote></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML/CSS 面试题</title>
      <link href="/2022/07/12/HTML-CSS-%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
      <url>/2022/07/12/HTML-CSS-%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h3 id="Html语义化"><a href="#Html语义化" class="headerlink" title="Html语义化"></a>Html语义化</h3><ul><li>h1~H6,strong, header,nav,main,article,section,footer</li><li>语义化优点：</li></ul><ol><li><input disabled="" type="checkbox"> 易于用户阅读，样式丢失的时候能让页面呈现清晰的结构。</li><li><input disabled="" type="checkbox"> 有利于SEO，搜索引擎根据标签来确定上下文和各个关键字的权重。 </li><li><input disabled="" type="checkbox"> 方便其他设备解析，如盲人阅读器根据语义渲染网页</li><li><input disabled="" type="checkbox"> 有利于开发和维护，语义化更具可读性，代码更好维护，与CSS3关系更和谐。<h3 id="em和rem，vh-vw的区别"><a href="#em和rem，vh-vw的区别" class="headerlink" title="em和rem，vh, vw的区别"></a>em和rem，vh, vw的区别</h3></li></ol><ul><li>rem 是根据html根节点定义的,一般一个项目里面创建一个公共js文件，文件里面配置1rem等于多少px</li><li>em是根据父元素定义的，他们都是相对单位，在移动端适配不同手机的屏幕</li><li>px相对长度单位，网页设计常用的基本单位。像素px是相对于显示器屏幕分辨率而言的em 是相对于父级的字体大小,</li><li>rem是相对于HTML根元素的字体大小,</li><li>vh 和vw相对于视口的高度和宽度,1vh 等于1/100的视口高度，1vw 等于1/100的视口宽度<h3 id="css定位"><a href="#css定位" class="headerlink" title="css定位"></a>css定位</h3></li><li>静态定位（static） 一般的标签元素不加任何定位属性都属于静态定位，在页面的最底层属于标准流。</li><li>绝对定位（absolute） 如果父元素设置了position:relative或position:absolute及position:fixed，那么它就会相对于它的父元素来定位，如果父级元素没有就相对于body定位</li><li>相对定位（relative） 相对定位是根据自己定位的</li><li>固定定位（fixed） 是相对于浏览器窗口定位，并且不会随着滚动条进行滚动。</li><li>绝对定位和相对定位区别 相对定位不会删除它本身在文档流中占据的空间，其他元素不可以占据该空间，而绝对定位则会删除掉该元素在文档流中的位置，使其完全从文档流中抽了出来，其他元素可以占据其空间，可以通过z-index来设置它们的堆叠顺序<h3 id="Css盒模型"><a href="#Css盒模型" class="headerlink" title="Css盒模型"></a>Css盒模型</h3></li><li>盒子模型指的是元素在网页中的实际占位包括<strong>标准盒模型</strong>和<strong>IE盒模型</strong></li><li>标准盒模型包括content padding border margin 宽高指的是content</li><li>IE盒模型包括内容和margin，内容包括border ，padding content 宽高指的是border padding content</li><li>css样式： box-sizing :content-box (标准盒模型) box-sizing：border-box （ie盒模型）</li><li>区别：IE盒子模型的content的多了boder和padding 如果统一盒子模型在html页面顶部添加<!DOCTYPE html><h3 id="前端性能优化方案"><a href="#前端性能优化方案" class="headerlink" title="前端性能优化方案"></a>前端性能优化方案</h3></li><li>减少DOM的访问次数，可以将DOM缓存到变量中；</li><li>减少重绘和回流，任何会导致重绘和回流的操作都应减少执行，可将多次操作合并为一次；</li><li>尽量采用事件委托的方式进行事件绑定，避免大量绑定导致内存占用过多；</li><li>css层级尽量扁平化，避免过多的层级嵌套，尽量使用特定的选择器来区分；</li><li>动画尽量使用CSS3动画属性来实现，开启GPU硬件加速；</li><li>图片在加载前提前指定宽高或者脱离文档流，可避免加载后的重新计算导致的页面回流；</li><li>css文件在<head>标签中引入，js文件在<body>标签中引入，优化关键渲染路径；</li><li>加速或者减少HTTP请求，使用CDN加载静态资源，合理使用浏览器强缓存和协商缓存，小图片可以使用Base64来代替，合理使用浏览器的预取指令prefetch和预加载指令preload；</li><li>压缩混淆代码，删除无用代码，代码拆分来减少文件体积；</li><li>小图片使用雪碧图，图片选择合适的质量、尺寸和格式，避免流量浪费<h3 id="什么是http-和http请求方法"><a href="#什么是http-和http请求方法" class="headerlink" title="什么是http 和http请求方法"></a>什么是http 和http请求方法</h3><h4 id="什么是http"><a href="#什么是http" class="headerlink" title="什么是http"></a>什么是http</h4></li><li>HTTP，即超文本传输协议，是一种实现客户端和服务器之间通信的响应协议，它是用作客户端和服务器之间的请求。 </li><li>客户端（浏览器）会向服务器提交HTTP请求；然后服务器向客户端返回响应；其中响应包含有关请求的状态信息，还可能包含请求的内容。<h4 id="HTTP的常用方法"><a href="#HTTP的常用方法" class="headerlink" title="HTTP的常用方法"></a>HTTP的常用方法</h4></li><li>GET方法: GET方法用于使用给定的URI从给定服务器中检索信息，即从指定资源中请求数据。使用GET方法的请求应该只是检索数据，并且不应对数据产生其他影响。<br>在GET请求的URL中发送查询字符串（名称/值对），需要这样写： /test/demo_form.php?name1=value1&amp;name2=value2<br>说明:GET请求是可以缓存的，我们可以从浏览器历史记录中查找到GET请求，还可以把它收藏到书签中；且GET请求有长度限制，仅用于请求数据（不修改）。<br>注：因GET请求的不安全性，在处理敏感数据时，绝不可以使用GET请求。</li><li>POST方法:用于将数据发送到服务器以创建或更新资源，它要求服务器确认请求中包含的内容作为由URI区分的Web资源的另一个下属。<br>POST请求永远不会被缓存，且对数据长度没有限制；我们无法从浏览器历史记录中查找到POST请求。</li><li>HEAD方法 HEAD方法与GET方法相同，但没有响应体，仅传输状态行和标题部分。这对于恢复相应头部编写的元数据非常有用，而无需传输整个内容。</li><li>PUT方法 用于将数据发送到服务器以创建或更新资源，它可以用上传的内容替换目标资源中的所有当前内容。<br>它会将包含的元素放在所提供的URI下，如果URI指示的是当前资源，则会被改变。如果URI未指示当前资源，则服务器可以使用该URI创建资源。</li><li>DELETE方法 用来删除指定的资源，它会删除URI给出的目标资源的所有当前内容。</li><li>CONNECT方法 用来建立到给定URI标识的服务器的隧道；它通过简单的TCP / IP隧道更改请求连接，通常实使用解码的HTTP代理来进行SSL编码的通信（HTTPS）。</li><li>OPTIONS方法 用来描述了目标资源的通信选项，会返回服务器支持预定义URL的HTTP策略。</li><li>TRACE方法 TRACE方法用于沿着目标资源的路径执行消息环回测试；它回应收到的请求，以便客户可以看到中间服务器进行了哪些（假设任何）进度或增量</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS面试题</title>
      <link href="/2022/07/10/JS%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
      <url>/2022/07/10/JS%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h3 id="js基本数据类型"><a href="#js基本数据类型" class="headerlink" title="js基本数据类型"></a>js基本数据类型</h3><ul><li>基本数据类型：Number、String、Boolean、Null 、 Undefind 、Symbol（es6新增，特点：唯一性）、Bigint（es10新增,大整数使用） 是直接按值存放的，所以可以直接访问。</li><li>引用数据类型：Object、Array、Function（当我们需要访问这三种引用类型的值时，首先得从栈中获得该对象的地址指针，然后再从堆内存中取得所需的数据。）<h3 id="检测基本数据类型的方式"><a href="#检测基本数据类型的方式" class="headerlink" title="检测基本数据类型的方式"></a>检测基本数据类型的方式</h3></li><li>typeof<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> <span class="hljs-number">9</span>);               <span class="hljs-comment">// number</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> <span class="hljs-literal">true</span>);            <span class="hljs-comment">// boolean</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> <span class="hljs-string">&#x27;str&#x27;</span>);           <span class="hljs-comment">// string</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> []);              <span class="hljs-comment">// object    </span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;&#125;);    <span class="hljs-comment">// function</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> &#123;&#125;);              <span class="hljs-comment">// object</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> <span class="hljs-literal">undefined</span>);       <span class="hljs-comment">// undefined</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> <span class="hljs-literal">null</span>);            <span class="hljs-comment">// object。</span><br><span class="hljs-comment">//其中数组、对象、null都会被判断为object，其他判断都正确。</span><br></code></pre></td></tr></table></figure></li><li>instanceof<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// instanceof可以正确判断对象的类型，其内部运行机制是判断在其原型链中能否找到该类型的原型。</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-number">2</span> <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Number</span>) <span class="hljs-comment">// false</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-literal">true</span> <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Boolean</span>)<span class="hljs-comment">// false </span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;aaa&#x27;</span> <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">String</span>)<span class="hljs-comment">// false</span><br><span class="hljs-built_in">console</span>.log([] <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Array</span>) <span class="hljs-comment">// true</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;&#125; <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Function</span>) <span class="hljs-comment">// true</span><br><span class="hljs-built_in">console</span>.log(&#123;&#125; <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Object</span>) <span class="hljs-comment">// true</span><br><span class="hljs-comment">//可以看到，instanceof只能正确判断引用数据类型，而不能判断基本数据类型。instanceof 运算符可以用来测试一个对象在其原型链中是否存在一个构造函数的 prototype 属性。</span><br></code></pre></td></tr></table></figure></li><li>Object.prototype.toString.call(obj)<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a = <span class="hljs-built_in">Object</span>.prototype.toString;<br><span class="hljs-built_in">console</span>.log(a.call(<span class="hljs-number">2</span>)) <span class="hljs-comment">//[object Number]</span><br><span class="hljs-built_in">console</span>.log(a.call(<span class="hljs-literal">true</span>)) <span class="hljs-comment">//[object Boolean]</span><br><span class="hljs-built_in">console</span>.log(a.call(<span class="hljs-string">&#x27;str&#x27;</span>))<span class="hljs-comment">// [object String]</span><br><span class="hljs-built_in">console</span>.log(a.call([])) <span class="hljs-comment">//[object Array]</span><br><span class="hljs-built_in">console</span>.log(a.call(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;&#125;)) <span class="hljs-comment">//[object Function]</span><br><span class="hljs-built_in">console</span>.log(a.call(&#123;&#125;)) <span class="hljs-comment">//[object Object]</span><br><span class="hljs-built_in">console</span>.log(a.call(<span class="hljs-literal">undefined</span>)) <span class="hljs-comment">//[object Undefined]</span><br><span class="hljs-built_in">console</span>.log(a.call(<span class="hljs-literal">null</span>)) <span class="hljs-comment">//[object Null] </span><br></code></pre></td></tr></table></figure></li><li>constructor<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">console</span>.log((<span class="hljs-number">2</span>).constructor === <span class="hljs-built_in">Number</span>) <span class="hljs-comment">// true</span><br><span class="hljs-built_in">console</span>.log((<span class="hljs-literal">true</span>).constructor === <span class="hljs-built_in">Boolean</span>) <span class="hljs-comment">// true</span><br><span class="hljs-built_in">console</span>.log((<span class="hljs-string">&#x27;str&#x27;</span>).constructor === <span class="hljs-built_in">String</span>) <span class="hljs-comment">// true</span><br><span class="hljs-built_in">console</span>.log(([]).constructor === <span class="hljs-built_in">Array</span>) <span class="hljs-comment">// true</span><br><span class="hljs-built_in">console</span>.log((<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;&#125;).constructor === <span class="hljs-built_in">Function</span>) <span class="hljs-comment">// true</span><br><span class="hljs-built_in">console</span>.log((&#123;&#125;).constructor === <span class="hljs-built_in">Object</span>) <span class="hljs-comment">// true</span><br><span class="hljs-comment">//constructor有两个作用，一是判断数据的类型，二是对象实例通过 constrcutor 对象访问它的构造函数。需要注意，如果创建一个对象来改变它的原型，constructor就不能用来判断数据类型了</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Fun</span>(<span class="hljs-params"></span>)</span>&#123;&#125;;<br>Fun.prototype = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>();<br><span class="hljs-keyword">var</span> f = <span class="hljs-keyword">new</span> Fun();<br><span class="hljs-built_in">console</span>.log(f.constructor===Fun);    <span class="hljs-comment">// false</span><br><span class="hljs-built_in">console</span>.log(f.constructor===<span class="hljs-built_in">Array</span>); <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="js栈和堆的区别"><a href="#js栈和堆的区别" class="headerlink" title="js栈和堆的区别"></a>js栈和堆的区别</h3><ul><li>基本数据类型都是直接按值存放在栈内存中，占用的内存空间的大小是确定的，并由系统自动分配和自动释放</li><li>引用数据类型存放在堆内存中</li><li>栈(stack):由操作系统自动分配内存空间，自动释放，存储的是基础变量以及一些对象的引用变量，占据固定大小的空间</li><li>堆(heap):由操作系统动态分配的内存，大小不定也不会自动释放，一般由程序员分配释放，也可由垃圾回收机制回收<h3 id="cookies，sessionStorage和localStorage的区别"><a href="#cookies，sessionStorage和localStorage的区别" class="headerlink" title="cookies，sessionStorage和localStorage的区别"></a>cookies，sessionStorage和localStorage的区别</h3></li><li>相同点:存在浏览器端</li><li>不同点: <blockquote><p>Cookie数据不能超过4k,只能保存很小的数据，Cookies:服务器和客户端都可以访问有时间限制<br>sessionStorage：仅在当前浏览器窗口关闭前有效, <strong>PC浏览器（关闭窗口就删除数据）</strong><br>localStorage：始终有效，窗口或浏览器关闭也一直保存，因此用作持久数据,<strong>PC浏览器（永久保存)</strong></p></blockquote></li><li> 用法:localStorage同理 sessionStorage<blockquote><p>localStorage.setItem(key,value)保存数据<br>localStorage.getItem(key)获取数据<br>localStorage.removeItem(key)删除数据<br>localStorage.clear()删除全部数据</p></blockquote><h3 id="let-const-var区别"><a href="#let-const-var区别" class="headerlink" title="let const var区别"></a>let const var区别</h3></li><li>let ,const <strong>块级作用域</strong>不具备变量提升 ,也不可以重复声明</li><li>var： <strong>具备变量提升</strong>，即变量在声明之前可以使用，返回undefined ，如果用let声明会返回报错ReferenceError</li><li>const 一旦声明常量不能改变，创建常量的时候必须赋值，否者会报错，常量创建后(地址)不可更改，就是说普通的数据类型不可以修改，复杂型数据再不修改其地址的情况下是可以被更改的<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br>    <span class="hljs-keyword">const</span> a = <span class="hljs-number">6</span><br>    a = <span class="hljs-number">7</span> <span class="hljs-comment">//报错</span><br>    <span class="hljs-keyword">const</span> arr = &#123; <span class="hljs-attr">age</span>:<span class="hljs-number">17</span> &#125;<br>    arr.age=<span class="hljs-number">20</span> <span class="hljs-comment">//正常</span><br>    arr =&#123;&#125; <span class="hljs-comment">//报错</span><br>    <span class="hljs-built_in">console</span>.log(arr)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="宏任务和微任务-异步任务的两种分类"><a href="#宏任务和微任务-异步任务的两种分类" class="headerlink" title="宏任务和微任务(异步任务的两种分类)"></a>宏任务和微任务(异步任务的两种分类)</h3></li><li>宏任务：setTimeout，setInterval，Ajax，DOM事件</li><li>微任务：Promise，async/await</li><li><strong>微任务比宏任务有更高优先级</strong><h3 id="闭包的原理"><a href="#闭包的原理" class="headerlink" title="闭包的原理"></a>闭包的原理</h3></li><li>闭包是指<strong>有权访问另一个函数作用域中变量的函数</strong>，创建闭包的最常见的方式就是在一个函数内创建另一个函数，创建的函数可以访问到当前函数的局部变量。</li><li>优点：可以让函数不被回收</li><li>缺点：不及时释放的变量，会造成内存泄漏<h4 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h4></li><li>第一个用途：使我们在<strong>函数外部能够访问到函数内部的变量</strong>。通过使用闭包，可以通过在外部调用闭包函数，从而在外部访问到函数内部的变量，可以使用这种方法来<strong>创建私有变量</strong>。</li><li>第二个用途：使已经运行结束的函数上下文中的变量对象继续留在内存中，因为闭包函数保留了这个变量对象的引用，所以这个<strong>变量对象不会被回收</strong>。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//函数 A 内部有一个函数 B，函数 B 可以访问到函数 A 中的变量，那么函数 B 就是闭包</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">A</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> a = <span class="hljs-number">1</span><br>    <span class="hljs-built_in">window</span>.B = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>         <span class="hljs-built_in">console</span>.log(a)<br>    &#125;<br>    &#125;<br>A()<br>B() <span class="hljs-comment">// 1</span><br></code></pre></td></tr></table></figure><h3 id="JS防抖和节流（动作绑定事件）"><a href="#JS防抖和节流（动作绑定事件）" class="headerlink" title="JS防抖和节流（动作绑定事件）"></a>JS防抖和节流（动作绑定事件）</h3></li><li>防抖：<strong>（表单提交，多次点击请求一次）</strong> 动作发生一定时间后触发事件，在这段时间内如果动作又发生，则重新等待一段时间再触发该事件。</li><li>节流： <strong>（用户滚动页面）</strong> ，动作发生一定时间后触发事件，在这段时间内，如果动作又发生，则无视该操作，直到事件执行完毕后，才能重新触发<h3 id="js事件委托-事件代理"><a href="#js事件委托-事件代理" class="headerlink" title="js事件委托(事件代理)"></a>js事件委托(事件代理)</h3></li><li>事件委托是利用事件的冒泡原理来实现的</li><li>利用事件冒泡的原理，让自己的所触发的事件，让他的父元素代替执行！js事件委托利用了事件冒泡.只指定一个事件处理程序，就可以管理某一类型的所有事件</li><li>事件捕获-目标-事件冒泡</li><li>作用:节约内存，提高整体性能</li><li>在vue用修饰符@click.stop=”函数名” 阻止冒泡<h3 id="js数组有哪些方法（es5-和es6）"><a href="#js数组有哪些方法（es5-和es6）" class="headerlink" title="js数组有哪些方法（es5 和es6）"></a>js数组有哪些方法（es5 和es6）</h3></li><li>Array.isArray(value) 判断一个值是否为数组</li><li>concat 合并数组</li><li>push() 从后面添加元素，返回值为添加完后的数组的长度</li><li>pop() 从后面删除元素，只能是一个</li><li>shift() 从前面删除元素，只能删除一个</li><li>unshift() 从前面添加元素</li><li>splice(i,n) 删除从i(索引值)开始之后的n元素</li><li>split() 将字符串转化为数组</li><li>reverse() 将数组反转</li><li>sort() 将数组进行排序,</li><li>slice(start,end) 切去索引值start到索引值end的数组，不包含end索引的值，</li><li>includes() 判断数中是否包含给定的值</li><li>some()  依据判断条件，数组的元素是否有一个满足，若有一个满足则返回ture</li><li>join() 拼接数组<h3 id="js数组方法push-pop-shift-unshift的返回值"><a href="#js数组方法push-pop-shift-unshift的返回值" class="headerlink" title="js数组方法push pop shift unshift的返回值"></a>js数组方法push pop shift unshift的返回值</h3></li><li>unshift() 方法可向数组的开头添加一个或更多元素，并返回新的长度。</li><li>push() 方法可向数组的末尾添加一个或多个元素，并返回新的长度。</li><li>pop() 方法用于删除并返回数组的最后一个元素。</li><li>shift() 方法用于把数组的第一个元素从其中删除，并返回第一个元素的值。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">arr =[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>]<br><span class="hljs-comment">// console.log(arr.push(6))//6 返回长度</span><br><span class="hljs-comment">// console.log(arr.unshift(9))//7 返回长度</span><br><span class="hljs-comment">// console.log(arr.pop())//6 返回数组最后一个元素</span><br><span class="hljs-comment">// console.log(arr.shift())//方法用于把数组的第一个元素从其中删除，并返回删除的第一个元素</span><br></code></pre></td></tr></table></figure><h3 id="js合并两个或者多个数组的方法"><a href="#js合并两个或者多个数组的方法" class="headerlink" title="js合并两个或者多个数组的方法"></a>js合并两个或者多个数组的方法</h3></li><li>concat: 不改变原数组，合并以后返回新数组（合并多个）</li><li>push.apply （只能合并两个）<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arr1 = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>];<br><span class="hljs-keyword">let</span> arr2 = [<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>];<br>arr1.push.apply(arr1,arr2)<br><span class="hljs-built_in">console</span>.log(arr1) <span class="hljs-comment">//[ 1, 2, 3, 4, &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot; ]</span><br></code></pre></td></tr></table></figure></li><li>es6扩展运算符…  返回新数组<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arr1 = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>];<br><span class="hljs-keyword">let</span> arr2 = [<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>];<br><span class="hljs-keyword">let</span> arr3=[...arr1,...arr2]<br><span class="hljs-built_in">console</span>.log(arr3) <span class="hljs-comment">//[ 1, 2, 3, 4, &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot; ]</span><br></code></pre></td></tr></table></figure><h3 id="深拷贝和浅拷贝区别"><a href="#深拷贝和浅拷贝区别" class="headerlink" title="深拷贝和浅拷贝区别"></a>深拷贝和浅拷贝区别</h3></li><li>浅拷贝：<blockquote><p>浅拷贝后的数据与原始数据有关联<br>常见浅拷贝的方式：Object.assign()、扩展运算符</p></blockquote></li><li>深拷贝<blockquote><p>深拷贝后的数据与原始数据毫无关系<br>常见深拷贝的方式：JSON.parse()和JSON.stringify()配合使用</p></blockquote><h3 id="JS内存泄漏与垃圾回收机制"><a href="#JS内存泄漏与垃圾回收机制" class="headerlink" title="JS内存泄漏与垃圾回收机制"></a>JS内存泄漏与垃圾回收机制</h3></li><li>内存泄漏：用到的内存，一些不需要的变量引用没有及时释放，就叫做内存泄漏。</li><li>垃圾回收机制：解决内存的泄露，垃圾回收机制会定期（周期性）找出那些不再用到的内存（变量），然后释放其内存。</li><li>通常采用的垃圾回收机制有两种方法：标记清除，引用计数。</li><li>引用计数：语言引擎有一张”引用表”，保存了内存里面所有资源（通常是各种值）的引用次数。如果一个值的引用次数是0，就表示这个值不再用到了<h3 id="new操作符具体干了什么呢"><a href="#new操作符具体干了什么呢" class="headerlink" title="new操作符具体干了什么呢?"></a>new操作符具体干了什么呢?</h3></li><li>创建一个空对象: 并且this变量引入该对象,同时还继承了函数的原型</li><li>设置原型链 空对象指向构造函数的原型对象</li><li>执行函数体 修改构造函数this指针指向空对象,并执行函数体</li><li>判断返回值 返回对象就用该对象,没有的话就创建一个对象<h3 id="JS获取DOM元素的方法"><a href="#JS获取DOM元素的方法" class="headerlink" title="JS获取DOM元素的方法"></a>JS获取DOM元素的方法</h3></li><li>通过id获取: document.getElementById(“box”);(box是id名称)</li><li>通过class获取: document.getElementsByClassName(“nav”);(nav是class名称)</li><li>通过标签名称获取: document.getElementsByTagName(“p”); (p是标签名)</li><li>通过name属性获取(注意：只有含有name属性的元素(表单元素)才能通过name属性获取)</li><li>通过querySelector获取</li><li>通过querySelectorAll获取</li><li>querySelector()和querySelectorAll()方法括号中的取值都是选择器，但是两个方法是有区别的。当有多个class相同的元素时，使用querySelector()方法只能获取到第一个class为box的元素，而querySelectorAll()获取到了所有class为box的元素集合。<h3 id="this的指向"><a href="#this的指向" class="headerlink" title="this的指向"></a>this的指向</h3></li><li>在方法中，this 指的是所有者对象。</li><li>单独的情况下，this 指的是全局对象。</li><li>在函数中，this 指的是全局对象。</li><li>在函数中，严格模式下，this 是 undefined。</li><li>在事件中，this 指的是接收事件的元素。</li><li>像 call() 和 apply() 这样的方法可以将 this 引用到任何对象。<h3 id="箭头函数和普通函数的区别"><a href="#箭头函数和普通函数的区别" class="headerlink" title="箭头函数和普通函数的区别"></a>箭头函数和普通函数的区别</h3></li><li>外形不同：箭头函数使用箭头定义，普通函数中没有<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 普通函数</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">func</span>(<span class="hljs-params"></span>)</span>&#123;<br>  <span class="hljs-comment">// code</span><br>&#125;<br><span class="hljs-comment">// 箭头函数</span><br><span class="hljs-keyword">let</span> func = <span class="hljs-function">()=&gt;</span>&#123;<br>  <span class="hljs-comment">// code</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li>箭头函数不绑定arguments<br>在普通函数中，this总是指向调用它的对象，如果用作构造函数，this指向创建的对象实例。</li><li>箭头函数不能用于构造函数，不能使用new,普通函数可以用于构造函数</li><li>箭头函数内部没有this，但箭头函数具有穿透性，箭头函数可以访问到上下文中的this，所以this的指向不同。</li><li>箭头函数不具有prototype原型对象</li><li>箭头函数没有super方法<h3 id="对作用域、作用域链的理解"><a href="#对作用域、作用域链的理解" class="headerlink" title="对作用域、作用域链的理解"></a>对作用域、作用域链的理解</h3><h4 id="全局作用域，函数作用域，块级作用域"><a href="#全局作用域，函数作用域，块级作用域" class="headerlink" title="全局作用域，函数作用域，块级作用域"></a>全局作用域，函数作用域，块级作用域</h4></li></ul><ol><li>全局作用域</li></ol><ul><li>最外层函数和最外层函数外面定义的变量拥有全局作用域</li><li>所有未定义直接赋值的变量自动声明为全局作用域</li><li>所有window对象的属性拥有全局作用域</li><li>全局作用域有很大的弊端，过多的全局作用域变量会污染全局命名空间，容易引起命名冲突。</li></ul><ol start="2"><li>函数作用域</li></ol><ul><li>函数作用域声明在函数内部的变零，一般只有固定的代码片段可以访问到</li><li>作用域是分层的，内层作用域可以访问外层作用域，反之不行</li></ul><ol start="3"><li>块级作用域</li></ol><ul><li>使用ES6中新增的let和const指令可以声明块级作用域，块级作用域可以在函数中创建也可以在一个代码块中的创建（由{ }包裹的代码片段）</li><li>let和const声明的变量不会有变量提升，也不可以重复声明</li><li>在循环中比较适合绑定块级作用域，这样就可以把声明的计数器变量限制在循环内部。<h4 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h4></li><li>在当前作用域中查找所需变量，但是该作用域没有这个变量，那这个变量就是自由变量。如果在自己作用域找不到该变量就去父级作用域查找，依次向上级作用域查找，直到访问到window对象就被终止，这一层层的关系就是作用域链。</li><li>作用：保证对执行环境有权访问对所有变量和函数对的有序访问，通过作用域链可以访问到外层环境的变量和函数</li><li>本质：作用域的本质是一个指向变量对象的指针列表，变量对象是一个包含了执行环境中的所有变量和函数的对象，全局执行上下文的变量对象（也就是全局变量），始终是作用域链的最后一个对象</li><li>当查找一个变量时，如果在当前执行环境中没有找到，可以沿着作用域链往后查找<h3 id="对于执行上下文的理解"><a href="#对于执行上下文的理解" class="headerlink" title="对于执行上下文的理解"></a>对于执行上下文的理解</h3></li><li>全局执行上下文</li><li>函数执行上下文</li><li>eval函数执行上下文<h3 id="forEach和map方法有什么区别"><a href="#forEach和map方法有什么区别" class="headerlink" title="forEach和map方法有什么区别"></a>forEach和map方法有什么区别</h3></li><li>共同点：都是遍历数组的</li><li>区别：<blockquote><p>forEach()方法会对每一个元素执行提供的函数，对数据对操作会改变原数组，该方法没有返回值<br>map()方法不会改变原数组的值，会返回一个新的数组，新数组中的值为原数组调用函数处理后的值</p></blockquote></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue文件js和css 抽离</title>
      <link href="/2022/03/31/vue%E6%96%87%E4%BB%B6js%E5%92%8Ccss-%E6%8A%BD%E7%A6%BB/"/>
      <url>/2022/03/31/vue%E6%96%87%E4%BB%B6js%E5%92%8Ccss-%E6%8A%BD%E7%A6%BB/</url>
      
        <content type="html"><![CDATA[<h2 id="将vue文件script代码抽取到单独的js文件"><a href="#将vue文件script代码抽取到单独的js文件" class="headerlink" title="将vue文件script代码抽取到单独的js文件"></a>将vue文件script代码抽取到单独的js文件</h2><blockquote><p>vue文件</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br>    <span class="hljs-keyword">import</span> test <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./test.js&#x27;</span><br>    <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> test<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><blockquote><p>test.js</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;test&quot;</span>,<br>    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">return</span> &#123;<br>            <br>        &#125;<br>    &#125;,<br>    <span class="hljs-function"><span class="hljs-title">created</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <br>    &#125;,<br>    <span class="hljs-attr">methods</span>: &#123;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="将vue文件css代码抽取到单独的css文件"><a href="#将vue文件css代码抽取到单独的css文件" class="headerlink" title="将vue文件css代码抽取到单独的css文件"></a>将vue文件css代码抽取到单独的css文件</h2><blockquote><p>vue文件</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;style lang=&quot;scss&quot; scoped&gt;<br>    @import &quot;/src/Admin.scss&quot;;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> VUE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js数组中数据筛选处理方式</title>
      <link href="/2022/03/10/js%E6%95%B0%E7%BB%84%E7%AD%9B%E9%80%89%E5%A4%84%E7%90%86%E6%96%B9%E5%BC%8F/"/>
      <url>/2022/03/10/js%E6%95%B0%E7%BB%84%E7%AD%9B%E9%80%89%E5%A4%84%E7%90%86%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h3 id="数据筛选：根据某个值查询是否存在当前数组并返回值"><a href="#数据筛选：根据某个值查询是否存在当前数组并返回值" class="headerlink" title="数据筛选：根据某个值查询是否存在当前数组并返回值"></a>数据筛选：根据某个值查询是否存在当前数组并返回值</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br>    <span class="hljs-keyword">var</span>  practiceCategoryList= [<br>    &#123;<br>        <span class="hljs-attr">label</span>: <span class="hljs-string">&#x27;全部&#x27;</span>,<br>        <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;&#x27;</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">label</span>: <span class="hljs-string">&#x27;鞠婧祎&#x27;</span>,<br>        <span class="hljs-attr">value</span>: <span class="hljs-number">1</span><br>    &#125;, &#123;<br>        <span class="hljs-attr">label</span>: <span class="hljs-string">&#x27;林思意&#x27;</span>,<br>        <span class="hljs-attr">value</span>: <span class="hljs-number">2</span><br>    &#125;]<br><br>    <span class="hljs-keyword">var</span>  a =<span class="hljs-string">&#x27;1&#x27;</span><br>    <span class="hljs-keyword">var</span>  b =<span class="hljs-string">&#x27;1,2&#x27;</span><br>    <span class="hljs-function"><span class="hljs-keyword">function</span>  <span class="hljs-title">getdata</span> (<span class="hljs-params">data</span>) </span>&#123;<br>        <span class="hljs-keyword">if</span>(data.length &gt;<span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-keyword">const</span> str = data.split(<span class="hljs-string">&#x27;,&#x27;</span>)<br>            <span class="hljs-keyword">const</span> arr = []<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i <span class="hljs-keyword">of</span> str) &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> item <span class="hljs-keyword">of</span> practiceCategoryList) &#123;<br>                    <span class="hljs-keyword">if</span>(i == item.value)&#123;<br>                        arr.push(item.label)<br>                    &#125;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">return</span> arr.join()<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-comment">// return  practiceCategoryList[data].label//当枚举值和需要的值一样是处理方式</span><br>            <span class="hljs-keyword">var</span> getvalue = <span class="hljs-string">&#x27;&#x27;</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> item <span class="hljs-keyword">of</span> practiceCategoryList) &#123;<br>                    <span class="hljs-keyword">if</span>(data == item.value)&#123;<br>                        getvalue = item.label<br>                    &#125;<br>                &#125;<br>            <span class="hljs-keyword">return</span>  getvalue <span class="hljs-comment">//当枚举值和需要的值不一样是处理方式</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">console</span>.log(getdata(a),<span class="hljs-string">&#x27;getdata-a&#x27;</span>)<span class="hljs-comment">//返回值：鞠婧祎/</span><br>    <span class="hljs-built_in">console</span>.log(getdata(b),<span class="hljs-string">&#x27;getdata-b&#x27;</span>)<span class="hljs-comment">//返回值:鞠婧祎,林思意</span><br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="判断字符串中首个字符串是否为0，如果是去除0"><a href="#判断字符串中首个字符串是否为0，如果是去除0" class="headerlink" title="判断字符串中首个字符串是否为0，如果是去除0"></a>判断字符串中首个字符串是否为0，如果是去除0</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript">   <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">changeZero</span>(<span class="hljs-params">data</span>) </span>&#123;<br>       <span class="hljs-keyword">if</span> (data.charAt(<span class="hljs-number">0</span>) == <span class="hljs-string">&#x27;0&#x27;</span>) &#123;<br>           data = data.substring(<span class="hljs-number">1</span>, data.length)<br>       &#125;<br>       <span class="hljs-keyword">return</span> data<br>&#125;<br>   <span class="hljs-built_in">console</span>.log(changeZero(<span class="hljs-string">&#x27;01&#x27;</span>), <span class="hljs-string">&#x27;1&#x27;</span>) <span class="hljs-comment">//1,1</span><br><br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mac登陆两个微信方式</title>
      <link href="/2022/03/08/mac%E7%99%BB%E9%99%86%E4%B8%A4%E4%B8%AA%E5%BE%AE%E4%BF%A1%E6%96%B9%E5%BC%8F/"/>
      <url>/2022/03/08/mac%E7%99%BB%E9%99%86%E4%B8%A4%E4%B8%AA%E5%BE%AE%E4%BF%A1%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h3 id="方法-已自测，可以登陆"><a href="#方法-已自测，可以登陆" class="headerlink" title="方法(已自测，可以登陆)"></a>方法(已自测，可以登陆)</h3><ul><li>打开终端输入：<br>nohup /Applications/WeChat.app/Contents/MacOS/WeChat &gt; /dev/null 2&gt;&amp;1</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> mac </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PS界面相关介绍以及快捷键方式（持续更新）</title>
      <link href="/2022/02/08/PS%E7%95%8C%E9%9D%A2%E7%9B%B8%E5%85%B3%E4%BB%8B%E7%BB%8D%E4%BB%A5%E5%8F%8A%E5%BF%AB%E6%8D%B7%E9%94%AE%E6%96%B9%E5%BC%8F/"/>
      <url>/2022/02/08/PS%E7%95%8C%E9%9D%A2%E7%9B%B8%E5%85%B3%E4%BB%8B%E7%BB%8D%E4%BB%A5%E5%8F%8A%E5%BF%AB%E6%8D%B7%E9%94%AE%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h4 id="图层"><a href="#图层" class="headerlink" title="图层"></a>图层</h4><ul><li>Command + N  新建</li><li>Command + Shift + U 去色</li><li>Command + Shift + N  新建图层</li><li>Command + [  可以把选中的图层往下移动一层</li><li>Command + ] 可以把选中的图层往上移动一层</li><li>Command + shift + [  可以把选中的图层移动到最下方</li><li>Command + shift + ]  可以把选中的图层移动到最上方</li><li>按住option 键 拖拽某个图层可以复制图层</li><li>Command + J 复制图层</li><li>选中图层 按住delete  删除图层</li></ul><h3 id="选框工具（快捷键-M-）"><a href="#选框工具（快捷键-M-）" class="headerlink" title="选框工具（快捷键 M ）"></a>选框工具（快捷键 M ）</h3><h4 id="shift-M-切换不同的选框工具"><a href="#shift-M-切换不同的选框工具" class="headerlink" title="shift + M  切换不同的选框工具"></a>shift + M  切换不同的选框工具</h4><ul><li>新选区：每次保留新作的选取，放弃旧的选区</li><li>添加到选区（新旧选区并存，在重合部分画选区会实现选区合并效果）：在新选区模式下先按 shift 键切换添加到选区</li><li>从选区减去 新选区按住 alt 键，切换到从选区减去</li><li>与选区交叉 在新选区模式下按住shift + alt 键 切换到与选区交叉，会保留重合到选区</li><li>羽化：使选区边缘柔和过度，羽化值的大小决定虚化程度，羽化值越大，虚化程度越大，反之越小。<h3 id="套索工具-自由套索工具-（快捷键-L-）"><a href="#套索工具-自由套索工具-（快捷键-L-）" class="headerlink" title="套索工具(自由套索工具)（快捷键 L ）"></a>套索工具(自由套索工具)（快捷键 L ）</h3><h4 id="shift-L-切换不同的套索工具"><a href="#shift-L-切换不同的套索工具" class="headerlink" title="shift + L 切换不同的套索工具"></a>shift + L 切换不同的套索工具</h4></li><li>在选区未闭合的情况下，鼠标是不能点选其他命令的</li><li>如果想删除新拉的点，可以按delete键或者 Backspace 键来删除点</li><li>取消选择：按住 esc 键 取消全部选区</li><li>交接： 如果在下一个点准备交接可以双击、按住ctrl左击、或者回车，三种方式都可以</li><li>多边形套索工具可以画到文档到外面，而自由套索工具不行</li><li>多边形套索适合与选取直线边缘</li><li>可以结合放大，缩小，平移进行多边形选区制作</li><li>磁性套索工具到控点可以智能识别像素边缘<h3 id="魔棒工具（快捷键-W-）"><a href="#魔棒工具（快捷键-W-）" class="headerlink" title="魔棒工具（快捷键 W ）"></a>魔棒工具（快捷键 W ）</h3></li><li>魔棒工具可以快速的将颜色相近的区域变成选区（可以通过顶部选项栏设置需要的参数）</li><li>取样点：以单像素色彩信息取样<h3 id="快速选择工具（快捷键-W-）"><a href="#快速选择工具（快捷键-W-）" class="headerlink" title="快速选择工具（快捷键 W ）"></a>快速选择工具（快捷键 W ）</h3></li></ul><h2 id="视图处理"><a href="#视图处理" class="headerlink" title="视图处理"></a>视图处理</h2><ul><li>ctrl + “+” 放大视图</li><li>ctrl + “-“ 缩小视图<h3 id="抓手工具（快捷键-H-）"><a href="#抓手工具（快捷键-H-）" class="headerlink" title="抓手工具（快捷键 H ）"></a>抓手工具（快捷键 H ）</h3></li></ul><h3 id="旋转视图工具（快捷键-R-）"><a href="#旋转视图工具（快捷键-R-）" class="headerlink" title="旋转视图工具（快捷键 R ）"></a>旋转视图工具（快捷键 R ）</h3><h2 id="画笔工具（快捷键-B）"><a href="#画笔工具（快捷键-B）" class="headerlink" title="画笔工具（快捷键 B）"></a>画笔工具（快捷键 B）</h2><ul><li>画笔状态下，按住shift 键 可以画出直线，或者连接两个点成一条直线</li><li>画笔状态下，按住alt 键 可以拾取颜色,松开alt 键 会自动恢复到画笔工具 点击吸取当前颜色，改变前景色</li><li>改变画笔的大小 快捷键 “【 “ 画笔变小 ，” 】” 画笔变大</li><li>改变画笔的硬度 shift + “【 “ 硬度变小，shift+ “ 】”硬度变大</li><li>快捷键 ‘,’ 和 ‘.’ 结合shift 键 快速切换画笔预设</li></ul>]]></content>
      
      
      <categories>
          
          <category> PS </category>
          
          <category> photoshop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用ps把图片改成简笔画</title>
      <link href="/2022/02/08/%E7%94%A8ps%E6%8A%8A%E5%9B%BE%E7%89%87%E6%94%B9%E6%88%90%E7%AE%80%E7%AC%94%E7%94%BB/"/>
      <url>/2022/02/08/%E7%94%A8ps%E6%8A%8A%E5%9B%BE%E7%89%87%E6%94%B9%E6%88%90%E7%AE%80%E7%AC%94%E7%94%BB/</url>
      
        <content type="html"><![CDATA[<ul><li>第一步用ps打开图片</li><li>第二步：去色 （Command + Shift + U） </li><li>第三步：复制图层 （Command + J） 并重命名为”去色图层”</li><li>第四步：图像-调整-反相 （Command + I）</li><li>第五步：在”去色图层”的叠加菜单中选中颜色减淡</li><li><blockquote><p>效果图<br><img src="https://linmuhan.gitee.io/images/quse5.png" alt="avatar"></p></blockquote></li><li>第六步：滤镜-其他-最小值（最好设置1-3像素）</li><li><img src="https://linmuhan.gitee.io/images/quse6.png" alt="avatar"></li><li>第七步：合并图层  Command + E</li></ul>]]></content>
      
      
      <categories>
          
          <category> PS </category>
          
          <category> photoshop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>h5页面样式问题记录( 持续更新 )</title>
      <link href="/2022/01/12/h5%E9%A1%B5%E9%9D%A2%E6%A0%B7%E5%BC%8F%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/"/>
      <url>/2022/01/12/h5%E9%A1%B5%E9%9D%A2%E6%A0%B7%E5%BC%8F%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="移动端开发的过程中，当用户连接某个文字-跳转时候-出现-高亮一块，这样很影响用户体验，我们可以吧颜色设置为透明"><a href="#移动端开发的过程中，当用户连接某个文字-跳转时候-出现-高亮一块，这样很影响用户体验，我们可以吧颜色设置为透明" class="headerlink" title="移动端开发的过程中，当用户连接某个文字 跳转时候 出现 高亮一块，这样很影响用户体验，我们可以吧颜色设置为透明"></a>移动端开发的过程中，当用户连接某个文字 跳转时候 出现 高亮一块，这样很影响用户体验，我们可以吧颜色设置为透明</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">a</span> &#123;<br>    -webkit-tap-highlight-<span class="hljs-attribute">color</span>: transparent;<br>    tap-highlight-<span class="hljs-attribute">color</span>: transparent;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="移动端禁止用户复制"><a href="#移动端禁止用户复制" class="headerlink" title="移动端禁止用户复制"></a>移动端禁止用户复制</h3><h4 id="在添加完这段代码后，在IOS-上会有问题的，这个时候你会发现input-框无法正在输入了内容了；解决这个方法-就是-在css-文件中同时设置一下input-的属性"><a href="#在添加完这段代码后，在IOS-上会有问题的，这个时候你会发现input-框无法正在输入了内容了；解决这个方法-就是-在css-文件中同时设置一下input-的属性" class="headerlink" title="在添加完这段代码后，在IOS 上会有问题的，这个时候你会发现input 框无法正在输入了内容了；解决这个方法 就是 在css 文件中同时设置一下input 的属性"></a>在添加完这段代码后，在IOS 上会有问题的，这个时候你会发现input 框无法正在输入了内容了；解决这个方法 就是 在css 文件中同时设置一下input 的属性</h4><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">* &#123;<br>    -webkit-touch-callout: <span class="hljs-keyword">none</span>; <span class="hljs-comment">/*系统默认菜单被禁用*/</span><br>    -webkit-<span class="hljs-keyword">user</span>-<span class="hljs-keyword">select</span>: <span class="hljs-keyword">none</span>; <span class="hljs-comment">/*webkit浏览器*/</span><br>    -khtml-<span class="hljs-keyword">user</span>-<span class="hljs-keyword">select</span>: <span class="hljs-keyword">none</span>; <span class="hljs-comment">/*早期浏览器*/</span><br>    -moz-<span class="hljs-keyword">user</span>-<span class="hljs-keyword">select</span>: <span class="hljs-keyword">none</span>; <span class="hljs-comment">/*火狐*/</span><br>    -ms-<span class="hljs-keyword">user</span>-<span class="hljs-keyword">select</span>: <span class="hljs-keyword">none</span>; <span class="hljs-comment">/*IE10*/</span><br>    <span class="hljs-keyword">user</span>-<span class="hljs-keyword">select</span>: <span class="hljs-keyword">none</span>;<br>&#125;<br><span class="hljs-keyword">input</span> &#123;<br>    -webkit-<span class="hljs-keyword">user</span>-<span class="hljs-keyword">select</span>: auto; <span class="hljs-comment">/*webkit浏览器*/</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="h5页面禁止缩放"><a href="#h5页面禁止缩放" class="headerlink" title="h5页面禁止缩放"></a>h5页面禁止缩放</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br>    <span class="hljs-built_in">window</span>.onload = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-comment">// 阻止双击放大</span><br>        <span class="hljs-keyword">var</span> lastTouchEnd = <span class="hljs-number">0</span>;<br>        <span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">&#x27;touchstart&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>) </span>&#123;<br>            <span class="hljs-keyword">if</span> (event.touches.length &gt; <span class="hljs-number">1</span>) &#123;<br>                event.preventDefault();<br>            &#125;<br>        &#125;);<br>        <span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">&#x27;touchend&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>) </span>&#123;<br>            <span class="hljs-keyword">var</span> now = (<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>()).getTime();<br>            <span class="hljs-keyword">if</span> (now - lastTouchEnd &lt;= <span class="hljs-number">300</span>) &#123;<br>                event.preventDefault();<br>            &#125;<br>            lastTouchEnd = now;<br>        &#125;, <span class="hljs-literal">false</span>);<br>        <span class="hljs-comment">// 阻止双指放大</span><br>        <span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">&#x27;gesturestart&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>) </span>&#123;<br>            event.preventDefault();<br>        &#125;);<br>    &#125;<span class="hljs-comment">//苹果手机禁止缩放</span><br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
          <category> H5 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> H5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>获取url的值</title>
      <link href="/2022/01/11/%E8%8E%B7%E5%8F%96url%E7%9A%84%E5%80%BC/"/>
      <url>/2022/01/11/%E8%8E%B7%E5%8F%96url%E7%9A%84%E5%80%BC/</url>
      
        <content type="html"><![CDATA[<h3 id="获取全部的URL"><a href="#获取全部的URL" class="headerlink" title="获取全部的URL"></a>获取全部的URL</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">window</span>.<span class="hljs-keyword">location</span>.href<br></code></pre></td></tr></table></figure><h3 id="获取传参前面的url"><a href="#获取传参前面的url" class="headerlink" title="获取传参前面的url"></a>获取传参前面的url</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">window</span>.<span class="hljs-keyword">location</span>.origin<br></code></pre></td></tr></table></figure><h3 id="获取协议"><a href="#获取协议" class="headerlink" title="获取协议"></a>获取协议</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">window</span>.<span class="hljs-keyword">location</span>.protocol<br></code></pre></td></tr></table></figure><h3 id="获取域名"><a href="#获取域名" class="headerlink" title="获取域名"></a>获取域名</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">window</span>.<span class="hljs-keyword">location</span>.hostname<br></code></pre></td></tr></table></figure><h3 id="获取端口"><a href="#获取端口" class="headerlink" title="获取端口"></a>获取端口</h3><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elm"><span class="hljs-title">window</span>.location.<span class="hljs-keyword">port</span><br></code></pre></td></tr></table></figure><h3 id="获取路径部分"><a href="#获取路径部分" class="headerlink" title="获取路径部分"></a>获取路径部分</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">window</span>.<span class="hljs-keyword">location</span>.pathname<br></code></pre></td></tr></table></figure><h3 id="请求的参数"><a href="#请求的参数" class="headerlink" title="请求的参数"></a>请求的参数</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">window</span>.<span class="hljs-keyword">location</span>.<span class="hljs-keyword">search</span><br></code></pre></td></tr></table></figure><h3 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h3><p><img src="https://linmuhan.gitee.io/images/url.png" alt="avatar"></p>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue 项目中动态修改浏览器标题(四步)</title>
      <link href="/2022/01/04/vue%E9%A1%B9%E7%9B%AE%E4%B8%AD%E5%8A%A8%E6%80%81%E4%BF%AE%E6%94%B9%E6%B5%8F%E8%A7%88%E5%99%A8%E6%A0%87%E9%A2%98/"/>
      <url>/2022/01/04/vue%E9%A1%B9%E7%9B%AE%E4%B8%AD%E5%8A%A8%E6%80%81%E4%BF%AE%E6%94%B9%E6%B5%8F%E8%A7%88%E5%99%A8%E6%A0%87%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gauss">npm vue-wechat-<span class="hljs-built_in">title</span> --<span class="hljs-keyword">save</span><br></code></pre></td></tr></table></figure><h3 id="在main-js里面引入插件"><a href="#在main-js里面引入插件" class="headerlink" title="在main.js里面引入插件"></a>在main.js里面引入插件</h3><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs clean"><span class="hljs-keyword">import</span> VueWechatTitle <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-wechat-title&#x27;</span><span class="hljs-comment">//动态修改title</span><br>Vue.use(VueWechatTitle)<br></code></pre></td></tr></table></figure><h3 id="在路由里面-添加title"><a href="#在路由里面-添加title" class="headerlink" title="在路由里面 添加title"></a>在路由里面 添加title</h3><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">routes: [&#123;<br>    path: <span class="hljs-string">&#x27;&#x27;</span>,<br>    name: <span class="hljs-string">&#x27;&#x27;</span>,<br>    component: <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;&#x27;</span>),<br>    meta: &#123; title: <span class="hljs-string">&#x27;标题&#x27;</span> &#125;<br>  &#125;]<br></code></pre></td></tr></table></figure><h3 id="在app-vue-中添加-指令-v-wechat-title"><a href="#在app-vue-中添加-指令-v-wechat-title" class="headerlink" title="在app.vue 中添加 指令 v-wechat-title"></a>在app.vue 中添加 指令 v-wechat-title</h3><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">&lt;router-<span class="hljs-built_in">view</span> v-wechat-<span class="hljs-built_in">title</span>=&#x27;$route.meta.<span class="hljs-built_in">title</span>&#x27; /&gt;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> VUE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue 强制刷新</title>
      <link href="/2022/01/04/vue-%E5%BC%BA%E5%88%B6%E5%88%B7%E6%96%B0/"/>
      <url>/2022/01/04/vue-%E5%BC%BA%E5%88%B6%E5%88%B7%E6%96%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="this-forceUpdate"><a href="#this-forceUpdate" class="headerlink" title="this.$forceUpdate();"></a>this.$forceUpdate();</h3>]]></content>
      
      
      <categories>
          
          <category> VUE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>elementUI中日期的处理方式</title>
      <link href="/2021/12/20/elementUI%E4%B8%AD%E6%97%B6%E9%97%B4%E7%9A%84%E5%A4%84%E7%90%86%E6%96%B9%E5%BC%8F/"/>
      <url>/2021/12/20/elementUI%E4%B8%AD%E6%97%B6%E9%97%B4%E7%9A%84%E5%A4%84%E7%90%86%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h3 id="只能改当天以及当天时间之后的时间"><a href="#只能改当天以及当天时间之后的时间" class="headerlink" title="只能改当天以及当天时间之后的时间"></a>只能改当天以及当天时间之后的时间</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">el-date-picker</span></span><br><span class="hljs-tag">      <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;time&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;daterange&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">value-format</span>=<span class="hljs-string">&quot;yyyy-MM-dd&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">format</span>=<span class="hljs-string">&quot;yyyy-MM-dd&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">range-separator</span>=<span class="hljs-string">&quot;至&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">start-placeholder</span>=<span class="hljs-string">&quot;开始日期&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">end-placeholder</span>=<span class="hljs-string">&quot;结束日期&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">:picker-options</span>=<span class="hljs-string">&quot;changetime&quot;</span></span><br><span class="hljs-tag">    /&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="javascript">  <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">    <span class="hljs-keyword">return</span>&#123;</span><br><span class="javascript">      <span class="hljs-attr">time</span>:<span class="hljs-string">&#x27;&#x27;</span>,</span><br><span class="javascript">      <span class="hljs-attr">changetime</span>:&#123;</span><br><span class="javascript">        <span class="hljs-comment">//只能改当天以及当天时间之后的时间</span></span><br><span class="javascript">        <span class="hljs-function"><span class="hljs-title">disabledDate</span>(<span class="hljs-params">time</span>)</span> &#123;</span><br><span class="javascript">          <span class="hljs-keyword">return</span> time.getTime() &lt; <span class="hljs-built_in">Date</span>.now() - <span class="hljs-number">8.64e7</span></span><br><span class="javascript">        &#125;,</span><br><span class="javascript">      &#125;,</span><br><span class="javascript">    &#125;</span><br><span class="javascript">  &#125;,</span><br><span class="javascript">&#125;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h3><p><img src="https://linmuhan.gitee.io/images/timedate.png" alt="avatar"></p><h3 id="只能选择当前月份和当前月份之后的月份"><a href="#只能选择当前月份和当前月份之后的月份" class="headerlink" title="只能选择当前月份和当前月份之后的月份"></a>只能选择当前月份和当前月份之后的月份</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">el-date-picker</span></span><br><span class="hljs-tag">      <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;month&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;month&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;选择月&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">:picker-options</span>=<span class="hljs-string">&quot;changemonth&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">el-date-picker</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="javascript">  <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">    <span class="hljs-keyword">return</span>&#123;</span><br><span class="javascript">      <span class="hljs-attr">month</span>:<span class="hljs-string">&#x27;&#x27;</span>,</span><br><span class="javascript">      <span class="hljs-attr">changemonth</span>:&#123;</span><br><span class="javascript">        <span class="hljs-comment">// 只能选择当前月份和当前月份之后的月份</span></span><br><span class="javascript">        <span class="hljs-function"><span class="hljs-title">disabledDate</span>(<span class="hljs-params">time</span>)</span>&#123;</span><br><span class="javascript">          <span class="hljs-keyword">let</span> _now = <span class="hljs-built_in">Date</span>.now();</span><br><span class="javascript">          <span class="hljs-keyword">return</span> time.getTime() &lt; _now ;</span><br><span class="javascript">        &#125;</span><br><span class="javascript">      &#125;</span><br><span class="javascript">    &#125;</span><br><span class="javascript">  &#125;,</span><br><span class="javascript">&#125;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="效果图-1"><a href="#效果图-1" class="headerlink" title="效果图"></a>效果图</h3><p><img src="https://linmuhan.gitee.io/images/month.png" alt="avatar"></p><h3 id="只能选择当前月之前的月份"><a href="#只能选择当前月之前的月份" class="headerlink" title="只能选择当前月之前的月份"></a>只能选择当前月之前的月份</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">el-date-picker</span></span><br><span class="hljs-tag">      <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;oldMonth&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;monthrange&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">value-format</span>=<span class="hljs-string">&quot;yyyy-MM&quot;</span></span><br><span class="hljs-tag">      @<span class="hljs-attr">change</span>=<span class="hljs-string">&quot;changeMouth&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">:picker-options</span>=<span class="hljs-string">&quot;oldmonthHandle&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;选择月&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">el-date-picker</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="javascript">  <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">    <span class="hljs-keyword">return</span>&#123;</span><br><span class="javascript">    <span class="hljs-attr">oldMonth</span>:<span class="hljs-string">&#x27;&#x27;</span>, </span><br><span class="javascript">    <span class="hljs-attr">oldmonthHandle</span>:&#123;</span><br><span class="javascript">        <span class="hljs-comment">// 只能选择当前月份和当前月份之后的月份</span></span><br><span class="javascript">        <span class="hljs-function"><span class="hljs-title">disabledDate</span>(<span class="hljs-params">time</span>)</span> &#123;</span><br><span class="javascript">          <span class="hljs-keyword">const</span> date = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(); <span class="hljs-comment">//当前时间</span></span><br><span class="javascript">          <span class="hljs-keyword">const</span> year = date.getFullYear();<span class="hljs-comment">//当前年份</span></span><br><span class="javascript">          <span class="hljs-keyword">let</span> month = date.getMonth() + <span class="hljs-number">1</span>; <span class="hljs-comment">//当前月份</span></span><br><span class="javascript">          <span class="hljs-keyword">if</span> (month &gt;= <span class="hljs-number">1</span> &amp;&amp; month &lt;= <span class="hljs-number">9</span>) &#123;</span><br><span class="javascript">            month = <span class="hljs-string">&quot;0&quot;</span> + month;</span><br><span class="javascript">          &#125;</span><br><span class="javascript">          <span class="hljs-keyword">const</span> currentdate = year.toString() + month.toString();</span><br><span class="javascript">          <span class="hljs-keyword">const</span> timeyear = time.getFullYear();</span><br><span class="javascript">          <span class="hljs-keyword">let</span> timemonth = time.getMonth() + <span class="hljs-number">1</span>;</span><br><span class="javascript">          <span class="hljs-keyword">if</span> (timemonth &gt;= <span class="hljs-number">1</span> &amp;&amp; timemonth &lt;= <span class="hljs-number">9</span>) &#123;</span><br><span class="javascript">            timemonth = <span class="hljs-string">&quot;0&quot;</span> + timemonth;</span><br><span class="javascript">          &#125;</span><br><span class="javascript">          <span class="hljs-keyword">const</span> timedate = timeyear.toString() + timemonth.toString();</span><br><span class="javascript">          <span class="hljs-comment">// return currentdate &lt;= timedate;//当前月份和往后不能选</span></span><br><span class="javascript">          <span class="hljs-keyword">return</span> currentdate &lt; timedate;<span class="hljs-comment">//当前月份以后不能选</span></span><br><span class="javascript">        &#125;,</span><br><span class="javascript">      &#125;</span><br><span class="javascript">    &#125;</span><br><span class="javascript">  &#125;,</span><br><span class="javascript">&#125;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="效果图-2"><a href="#效果图-2" class="headerlink" title="效果图"></a>效果图</h3><p><img src="https://linmuhan.gitee.io/images/oldmonth.png" alt="avatar"></p>]]></content>
      
      
      <categories>
          
          <category> elementUI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> elementUI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js模板字符串的拼接</title>
      <link href="/2021/11/24/js%E6%A8%A1%E6%9D%BF%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%8B%BC%E6%8E%A5/"/>
      <url>/2021/11/24/js%E6%A8%A1%E6%9D%BF%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%8B%BC%E6%8E%A5/</url>
      
        <content type="html"><![CDATA[<blockquote><p>普通写法</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span>  html =<span class="hljs-string">&#x27;&lt;div class=&quot;user_xgcon&quot;&gt;&#x27;</span><br>    +<span class="hljs-string">&#x27;&lt;div class=&quot;user_bm&quot;&gt;&#x27;</span><br>    +<span class="hljs-string">&#x27;&lt;label&gt;摊位总数：&lt;/label&gt;&#x27;</span><br>    +<span class="hljs-string">&#x27;&lt;input class=&quot;user-control&quot; id=&quot;batch_cont&quot; type=&quot;text&quot; name=&quot;&quot; value=&quot;&quot; placeholder=&quot;请输入摊位总数&quot; /&gt;&#x27;</span><br>    +<span class="hljs-string">&#x27;&lt;/div&gt;&#x27;</span><br></code></pre></td></tr></table></figure><blockquote><p>模板字符串拼接格式</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span>  html =<span class="hljs-string">`&lt;div class=&quot;user_xgcon&quot;&gt;</span><br><span class="hljs-string">&lt;div class=&quot;user_bm&quot;&gt;</span><br><span class="hljs-string">&lt;label&gt;摊位名称：&lt;/label&gt;</span><br><span class="hljs-string">&lt;input class=&quot;user-control&quot; id=&quot;edit_stallname&quot; type=&quot;text&quot; name=&quot;&quot; value=&quot;<span class="hljs-subst">$&#123;stall_name&#125;</span>&quot; placeholder=&quot;请输入摊位名称&quot; /&gt;</span><br><span class="hljs-string">&lt;/div&gt;`</span><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue-cli3项目vue.config文件配置</title>
      <link href="/2021/11/24/vue-config-js%E9%85%8D%E7%BD%AE/"/>
      <url>/2021/11/24/vue-config-js%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<pre><code>module.exports = &#123;    productionSourceMap: false,//生产环境是否要生成 sourceMap    publicPath: &#39;./&#39;,//部署应用包时的基本 URL 可以通过三元运算去配置dev和prod环境, publicPath: process.env.NODE_ENV === &#39;production&#39; ? &#39;/prod/&#39; : &#39;./&#39;    outputDir: &#39;dist&#39;,//build 时输出的文件目录    assetsDir: &#39;assets&#39;,//放置静态文件夹目录    devServer: &#123;        port: 8090,//开发运行时的端口        host: &#39;0.0.0.0&#39;, //开发运行时域名        https: false,//是否启用 https        open: true //npm run serve 时是否直接打开浏览器        proxy:&#123;      &#39;/server&#39;: &#123;        target: &#39;https://www.baidu.com&#39;, //如果请求的接口中有server 地址改为https://www.baidu.com      &#125;,      &#39;/google&#39;: &#123;        target: &#39;https://www.google.com/&#39;如果请求的接口中有google 地址改为https://www.baidu.com      &#125;,    &#125;,    &#125;,&#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> VUE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git常用命令(持续更新。。。)</title>
      <link href="/2021/10/28/git%E5%91%BD%E4%BB%A4/"/>
      <url>/2021/10/28/git%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<ul><li>git init ：初始化</li></ul><hr><ul><li>git add . - 添加文件到暂存区</li></ul><hr><ul><li>git commit -m ‘描述’ 提交描述</li></ul><hr><ul><li>git push  提交</li></ul><hr><ul><li>git pull  拉取代码</li></ul><hr><ul><li>git log 查看提交记录</li></ul><hr><ul><li>git config user.name 查看用户名</li></ul><hr><ul><li>git config user.email 查看邮箱</li></ul><hr><ul><li>git config user.name ‘XXX’：修改当前项目的用户名</li></ul><hr><ul><li>git config user.email ‘XXX’ 修改当前项目的邮箱</li></ul><hr><ul><li>git config  –global user.name ‘xxx’ 全局修改用户名</li></ul><hr><ul><li>git config  –global user.email ‘xxx’全局修改邮箱</li></ul><hr><ul><li>git remote -v 查看远程仓库</li></ul><hr><ul><li>git remote set-url origin xxx  修改设置新的远程仓库地址(xxx是要修改的远程地址)</li></ul><hr><ul><li>git branch 查看本地分支</li></ul><hr><ul><li>git status 查看当前仓库状态</li></ul><hr>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>localStorage和sessionStorage用法</title>
      <link href="/2021/10/27/localStorage%E5%92%8CsessionStorage%E7%94%A8%E6%B3%95/"/>
      <url>/2021/10/27/localStorage%E5%92%8CsessionStorage%E7%94%A8%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> arr=[&#123;<br>                <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;小名&#x27;</span>,<br>                <span class="hljs-attr">sex</span>:<span class="hljs-string">&#x27;男&#x27;</span><br>            &#125;,&#123;<br>                <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;Amy&#x27;</span>,<br>                <span class="hljs-attr">sex</span>:<span class="hljs-string">&#x27;女&#x27;</span><br>            &#125;]<br></code></pre></td></tr></table></figure><blockquote><p>存值</p></blockquote><hr><p>localStorage.setItem(“userInfo”,JSON.stringify(arr)); //存储之前数组转换为字符串<br>sessionStorage.setItem(“userInfo”,JSON.stringify(arr));</p><blockquote><p>取值</p></blockquote><hr><p>var user = JSON.parse(localStorage.getItem(“userInfo”))<br>var user1 = JSON.parse(sessionStorage.getItem(“userInfo”))</p><blockquote><p>删除指定字段</p></blockquote><hr><p>localStorage.removeItem(“userInfo”);<br>sessionStorage.removeItem(“userInfo”);</p><blockquote><p>全部清空</p></blockquote><hr><p>localStorage.clear();<br>sessionStorage.clear();</p>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> localStorage </tag>
            
            <tag> sessionStorage </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>移动端调试查看控制台信息vConsole</title>
      <link href="/2021/10/24/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E8%B0%83%E8%AF%95%E6%9F%A5%E7%9C%8B%E6%8E%A7%E5%88%B6%E5%8F%B0%E4%BF%A1%E6%81%AFvConsole/"/>
      <url>/2021/10/24/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E8%B0%83%E8%AF%95%E6%9F%A5%E7%9C%8B%E6%8E%A7%E5%88%B6%E5%8F%B0%E4%BF%A1%E6%81%AFvConsole/</url>
      
        <content type="html"><![CDATA[<blockquote><p>通过vConsole.js 重写console方法，实现了类似于微信小程序的移动端调试效果。</p></blockquote><p>具体使用方法 :在HTML页面引入</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script src=<span class="hljs-string">&quot;https://cdn.bootcdn.net/ajax/libs/vConsole/3.9.1/vconsole.min.js&quot;</span>&gt;&lt;/script&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="javascript"><span class="xml">    <span class="hljs-keyword">var</span> vConsole = <span class="hljs-keyword">new</span> VConsole();</span></span><br><span class="javascript"><span class="xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><blockquote><p>效果图</p></blockquote><p><img src="https://linmuhan.gitee.io/images/h5vscode.png" alt="avatar"></p>]]></content>
      
      
      
        <tags>
            
            <tag> h5 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
